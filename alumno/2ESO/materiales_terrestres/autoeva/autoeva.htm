<html>
<head><meta name="author" content="Created with Hot Potatoes by Half-Baked Software, registered to Rafael Caballero."></meta><meta name="keywords" content="Hot Potatoes, Half-Baked Software, Windows, University of Victoria"></meta>
<title>
Autoevaluaci&#243;n
</title>

<script language="javascript" type="text/javascript">

//<![CDATA[

<!--

// BrowserCheck Object

function BrowserCheck() {
	var b = navigator.appName
//HBS extension
	this.mac = (navigator.appVersion.indexOf('Mac') != -1)
	if (b=="Netscape") this.b = "ns"
	else if (b=="Microsoft Internet Explorer") this.b = "ie"
	else this.b = b
	this.version = navigator.appVersion
	this.v = parseInt(this.version)
	this.ns = (this.b=="ns" && this.v>=4)
	this.ns4 = (this.b=="ns" && this.v==4)
	this.ns5 = (this.b=="ns" && this.v==5)
	this.ie = (this.b=="ie" && this.v>=4)
	this.ie4 = (this.version.indexOf('MSIE 4')>0)
	this.ie5 = (this.version.indexOf('MSIE 5')>0)
	this.min = (this.ns||this.ie)
	this.CRAPBrowser = (this.ie && this.mac); //Cannot Resolve Addresses Properly
}

is = new BrowserCheck();

var LocFolder = GetFolder(window.location.href);
function GetFolder(LocPath){
	LocPath = ReplaceStuff('\'','%27',LocPath);
	var i = LocPath.lastIndexOf('/');
	if (i<0){i=LocPath.lastIndexOf('\\')};
	return LocPath.substring(0,i);
}

function CombineURLs(InURL){
	var i = InURL.indexOf('../');
	var s = LocFolder;
	while (i >- 1){
		s = GetFolder(s);
		InURL = InURL.substring(3,InURL.length);
		i = InURL.indexOf('../');
	}
	return s + '/' + InURL;
}

x = new Array();
function ResolveURLs(InText,Attribute){
	x.length=0;
	var Temp = InText.toLowerCase();
	var z;
	var AttLen = Attribute.length + 2;
	var y=Temp.lastIndexOf(Attribute + '="');
	while (y>-1){
		var sLoc = y+AttLen;
		if (Temp.substring(sLoc,sLoc+5) != 'http:'){
			x[x.length]=new Array();
			x[x.length-1][0] = sLoc;
			z = Temp.indexOf('"',sLoc);
			x[x.length-1][1] = z;
			x[x.length-1][2] = InText.substring(sLoc,z);

		}
		Temp = Temp.substring(0,y);
		y=Temp.lastIndexOf(Attribute + '="');
	}
	for (var j=0; j<x.length; j++){
		InText = InText.substring(0,x[j][0]) + CombineURLs(x[j][2]) + InText.substring(x[j][1], InText.length);
	}
	return InText;
}

function ResolveAllURLs(Stuff){
	Stuff = ResolveURLs(Stuff,'href');
	Stuff = ResolveURLs(Stuff,'src');
	Stuff = ResolveURLs(Stuff,'parent.location');
	return Stuff;
}


var ExBGColor = '#d1e9d1';



var PageBGColor = '#e6ffe6';



var NavBarColor = '#e6ffe6';


var TextColor = '#000033';
var CurrQNum = 0;
var ALetters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
var CorrectIndicator = 'Bien';
var IncorrectIndicator = 'Mal';
var YourScoreIs = 'Tu puntuaci&#243;n es';
var Tries = 0;
var CorrectChoices = 0;
var ContinuousScoring = true;
var CorrectFirstTime = 'Respuestas correctas a la primera:';var ExerciseTitle = 'Autoevaluaci&#243;n';
var ExerciseSubtitle = '';
var Instructions = ''; //'';
var ShuffleQs = false;
var ShuffleAs = false;
var DefaultRight = '';
var DefaultWrong = '';
var QsToShow = 20;
var ShowOneByOne = false;
var ReadingURL = '';
var EraseFeedback = true;
var Score = 0;

var PreviousPage = history.length;







var NavBar='';


NavBar+='<tr><form name="NavButtons1" action=""><td bgcolor="#e6ffe6" align="center">';
NavBar+='<font face="Geneva,Arial" size="-1">';


NavBar+='<input type="button" value="Volver" onclick=\'parent.location="../autoevaluacion.htm"\'></input>';


NavBar+='</font></td></form></tr>';
if (is.CRAPBrowser){NavBar=ResolveAllURLs(NavBar)};


var TitleCode = '<tr><td align="center" valign="middle" bgcolor="#e6ffe6">';
TitleCode += '<font size="+1" face="Geneva,Arial" color="#006666">' + ExerciseTitle + '</font><br />';
TitleCode += '<font size="-1" face="Geneva,Arial" color="#006666">' + ExerciseSubtitle + '<br />';
TitleCode += '</font></td></tr>';

var QButtonsOpener = '<table border="0" width="85%" cellpadding="10">';
QButtonsOpener += '<tr><td align="center" valign="middle"><form>';
QButtonsOpener += '<font size="+1"><input type="button" value="&lt;=" onclick="parent.ChangeQ(-1)"></input>';
var QButtonsCloser = '<input type="button" value="=&gt;" onclick="parent.ChangeQ(1)"></input>';
QButtonsCloser += '</font></form></td></tr></table>';

var TableOpener = '<form name="QForm">';
TableOpener += '<table border="0" width="85%">';
var QRow = '<tr><td valign="top" bgcolor="#d1e9d1" align="right">';
QRow += '<font size="+1" face="Geneva,Arial" color="#000033">[QNumber]</font></td>';
QRow += '<td colspan="3" valign="top" bgcolor="#d1e9d1"><font size="-1" face="Geneva,Arial" color="#000033">[Question]<br />&nbsp;';
QRow += '</font></td></tr>';

var ARow = '<tr><td></td><td valign="top" bgcolor="#d1e9d1"><input type="text" value=" " size="3" name="FB_[QNum]_[ANum]"></input></td>';
ARow += '<td valign="top" bgcolor="#d1e9d1"><input type="button" value="[ALetter]" OnClick="parent.CheckAnswer([QNum],[ANum])"></input></td>';
ARow += '<td width="100%" bgcolor="#d1e9d1"><font size="-1" face="Geneva,Arial" color="#000033">[Ans]</font></td></tr>';

var MARow = '<tr><td></td><td valign="top" bgcolor="#d1e9d1" colspan="3"><input type="checkbox" name="A_[QNum]_[ANum]" value="[Correct]"></input>';
MARow += '<font size="-1" face="Geneva,Arial" color="#000033">[Ans]</font></td></tr>';

var CheckButton = '<tr><td></td><td valign="top" bgcolor="#d1e9d1" ><input type="button" value="Comprobar"';
CheckButton += ' onclick="parent.CheckMulti([QNum])"></input></td></tr>';

TableCloser = '</table></form>';

function GoBack(){
	var BackSkip = history.length - PreviousPage;
	if (BackSkip > 0){
		history.go((BackSkip+1)*-1);
	}
	else{
		parent.history.back();
	}
}

function ReduceItems(){
	var ItemToDump=0;
	var j=0;
	while (I.length > QsToShow){
		ItemToDump = Math.floor(I.length*Math.random());
		for (j=ItemToDump; j<(I.length-1); j++){
			I[j] = I[j+1];
		}
		I.length = I.length-1;
	}
}

function Shuffle(InArray){
	Temp = new Array();
	var Len = InArray.length;

	var j = Len;

	for (var i=0; i<Len; i++){
		Temp[i] = InArray[i];
	}

	for (i=0; i<Len; i++){
		Num = Math.floor(j  *  Math.random());
		InArray[i] = Temp[Num];

		for (var k=Num; k < j; k++) {
			Temp[k] = Temp[k+1];
		}
		j--;
	}
	return InArray;
}

function WriteFeedback(Feedback) {
	if (is.CRAPBrowser){Feedback=ResolveAllURLs(Feedback);}
//Build the output string
	var OutString = '';
	OutString += '<html>';
	OutString += '<body  background="HalfBakedBG.gif" bgcolor="#e6ffe6" text="#000033" link="#0000ff" vlink="#0000cc">';
	OutString += '<center><table border="0" cellpadding="5" cellspacing="1" width="85%">';
	OutString += NavBar;
	if (Feedback.length>0){
		OutString += '<tr><td bgcolor="#d1e9d1" align="center">'; 
		OutString += '<font face="Geneva,Arial" size="-1" color="#000033">';
		OutString += Feedback;
		OutString += '</font></td></tr>'
	}
	OutString += '</table></center></body></html>';
//Write it to the frame
	TopFrame.document.clear();
	TopFrame.document.open();
	TopFrame.document.write(OutString);
	TopFrame.document.close();
}

function StartUp(){




//Reduce array if required
	if (QsToShow < I.length){
		ReduceItems();
	}

//Shuffle stuff if required

	if (ShuffleQs == true){
		I = Shuffle(I);
	}

	if (ShuffleAs == true){
		for (var i=0; i<I.length; i++){
			I[i][1] = Shuffle(I[i][1]);
		}
	}

//Create arrays
	CreateStatusArrays();



//Show the first question or all of them
	if (ShowOneByOne == false){
		ShowAllQs();
	}
	else{
		ShowQuestion(CurrQNum);
	}

//Write the top frame
	WriteFeedback(Instructions);
}


I = new Array();

I[0] = new Array();
I[0][0]='Se&#241;ala la frase err&#243;nea:';
I[0][1] = new Array();
I[0][1][0] = new Array();
I[0][1][0][0]='Un mineral puede formar parte de diferentes rocas<br /><br /><br />';
I[0][1][0][1]='&#161;Lo siento&#161; prueba otra vez.';
I[0][1][0][2] = 0;
I[0][1][1] = new Array();
I[0][1][1][0]='Las rocas siempre est&#225;n formadas por varios minerales distintos<br /><br /><br />';
I[0][1][1][1]='&#161;Correcto!';
I[0][1][1][2] = 1;
I[0][1][2] = new Array();
I[0][1][2][0]='Un cristal es un mineral con estructura interna ordenada<br /><br /><br />';
I[0][1][2][1]='&#161;Lo siento&#161; prueba otra vez.';
I[0][1][2][2] = 0;
I[0][1][3] = new Array();
I[0][1][3][0]='Las rocas son consecuencia de ciertos fen&#243;menos geol&#243;gicos';
I[0][1][3][1]='&#161;Lo siento&#161; prueba otra vez.';
I[0][1][3][2] = 0;
I[0][2] = 0;

I[1] = new Array();
I[1][0]='Todos los cristales tienen, al menos:';
I[1][1] = new Array();
I[1][1][0] = new Array();
I[1][1][0][0]='Centro de simetr&#237;a<br /><br /><br /><br />';
I[1][1][0][1]='&#161;Correcto!';
I[1][1][0][2] = 1;
I[1][1][1] = new Array();
I[1][1][1][0]='Un plano de simetr&#237;a<br /><br /><br />';
I[1][1][1][1]='&#161;Lo siento&#161; prueba otra vez.';
I[1][1][1][2] = 0;
I[1][1][2] = new Array();
I[1][1][2][0]='Un eje binario<br /><br /><br />';
I[1][1][2][1]='&#161;Lo siento&#161; prueba otra vez.';
I[1][1][2][2] = 0;
I[1][1][3] = new Array();
I[1][1][3][0]='Pueden no tener ninguno de estos elementos';
I[1][1][3][1]='&#161;Lo siento&#161; prueba otra vez.';
I[1][1][3][2] = 0;
I[1][2] = 0;

I[2] = new Array();
I[2][0]='La celda unidad de un cristal viene definida por: ';
I[2][1] = new Array();
I[2][1][0] = new Array();
I[2][1][0][0]='Los elementos de simetr&#237;a<br /><br /><br /><br />';
I[2][1][0][1]='&#161;Lo siento&#161; prueba otra vez.';
I[2][1][0][2] = 0;
I[2][1][1] = new Array();
I[2][1][1][0]='Los vectores que la configuran<br /><br />';
I[2][1][1][1]='&#161;Lo siento&#161; prueba otra vez.';
I[2][1][1][2] = 0;
I[2][1][2] = new Array();
I[2][1][2][0]='Los &#225;ngulos entre vectores<br /><br /><br />';
I[2][1][2][1]='&#161;Lo siento&#161; prueba otra vez.';
I[2][1][2][2] = 0;
I[2][1][3] = new Array();
I[2][1][3][0]='Todo lo anterior<br />';
I[2][1][3][1]='&#161;Correcto!';
I[2][1][3][2] = 1;
I[2][2] = 0;

I[3] = new Array();
I[3][0]='Isomorfismo es:';
I[3][1] = new Array();
I[3][1][0] = new Array();
I[3][1][0][0]='Igual composici&#243;n qu&#237;mica y distinta forma cristalogr&#225;fica<br /><br /><br /><br />';
I[3][1][0][1]='&#161;Lo siento&#161; prueba otra vez.';
I[3][1][0][2] = 0;
I[3][1][1] = new Array();
I[3][1][1][0]='Igual forma cristalogr&#225;fica y distinta composici&#243;n qu&#237;mica<br /><br /><br />';
I[3][1][1][1]='&#161;Correcto!';
I[3][1][1][2] = 1;
I[3][1][2] = new Array();
I[3][1][2][0]='Igual forma cristalogr&#225;fica e igual composici&#243;n qu&#237;mica<br /><br /><br />';
I[3][1][2][1]='&#161;Lo siento&#161; prueba otra vez.';
I[3][1][2][2] = 0;
I[3][1][3] = new Array();
I[3][1][3][0]='Minerales con el mismo aspecto';
I[3][1][3][1]='&#161;Lo siento&#161; prueba otra vez.';
I[3][1][3][2] = 0;
I[3][2] = 0;

I[4] = new Array();
I[4][0]='Polimorfismo es: ';
I[4][1] = new Array();
I[4][1][0] = new Array();
I[4][1][0][0]='Igual composici&#243;n qu&#237;mica y distinta forma cristalogr&#225;fica<br /><br /><br /><br />';
I[4][1][0][1]='&#161;Correcto!';
I[4][1][0][2] = 1;
I[4][1][1] = new Array();
I[4][1][1][0]='Igual forma cristalogr&#225;fica y distinta composici&#243;n qu&#237;mica<br /><br />';
I[4][1][1][1]='&#161;Lo siento&#161; prueba otra vez.';
I[4][1][1][2] = 0;
I[4][1][2] = new Array();
I[4][1][2][0]='Distinta forma cristalogr&#225;fica y diferente composici&#243;n qu&#237;mica<br /><br /><br />';
I[4][1][2][1]='&#161;Lo siento&#161; prueba otra vez.';
I[4][1][2][2] = 0;
I[4][1][3] = new Array();
I[4][1][3][0]='Minerales con distinto aspecto';
I[4][1][3][1]='&#161;Lo siento&#161; prueba otra vez.';
I[4][1][3][2] = 0;
I[4][2] = 0;

I[5] = new Array();
I[5][0]='Como sabes, hay ejemplares de un mismo mineral que presentan aspectos externos muy diferente. &#191;Qu&#233; propiedad es la m&#225;s utilizada para identificar minerales en laboratorio?';
I[5][1] = new Array();
I[5][1][0] = new Array();
I[5][1][0][0]='El color y la raya<br /><br /><br /><br />';
I[5][1][0][1]='&#161;Lo siento&#161; prueba otra vez.';
I[5][1][0][2] = 0;
I[5][1][1] = new Array();
I[5][1][1][0]='La conductividad el&#233;ctrica<br /><br />';
I[5][1][1][1]='&#161;Lo siento&#161; prueba otra vez.';
I[5][1][1][2] = 0;
I[5][1][2] = new Array();
I[5][1][2][0]='La propagaci&#243;n de la luz<br /><br /><br />';
I[5][1][2][1]='&#161;Correcto!';
I[5][1][2][2] = 1;
I[5][1][3] = new Array();
I[5][1][3][0]='Las propiedades mec&#225;nicas en general';
I[5][1][3][1]='&#161;Lo siento&#161; prueba otra vez.';
I[5][1][3][2] = 0;
I[5][2] = 0;

I[6] = new Array();
I[6][0]='Los silicatos son los minerales m&#225;s abundantes porque:';
I[6][1] = new Array();
I[6][1][0] = new Array();
I[6][1][0][0]='La posici&#243;n de la Tierra hace que el silicio se concentre en su &#243;rbita<br /><br /><br /><br />';
I[6][1][0][1]='&#161;Lo siento&#161; prueba otra vez.';
I[6][1][0][2] = 0;
I[6][1][1] = new Array();
I[6][1][1][0]='No es cierto que sean los m&#225;s abundantes<br /><br /><br />';
I[6][1][1][1]='&#161;Lo siento&#161; prueba otra vez.';
I[6][1][1][2] = 0;
I[6][1][2] = new Array();
I[6][1][2][0]='Su estructura se puede unir consigo misma de diferentes formas<br /><br /><br />';
I[6][1][2][1]='&#161;Correcto!';
I[6][1][2][2] = 1;
I[6][1][3] = new Array();
I[6][1][3][0]='El silicio es un &#225;tomo muy peque&#241;o';
I[6][1][3][1]='&#161;Lo siento&#161; prueba otra vez.';
I[6][1][3][2] = 0;
I[6][2] = 0;

I[7] = new Array();
I[7][0]='Las clasificaciones actuales de minerales se basan en:';
I[7][1] = new Array();
I[7][1][0] = new Array();
I[7][1][0][0]='Su origen geol&#243;gico<br /><br /><br /><br />';
I[7][1][0][1]='&#161;Lo siento&#161; prueba otra vez.';
I[7][1][0][2] = 0;
I[7][1][1] = new Array();
I[7][1][1][0]='El tipo de roca en que aparecen<br /><br />';
I[7][1][1][1]='&#161;Lo siento&#161; prueba otra vez.';
I[7][1][1][2] = 0;
I[7][1][2] = new Array();
I[7][1][2][0]='Sus propiedades f&#237;sicas<br /><br />';
I[7][1][2][1]='&#161;Lo siento&#161; prueba otra vez.';
I[7][1][2][2] = 0;
I[7][1][3] = new Array();
I[7][1][3][0]='Sus caracter&#237;sticas qu&#237;micas<br />';
I[7][1][3][1]='&#161;Correcto!';
I[7][1][3][2] = 1;
I[7][2] = 0;

I[8] = new Array();
I[8][0]='Las rocas end&#243;genas se dividen en:';
I[8][1] = new Array();
I[8][1][0] = new Array();
I[8][1][0][0]='&#205;gneas y magm&#225;ticas<br /><br /><br /><br />';
I[8][1][0][1]='&#161;Lo siento&#161; prueba otra vez.';
I[8][1][0][2] = 0;
I[8][1][1] = new Array();
I[8][1][1][0]='Magm&#225;ticas y metam&#243;rficas<br /><br /><br />';
I[8][1][1][1]='&#161;Correcto!';
I[8][1][1][2] = 1;
I[8][1][2] = new Array();
I[8][1][2][0]='Plut&#243;nicas y volc&#225;nicas<br /><br />';
I[8][1][2][1]='&#161;Lo siento&#161; prueba otra vez.';
I[8][1][2][2] = 0;
I[8][1][3] = new Array();
I[8][1][3][0]='Metam&#243;rficas y sedimentarias';
I[8][1][3][1]='&#161;Lo siento&#161; prueba otra vez.';
I[8][1][3][2] = 0;
I[8][2] = 0;

I[9] = new Array();
I[9][0]='Cuando el magma enfr&#237;a lentamente da lugar a las rocas';
I[9][1] = new Array();
I[9][1][0] = new Array();
I[9][1][0][0]='Plut&#243;nicas<br /><br /><br /><br /><br />';
I[9][1][0][1]='&#161;Correcto!';
I[9][1][0][2] = 1;
I[9][1][1] = new Array();
I[9][1][1][0]='Volc&#225;nicas<br /><br /><br /><br />';
I[9][1][1][1]='&#161;Lo siento&#161; prueba otra vez.';
I[9][1][1][2] = 0;
I[9][1][2] = new Array();
I[9][1][2][0]='Metam&#243;rficas<br /><br /><br />';
I[9][1][2][1]='&#161;Lo siento&#161; prueba otra vez.';
I[9][1][2][2] = 0;
I[9][1][3] = new Array();
I[9][1][3][0]='El magma no enfr&#237;a lentamente, pues se "congela" en la superficie';
I[9][1][3][1]='&#161;Lo siento&#161; prueba otra vez.';
I[9][1][3][2] = 0;
I[9][2] = 0;

I[10] = new Array();
I[10][0]='La diferencia entre rocas plut&#243;nicas y volc&#225;nicas es:';
I[10][1] = new Array();
I[10][1][0] = new Array();
I[10][1][0][0]='Por la composici&#243;n qu&#237;mica<br /><br />';
I[10][1][0][1]='&#161;Lo siento&#161; prueba otra vez.';
I[10][1][0][2] = 0;
I[10][1][1] = new Array();
I[10][1][1][0]='Por su contenido en s&#237;lice<br />';
I[10][1][1][1]='&#161;Lo siento&#161; prueba otra vez.';
I[10][1][1][2] = 0;
I[10][1][2] = new Array();
I[10][1][2][0]='Por el tipo de magma del que proceden<br />';
I[10][1][2][1]='&#161;Lo siento&#161; prueba otra vez.';
I[10][1][2][2] = 0;
I[10][1][3] = new Array();
I[10][1][3][0]='Por la velocidad de enfriamiento del magma';
I[10][1][3][1]='&#161;Correcto!';
I[10][1][3][2] = 1;
I[10][2] = 0;

I[11] = new Array();
I[11][0]='Se&#241;ala cual de las siguientes circunstancias no es condici&#243;n para que se produzca metamorfismo:';
I[11][1] = new Array();
I[11][1][0] = new Array();
I[11][1][0][0]='Aumentos de presi&#243;n y temperatura<br /><br />';
I[11][1][0][1]='&#161;Lo siento&#161; prueba otra vez.';
I[11][1][0][2] = 0;
I[11][1][1] = new Array();
I[11][1][1][0]='Que la roca no llegue a fundirse<br />';
I[11][1][1][1]='&#161;Lo siento&#161; prueba otra vez.';
I[11][1][1][2] = 0;
I[11][1][2] = new Array();
I[11][1][2][0]='Que la roca inicial sea sedimentaria<br />';
I[11][1][2][1]='&#161;Correcto!';
I[11][1][2][2] = 1;
I[11][1][3] = new Array();
I[11][1][3][0]='Que las rocas se alejen de la superficie';
I[11][1][3][1]='&#161;Lo siento&#161; prueba otra vez.';
I[11][1][3][2] = 0;
I[11][2] = 0;

I[12] = new Array();
I[12][0]='El m&#225;rmol es una roca formada, b&#225;sicamente, por el mineral calcita. &#191;Qu&#233; tipo de roca es el m&#225;rmol?';
I[12][1] = new Array();
I[12][1][0] = new Array();
I[12][1][0][0]='Sedimentaria, pues es una variedad de caliza<br /><br />';
I[12][1][0][1]='&#161;Lo siento&#161; prueba otra vez.';
I[12][1][0][2] = 0;
I[12][1][1] = new Array();
I[12][1][1][0]='Plut&#243;nica, ya que la calcita est&#225; cristalizada<br />';
I[12][1][1][1]='&#161;Lo siento&#161; prueba otra vez.';
I[12][1][1][2] = 0;
I[12][1][2] = new Array();
I[12][1][2][0]='Metam&#243;rfica, procedente del metamorfismo de calizas<br />';
I[12][1][2][1]='&#161;Correcto!';
I[12][1][2][2] = 1;
I[12][1][3] = new Array();
I[12][1][3][0]='No es una roca, ya que es una variedad de calcita';
I[12][1][3][1]='&#161;Lo siento&#161; prueba otra vez.';
I[12][1][3][2] = 0;
I[12][2] = 0;

I[13] = new Array();
I[13][0]='&#191;Cu&#225;l de los siguientes procesos no da lugar a rocas sedimentarias?';
I[13][1] = new Array();
I[13][1][0] = new Array();
I[13][1][0][0]='Aumentos de presi&#243;n y temperatura<br /><br />';
I[13][1][0][1]='&#161;Correcto!';
I[13][1][0][2] = 1;
I[13][1][1] = new Array();
I[13][1][1][0]='Ca&#237;da de materiales por gravedad<br />';
I[13][1][1][1]='&#161;Lo siento&#161; prueba otra vez.';
I[13][1][1][2] = 0;
I[13][1][2] = new Array();
I[13][1][2][0]='Reacciones qu&#237;micas<br />';
I[13][1][2][1]='&#161;Lo siento&#161; prueba otra vez.';
I[13][1][2][2] = 0;
I[13][1][3] = new Array();
I[13][1][3][0]='Acumulaci&#243;n de restos de seres vivos';
I[13][1][3][1]='&#161;Lo siento&#161; prueba otra vez.';
I[13][1][3][2] = 0;
I[13][2] = 0;

I[14] = new Array();
I[14][0]='&#191;Todos los restos de seres vivos pueden dar lugar a la formaci&#243;n de rocas org&#225;nicas?';
I[14][1] = new Array();
I[14][1][0] = new Array();
I[14][1][0][0]='S&#237;, siempre que no los consuman otros seres vivos<br /><br />';
I[14][1][0][1]='&#161;Lo siento&#161; prueba otra vez.';
I[14][1][0][2] = 0;
I[14][1][1] = new Array();
I[14][1][1][0]='Solamente las partes duras (madera y esqueletos)<br />';
I[14][1][1][1]='&#161;Lo siento&#161; prueba otra vez.';
I[14][1][1][2] = 0;
I[14][1][2] = new Array();
I[14][1][2][0]='S&#243;lo si caen en un ambiente con falta de ox&#237;geno<br />';
I[14][1][2][1]='&#161;Correcto!';
I[14][1][2][2] = 1;
I[14][1][3] = new Array();
I[14][1][3][0]='Las rocas org&#225;nicas no proceden de los seres vivos';
I[14][1][3][1]='&#161;Lo siento&#161; prueba otra vez.';
I[14][1][3][2] = 0;
I[14][2] = 0;

I[15] = new Array();
I[15][0]='La serie evolutiva de los carbones, seg&#250;n su contenido en carbono, es:';
I[15][1] = new Array();
I[15][1][0] = new Array();
I[15][1][0][0]='Hulla - Antracita - Lignito - Turba<br /><br />';
I[15][1][0][1]='&#161;Lo siento&#161; prueba otra vez.';
I[15][1][0][2] = 0;
I[15][1][1] = new Array();
I[15][1][1][0]='Antracita - Lignito - Hulla - Turba<br />';
I[15][1][1][1]='&#161;Lo siento&#161; prueba otra vez.';
I[15][1][1][2] = 0;
I[15][1][2] = new Array();
I[15][1][2][0]='Lignito - Turba - Antracita - Hulla<br />';
I[15][1][2][1]='&#161;Lo siento&#161; prueba otra vez.';
I[15][1][2][2] = 0;
I[15][1][3] = new Array();
I[15][1][3][0]='Turba - Lignito - Hulla - Antracita';
I[15][1][3][1]='&#161;Correcto!';
I[15][1][3][2] = 1;
I[15][2] = 0;

I[16] = new Array();
I[16][0]='&#191;Cu&#225;l de las siguientes condiciones no es condici&#243;n necesaria para la formaci&#243;n del petr&#243;leo?';
I[16][1] = new Array();
I[16][1][0] = new Array();
I[16][1][0][0]='Restos vegetales<br /><br />';
I[16][1][0][1]='&#161;Correcto!';
I[16][1][0][2] = 1;
I[16][1][1] = new Array();
I[16][1][1][0]='Plancton marino<br />';
I[16][1][1][1]='&#161;Lo siento&#161; prueba otra vez.';
I[16][1][1][2] = 0;
I[16][1][2] = new Array();
I[16][1][2][0]='Roca almac&#233;n<br />';
I[16][1][2][1]='&#161;Lo siento&#161; prueba otra vez.';
I[16][1][2][2] = 0;
I[16][1][3] = new Array();
I[16][1][3][0]='Acci&#243;n bacteriana';
I[16][1][3][1]='&#161;Lo siento&#161; prueba otra vez.';
I[16][1][3][2] = 0;
I[16][2] = 0;

I[17] = new Array();
I[17][0]='La caracter&#237;stica que mide la productividad de un yacimiento se llama:';
I[17][1] = new Array();
I[17][1][0] = new Array();
I[17][1][0][0]='Mena<br /><br />';
I[17][1][0][1]='&#161;Lo siento&#161; prueba otra vez.';
I[17][1][0][2] = 0;
I[17][1][1] = new Array();
I[17][1][1][0]='Ganga<br />';
I[17][1][1][1]='&#161;Lo siento&#161; prueba otra vez.';
I[17][1][1][2] = 0;
I[17][1][2] = new Array();
I[17][1][2][0]='Ley<br />';
I[17][1][2][1]='&#161;Correcto!';
I[17][1][2][2] = 1;
I[17][1][3] = new Array();
I[17][1][3][0]='Placer';
I[17][1][3][1]='&#161;Lo siento&#161; prueba otra vez.';
I[17][1][3][2] = 0;
I[17][2] = 0;

I[18] = new Array();
I[18][0]='El principal inter&#233;s de los yacimientos minerales es:';
I[18][1] = new Array();
I[18][1][0] = new Array();
I[18][1][0][0]='Metal&#250;rgico<br /><br />';
I[18][1][0][1]='&#161;Lo siento&#161; prueba otra vez.';
I[18][1][0][2] = 0;
I[18][1][1] = new Array();
I[18][1][1][0]='Energ&#233;tico<br />';
I[18][1][1][1]='&#161;Lo siento&#161; prueba otra vez.';
I[18][1][1][2] = 0;
I[18][1][2] = new Array();
I[18][1][2][0]='Gemol&#243;gico';
I[18][1][2][1]='&#161;Lo siento&#161; prueba otra vez.';
I[18][1][2][2] = 0;
I[18][1][3] = new Array();
I[18][1][3][0]='<br />Todos los anteriores';
I[18][1][3][1]='&#161;Correcto!';
I[18][1][3][2] = 1;
I[18][2] = 0;

I[19] = new Array();
I[19][0]='En Espa&#241;a son importantes las explotaciones de:';
I[19][1] = new Array();
I[19][1][0] = new Array();
I[19][1][0][0]='Diamantes<br /><br />';
I[19][1][0][1]='&#161;Lo siento&#161; prueba otra vez.';
I[19][1][0][2] = 0;
I[19][1][1] = new Array();
I[19][1][1][0]='Mercurio<br />';
I[19][1][1][1]='&#161;Correcto!';
I[19][1][1][2] = 1;
I[19][1][2] = new Array();
I[19][1][2][0]='Petr&#243;leo<br />';
I[19][1][2][1]='&#161;Lo siento&#161; prueba otra vez.';
I[19][1][2][2] = 0;
I[19][1][3] = new Array();
I[19][1][3][0]='Nitratos';
I[19][1][3][1]='&#161;Lo siento&#161; prueba otra vez.';
I[19][1][3][2] = 0;
I[19][2] = 0;


Status = new Array();


function CreateStatusArrays(){
	for (var x=0; x<I.length; x++){
		Status[x] = new Array();
		Status[x][0] = 0; // Question not done yet
		Status[x][1] = new Array(); //for tracking whether answers chosen
		for (var y=0; y<I[x][1].length; y++){
			Status[x][1][y] = '0'; //Answers not chosen yet
		}
		Status[x][2] = 0; //Wrong tries at this question so far
		Status[x][3] = 0; //For storing score out of one on this question
	}
}

function ReplaceStuff(Token, Replacement, InString){
	var i = InString.indexOf(Token);
	var FirstBit = '';
	var LastBit = '';
	while (i>-1){
		FirstBit = InString.substring(0, i);
		LastBit = InString.substring(i + Token.length, InString.length);	
		InString = FirstBit + Replacement + LastBit;
		i = InString.indexOf(Token);
	}
	return InString;
}

function ChangeQ(ChangeBy){
	var NewNum = CurrQNum + ChangeBy;
	if ((NewNum >= 0)&&(NewNum<I.length)){
		CurrQNum = NewNum;
		ShowQuestion(CurrQNum);
	}
	var CurrScore = '';
	if ((ContinuousScoring == true)&&(EraseFeedback == true)){
		CurrScore = YourScoreIs + ' ' + Score + '%.';
		WriteFeedback(CurrScore);
	}
}

function BuildQuestion(QNum){
	if (I[QNum][2] == 0){
		var Temp = ReplaceStuff('[Question]', I[QNum][0], QRow);

		var AnsRows = '';
		for (var i=0; i<I[QNum][1].length; i++){
			TempAns = ARow;
			TempAns = ReplaceStuff('[ANum]', i, TempAns);
			TempAns = ReplaceStuff('[ALetter]', ' ' + ALetters.charAt(i) + ' ', TempAns);
			TempAns = ReplaceStuff('[Ans]', I[QNum][1][i][0], TempAns);
			AnsRows += TempAns;
		}
		Temp += AnsRows;
		Temp = ReplaceStuff('[QNumber]', QNum+1, Temp);
		Temp = ReplaceStuff('[QNum]', QNum, Temp);
	}
	else{
		var Temp = ReplaceStuff('[Question]', I[QNum][0], QRow);
		var AnsRows = '';
		for (var i=0; i<I[QNum][1].length; i++){
			TempAns = MARow;
			TempAns = ReplaceStuff('[ANum]', i, TempAns);
			TempAns = ReplaceStuff('[Correct]', I[QNum][1][i][2], TempAns);
			TempAns = ReplaceStuff('[Ans]', I[QNum][1][i][0], TempAns);
			AnsRows += TempAns;
		}
		Temp += AnsRows;
		Temp += CheckButton;
		Temp = ReplaceStuff('[QNumber]', QNum+1, Temp);
		Temp = ReplaceStuff('[QNum]', QNum, Temp);
	}
	return Temp;
}

function DisplayExercise(StuffToDisplay){
//Build the output string
	var OutString = '';
	OutString += '<html>';
	OutString += '<body  background="HalfBakedBG.gif" bgcolor="#e6ffe6" text="#000033" link="#0000ff" vlink="#0000cc">';
	OutString += '<center><table border="0" cellpadding="5" cellspacing="1" width="85%">';
	OutString += TitleCode; 
	OutString += '<tr><td bgcolor="#d1e9d1" align="center">'; 
	OutString += '<font face="Geneva,Arial" size="-1">';
	OutString += StuffToDisplay;
	OutString += '</font></td></tr>';
	OutString += NavBar;
	OutString += '</table></center></body></html>';

	if (is.CRAPBrowser){OutString=ResolveAllURLs(OutString);}

//Write it to the frame
	BottomFrame.document.clear();
	BottomFrame.document.open();
	BottomFrame.document.write(OutString);
	BottomFrame.document.close();
}


function ShowAllQs(){
	var Output = '';
	for (var i=0; i<I.length-1; i++){
		Output = Output + BuildQuestion(i);
		Output = Output + '<tr><td colspan="4"><hr></hr></td></tr>';
	}
	Output = Output + BuildQuestion(I.length-1);
	Output = TableOpener + Output + TableCloser;
	DisplayExercise(Output);
}

function ShowQuestion(QNum){
//First, create the Q number readout at the top
	var Readout = (QNum+1) + '/' + I.length;
	while (Readout.length < 7){
		Readout = ' ' + Readout + ' ';
	}
	Readout = QButtonsOpener + Readout + QButtonsCloser;

	var Output = BuildQuestion(QNum);

	Output = TableOpener + Output + TableCloser;

	DisplayExercise(Readout + Output);

//Mark the answers already done
	for (i=0; i<Status[QNum][1].length; i++){
		if (Status[QNum][1][i] == 'R'){
			MarkAnswer(QNum,i,true)
		}
		if (Status[QNum][1][i] == 'W'){
			MarkAnswer(QNum,i,false)
		}
		if (Status[QNum][1][i] == 'C'){
			CheckCheckbox(QNum,i);
		}
	}
//Eliminate feedback from previous question
	if (EraseFeedback == true){
		WriteFeedback('');
	}
}

function CheckMulti(QNum){
	var TotWrong = 0;
	var Output = '';
	var TotAns = I[QNum][1].length;
	for (var i=TotAns-1; i>=0; i--){
//Find any incorrect choices

		var b = eval('BottomFrame.document.QForm.A_' + QNum + '_' + i);

		if (b != null){
//if it's wrong, count it
			if (b.checked == true){
				Status[QNum][1][i] = 'C';
			}
			else{
				Status[QNum][1][i] = 'U';
			}
			if (((b.checked == true) && (b.value == "0"))||((b.checked == false)&&(b.value == "1"))){
				TotWrong++;
			}
		}				
	}

	if (TotWrong == 0){
		Output = DefaultRight;
	}
	else{
		Output = DefaultWrong + '<br />' + (TotAns-TotWrong) + '/' + TotAns;
	}

//If you haven't tried the question before
	if (Status[QNum][0] == 0){
		if (TotWrong > 0){
			Status[QNum][2]++;
		}
		if (TotWrong == 0){
			Status[QNum][0] = 1;
//Calculate the score for this question as a floating-point fraction of 1
			Status[QNum][3] =  ((Status[QNum][1].length - Status[QNum][2]) - 1) / (Status[QNum][1].length - 1);
//If less than zero, set to zero
			if (Status[QNum][3] < 0){Status[QNum][3] = 0;}
		}
	}

//Check whether the quiz is finished
	var Finished = true;
	for (var i=0; i<Status.length; i++){
		if (Status[i][0] == 0){Finished = false;}
	}

//Calculate the score if needed
		
	if (Status[QNum][0] == 1){
		if ((Finished==true)||(ContinuousScoring==true)){
			var DoneQs = 0;
			var TotalScore = 0;
			for (var i=0; i<Status.length; i++){
				if (Status[i][0] == 1){
					DoneQs++;
					TotalScore += Status[i][3];
				}
			}
			Score = (Math.floor(100 * (TotalScore/DoneQs)));
			Output = Output + '<br />' + YourScoreIs + ' ' + Score + '%.';
		}

		if (Finished == true){
			EraseFeedback = false;
			var CFT = 0;
			for (i=0; i<I.length; i++){
				if (Status[i][2] == 0){
					CFT++;
				}
			}
		Output += '<br />' + CorrectFirstTime + CFT + '/' + I.length;

		}
	}

//Show the feedback
	if (Output.length > 0){
		WriteFeedback(Output);
	}

}

function CheckAnswer(QNum, ANum){
	var Output = I[QNum][1][ANum][1];

	if (Output==''){
		if (I[QNum][1][ANum][2] == 1){
			Output = DefaultRight;
		}
		else{
			Output = DefaultWrong;
		}
	}

//If it's not been previously answered correctly
	if (Status[QNum][0] == 0){
//If it's a correct answer
		if (I[QNum][1][ANum][2] == 1){
			Status[QNum][0] = 1;//Mark the Q as done
			Status[QNum][1][ANum] = 'R';
			MarkAnswer(QNum, ANum, true);
//Calculate the score for this question as a floating-point fraction of 1
			var PossibleWrongs = 0;
			for (var i=0; i<I[QNum][1].length; i++){
				if (I[QNum][1][i][2] == 0){
					PossibleWrongs++;
				}
			}

			if (PossibleWrongs == 0){PossibleWrongs = 1;}

			Status[QNum][3] = 1 - (Status[QNum][2]/PossibleWrongs);

//If less than zero, set to zero
			if (Status[QNum][3] < 0){Status[QNum][3] = 0;}
		}
		else{
			if (Status[QNum][1][ANum] != 'W'){
				Status[QNum][1][ANum] = 'W';
				MarkAnswer(QNum, ANum, false);
				Status[QNum][2]++; //increment wrong tries for this Q
			}
		}
	}

//Check whether the quiz is finished
	var Finished = true;
	for (var i=0; i<Status.length; i++){
		if (Status[i][0] == 0){Finished = false;}
	}

//Calculate the score if needed
		
	if (Status[QNum][0] == 1){
		if ((Finished==true)||(ContinuousScoring==true)){
			var DoneQs = 0;
			var TotalScore = 0;
			for (var i=0; i<Status.length; i++){
				if (Status[i][0] == 1){
					DoneQs++;
					TotalScore += Status[i][3];
				}
			}
			Score = (Math.floor(100 * (TotalScore/DoneQs)));
			Output = Output + '<br />' + YourScoreIs + ' ' + Score + '%.';
		}

		if (Finished == true){
			EraseFeedback = false;
			var CFT = 0;
			for (i=0; i<I.length; i++){
				if (Status[i][2] == 0){
					CFT++;
				}
			}
		Output += '<br />' + CorrectFirstTime + CFT + '/' + I.length;

		}
	}

//Show the feedback
	if (Output.length > 0){
		WriteFeedback(Output);
	}
}

function MarkAnswer(QNum, ANum, Right){
	var Mark = CorrectIndicator;
	if (Right == false){Mark = IncorrectIndicator;}

	if (eval('BottomFrame.document.QForm.FB_' + QNum + '_' + ANum) != null){
		eval('BottomFrame.document.QForm.FB_' + QNum + '_' + ANum).value = Mark;
	}
}

function CheckCheckbox(QNum, ANum){
	if (eval('BottomFrame.document.QForm.A_' + QNum + '_' + ANum) != null){
		eval('BottomFrame.document.QForm.A_' + QNum + '_' + ANum).checked = true;
	}
}







function Blank(){
	return '<html><body>&copy;Half-Baked Software. Loading...</body></html>';
}

//-->

//]]>

</script>


</head>
<!--<body>Fool those dumb ad-inserting ISPs</body>-->

<!--For full XHTML 1.0 compatibility, remove the border and framespacing attributes.
These are required for proper display in current browsers, but render the document incompatible. Then, you'll need to add the appropriate Document Type Declaration; use
the W3C XHTML 1 frameset DTD.-->


<frameset rows="25%,*" onload="StartUp()" framespacing="0" border="0">
	<frame src="javascript:parent.Blank()" frameborder="0" name="TopFrame"></frame>
	<frame src="javascript:parent.Blank()" frameborder="0" name="BottomFrame"></frame>
</frameset>




</html>
