<html>
<head><meta name="author" content="Created with Hot Potatoes by Half-Baked Software, registered to Alfonso De Mier."></meta><meta name="keywords" content="Hot Potatoes, Half-Baked Software, Windows, University of Victoria"></meta>
<title>
Autoevaluaci&#243;n
</title>

<script language="javascript" type="text/javascript">

//<![CDATA[

<!--

// BrowserCheck Object

function BrowserCheck() {
	var b = navigator.appName
//HBS extension
	this.mac = (navigator.appVersion.indexOf('Mac') != -1)
	if (b=="Netscape") this.b = "ns"
	else if (b=="Microsoft Internet Explorer") this.b = "ie"
	else this.b = b
	this.version = navigator.appVersion
	this.v = parseInt(this.version)
	this.ns = (this.b=="ns" && this.v>=4)
	this.ns4 = (this.b=="ns" && this.v==4)
	this.ns5 = (this.b=="ns" && this.v==5)
	this.ie = (this.b=="ie" && this.v>=4)
	this.ie4 = (this.version.indexOf('MSIE 4')>0)
	this.ie5 = (this.version.indexOf('MSIE 5')>0)
	this.min = (this.ns||this.ie)
	this.CRAPBrowser = (this.ie4 && this.mac); //Cannot Resolve Addresses Properly
}

is = new BrowserCheck();

var LocFolder = GetFolder(window.location.href);
function GetFolder(LocPath){
	LocPath = ReplaceStuff('\'','%27',LocPath);
	var i = LocPath.lastIndexOf('/');
	if (i<0){i=LocPath.lastIndexOf('\\')};
	return LocPath.substring(0,i);
}

function CombineURLs(InURL){
	var i = InURL.indexOf('../');
	var s = LocFolder;
	while (i >- 1){
		s = GetFolder(s);
		InURL = InURL.substring(3,InURL.length);
		i = InURL.indexOf('../');
	}
	return s + '/' + InURL;
}

x = new Array();
function ResolveURLs(InText,Attribute){
	x.length=0;
	var Temp = InText.toLowerCase();
	var z;
	var AttLen = Attribute.length + 2;
	var y=Temp.lastIndexOf(Attribute + '="');
	while (y>-1){
		var sLoc = y+AttLen;
		if (Temp.substring(sLoc,sLoc+5) != 'http:'){
			x[x.length]=new Array();
			x[x.length-1][0] = sLoc;
			z = Temp.indexOf('"',sLoc);
			x[x.length-1][1] = z;
			x[x.length-1][2] = InText.substring(sLoc,z);

		}
		Temp = Temp.substring(0,y);
		y=Temp.lastIndexOf(Attribute + '="');
	}
	for (var j=0; j<x.length; j++){
		InText = InText.substring(0,x[j][0]) + CombineURLs(x[j][2]) + InText.substring(x[j][1], InText.length);
	}
	return InText;
}



function ResolveAllURLs(Stuff){
	Stuff = ResolveURLs(Stuff,'href');
	Stuff = ResolveURLs(Stuff,'src');
	Stuff = ResolveURLs(Stuff,'parent.location');
	return Stuff;
}


var ExBGColor = '#ddf7e4';



var PageBGColor = '#ddf7e4';



var NavBarColor = '#408080';


var TextColor = '#000033';
var CurrQNum = 0;
var ALetters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
var CorrectIndicator = 'Correcto';
var IncorrectIndicator = 'Incorrecto';
var YourScoreIs = 'Tu puntuaci&#243;n es:';
var Tries = 0;
var CorrectChoices = 0;
var ContinuousScoring = true;
var CorrectFirstTime = 'Preguntas contestadas correctamente a la primera:';var ExerciseTitle = 'Autoevaluaci&#243;n';
var ExerciseSubtitle = 'Ejercicio de m&#250;ltiples respuestas';
var Instructions = 'Escoge la respuesta correcta para cada pregunta'; //'';
var ShuffleQs = true;
var ShuffleAs = true;
var DefaultRight = 'Correcto';
var DefaultWrong = 'Intenta otra vez';
var QsToShow = 25;
var ShowOneByOne = false;
var ReadingURL = '';
var EraseFeedback = true;
var Score = 0;

var PreviousPage = history.length;







var NavBar='';


NavBar+='<tr><form name="NavButtons1" action=""><td bgcolor="#408080" align="center">';
NavBar+='<font face="Geneva,Arial" size="-1">';


NavBar+='<input type="button" value="Cerrar y volver al &#237;ndice de contenidos" onclick=\'parent.location="../contenidos.htm"\'></input>';


NavBar+='</font></td></form></tr>';
if (is.CRAPBrowser){NavBar=ResolveAllURLs(NavBar)};


var TitleCode = '<tr><td align="center" valign="middle" bgcolor="#ddf7e4">';
TitleCode += '<font size="+1" face="Geneva,Arial" color="#000033">' + ExerciseTitle + '</font><br />';
TitleCode += '<font size="-1" face="Geneva,Arial" color="#000033">' + ExerciseSubtitle + '<br />';
TitleCode += '</font></td></tr>';

var QButtonsOpener = '<table border="0" width="85%" cellpadding="10">';
QButtonsOpener += '<tr><td align="center" valign="middle"><form>';
QButtonsOpener += '<font size="+1"><input type="button" value="&lt;=" onclick="parent.ChangeQ(-1)"></input>';
var QButtonsCloser = '<input type="button" value="=&gt;" onclick="parent.ChangeQ(1)"></input>';
QButtonsCloser += '</font></form></td></tr></table>';

var TableOpener = '<form name="QForm">';
TableOpener += '<table border="0" width="85%">';
var QRow = '<tr><td valign="top" bgcolor="#ddf7e4" align="right">';
QRow += '<font size="+1" face="Geneva,Arial" color="#000033">[QNumber]</font></td>';
QRow += '<td colspan="3" valign="top" bgcolor="#ddf7e4"><font size="-1" face="Geneva,Arial" color="#000033">[Question]<br />&nbsp;';
QRow += '</font></td></tr>';

var ARow = '<tr><td></td><td valign="top" bgcolor="#ddf7e4"><input type="text" value=" " size="3" name="FB_[QNum]_[ANum]"></input></td>';
ARow += '<td valign="top" bgcolor="#ddf7e4"><input type="button" value="[ALetter]" OnClick="parent.CheckAnswer([QNum],[ANum])"></input></td>';
ARow += '<td width="100%" bgcolor="#ddf7e4"><font size="-1" face="Geneva,Arial" color="#000033">[Ans]</font></td></tr>';

var MARow = '<tr><td></td><td valign="top" bgcolor="#ddf7e4" colspan="3"><input type="checkbox" name="A_[QNum]_[ANum]" value="[Correct]"></input>';
MARow += '<font size="-1" face="Geneva,Arial" color="#000033">[Ans]</font></td></tr>';

var CheckButton = '<tr><td></td><td valign="top" bgcolor="#ddf7e4" ><input type="button" value="Comprobar"';
CheckButton += ' onclick="parent.CheckMulti([QNum])"></input></td></tr>';

TableCloser = '</table></form>';

function GoBack(){
	var BackSkip = history.length - PreviousPage;
	if (BackSkip > 0){
		history.go((BackSkip+1)*-1);
	}
	else{
		parent.history.back();
	}
}

function ReduceItems(){
	var ItemToDump=0;
	var j=0;
	while (I.length > QsToShow){
		ItemToDump = Math.floor(I.length*Math.random());
		for (j=ItemToDump; j<(I.length-1); j++){
			I[j] = I[j+1];
		}
		I.length = I.length-1;
	}
}

function Shuffle(InArray){
	Temp = new Array();
	var Len = InArray.length;

	var j = Len;

	for (var i=0; i<Len; i++){
		Temp[i] = InArray[i];
	}

	for (i=0; i<Len; i++){
		Num = Math.floor(j  *  Math.random());
		InArray[i] = Temp[Num];

		for (var k=Num; k < j; k++) {
			Temp[k] = Temp[k+1];
		}
		j--;
	}
	return InArray;
}

function WriteFeedback(Feedback) {
//Build the output string
	var OutString = '';
	OutString += '<html>';
	OutString += '<body  background="" bgcolor="#ddf7e4" text="#000033" link="#408080" vlink="#408080">';
	OutString += '<center><table border="0" cellpadding="5" cellspacing="1" width="85%">';
	OutString += NavBar;
	if (Feedback.length>0){
		OutString += '<tr><td bgcolor="#ddf7e4" align="center">'; 
		OutString += '<font face="Geneva,Arial" size="-1" color="#000033">';
		OutString += Feedback;
		OutString += '</font></td></tr>'
	}
	OutString += '</table></center></body></html>';

	if (is.CRAPBrowser){OutString=ResolveAllURLs(OutString);}

//Write it to the frame
	TopFrame.document.clear();
	TopFrame.document.open();
	TopFrame.document.write(OutString);
	TopFrame.document.close();
}

function StartUp(){




//Reduce array if required
	if (QsToShow < I.length){
		ReduceItems();
	}

//Shuffle stuff if required

	if (ShuffleQs == true){
		I = Shuffle(I);
	}

	if (ShuffleAs == true){
		for (var i=0; i<I.length; i++){
			I[i][1] = Shuffle(I[i][1]);
		}
	}

//Create arrays
	CreateStatusArrays();



//Show the first question or all of them
	if (ShowOneByOne == false){
		ShowAllQs();
	}
	else{
		ShowQuestion(CurrQNum);
	}

//Write the top frame
	WriteFeedback(Instructions);
}


I = new Array();

I[0] = new Array();
I[0][0]='De los siguientes grupos de &#225;tomos, &#191;cu&#225;l contiene &#250;nicamente bioelementos secundarios?';
I[0][1] = new Array();
I[0][1][0] = new Array();
I[0][1][0][0]='Calcio, Sodio, Potasio, Hidr&#243;geno, Hierro.';
I[0][1][0][1]='Intenta otra vez';
I[0][1][0][2] = 0;
I[0][1][1] = new Array();
I[0][1][1][0]='Calcio, Sodio, Nitr&#243;geno, Cloro, Potasio.';
I[0][1][1][1]='Intenta otra vez';
I[0][1][1][2] = 0;
I[0][1][2] = new Array();
I[0][1][2][0]='Calcio, Sodio, Hierro, Cloro, Potasio.';
I[0][1][2][1]='Correcto';
I[0][1][2][2] = 1;
I[0][1][3] = new Array();
I[0][1][3][0]='Carbono, Potasio, Sodio, Hierro, Cloro.';
I[0][1][3][1]='Intenta otra vez';
I[0][1][3][2] = 0;
I[0][2] = 0;

I[1] = new Array();
I[1][0]='Los oligoelementos son &#225;tomos';
I[1][1] = new Array();
I[1][1][0] = new Array();
I[1][1][0][0]='Abundantes en la materia viva.';
I[1][1][0][1]='Intenta otra vez';
I[1][1][0][2] = 0;
I[1][1][1] = new Array();
I[1][1][1][0]='Que aparecen en todos los seres vivos.';
I[1][1][1][1]='Intenta otra vez';
I[1][1][1][2] = 0;
I[1][1][2] = new Array();
I[1][1][2][0]='Poco abundantes en la materia viva.';
I[1][1][2][1]='Correcto';
I[1][1][2][2] = 1;
I[1][1][3] = new Array();
I[1][1][3][0]='Que act&#250;an en forma ionizada.';
I[1][1][3][1]='Intenta otra vez';
I[1][1][3][2] = 0;
I[1][2] = 0;

I[2] = new Array();
I[2][0]='&#191;En qu&#233; &#225;tomo se basa la qu&#237;mica de la Vida?';
I[2][1] = new Array();
I[2][1][0] = new Array();
I[2][1][0][0]='Carbono.';
I[2][1][0][1]='Correcto';
I[2][1][0][2] = 1;
I[2][1][1] = new Array();
I[2][1][1][0]='Hidr&#243;geno.';
I[2][1][1][1]='Intenta otra vez';
I[2][1][1][2] = 0;
I[2][1][2] = new Array();
I[2][1][2][0]='Ox&#237;geno.';
I[2][1][2][1]='Intenta otra vez';
I[2][1][2][2] = 0;
I[2][1][3] = new Array();
I[2][1][3][0]='Agua.';
I[2][1][3][1]='Intenta otra vez';
I[2][1][3][2] = 0;
I[2][2] = 0;

I[3] = new Array();
I[3][0]='El agua es una mol&#233;cula:';
I[3][1] = new Array();
I[3][1][0] = new Array();
I[3][1][0][0]='Neutra y apolar.';
I[3][1][0][1]='Intenta otra vez';
I[3][1][0][2] = 0;
I[3][1][1] = new Array();
I[3][1][1][0]='Con carga.';
I[3][1][1][1]='Intenta otra vez';
I[3][1][1][2] = 0;
I[3][1][2] = new Array();
I[3][1][2][0]='Dipolar.';
I[3][1][2][1]='Correcto';
I[3][1][2][2] = 1;
I[3][1][3] = new Array();
I[3][1][3][0]='Con alto grado de ionizaci&#243;n.';
I[3][1][3][1]='Intenta otra vez';
I[3][1][3][2] = 0;
I[3][2] = 0;

I[4] = new Array();
I[4][0]='El agua tiene un elevado calor espec&#237;fico:';
I[4][1] = new Array();
I[4][1][0] = new Array();
I[4][1][0][0]='Porque se necesita mucha energ&#237;a para romper los puente de Hidr&#243;geno entre las mol&#233;culas.';
I[4][1][0][1]='Correcto';
I[4][1][0][2] = 1;
I[4][1][1] = new Array();
I[4][1][1][0]='Con lo que la energ&#237;a se acumula localmente.';
I[4][1][1][1]='Intenta otra vez';
I[4][1][1][2] = 0;
I[4][1][2] = new Array();
I[4][1][2][0]='Por lo que tiene una alta constante diel&#233;ctrica.';
I[4][1][2][1]='Intenta otra vez';
I[4][1][2][2] = 0;
I[4][1][3] = new Array();
I[4][1][3][0]='Por lo que no es un buen amortiguador t&#233;rmico.';
I[4][1][3][1]='Intenta otra vez';
I[4][1][3][2] = 0;
I[4][2] = 0;

I[5] = new Array();
I[5][0]='El agua puede transportar sustancias:';
I[5][1] = new Array();
I[5][1][0] = new Array();
I[5][1][0][0]='Ya que tiene una baja constante diel&#233;ctrica.';
I[5][1][0][1]='Intenta otra vez';
I[5][1][0][2] = 0;
I[5][1][1] = new Array();
I[5][1][1][0]='Porque las mol&#233;culas se unen poco y puede transportar entre ellas distintas sustancias.';
I[5][1][1][1]='Intenta otra vez';
I[5][1][1][2] = 0;
I[5][1][2] = new Array();
I[5][1][2][0]='Por manifestar capilaridad.';
I[5][1][2][1]='Correcto';
I[5][1][2][2] = 1;
I[5][1][3] = new Array();
I[5][1][3][0]='Por su elevado grado de ionizaci&#243;n.';
I[5][1][3][1]='Intenta otra vez';
I[5][1][3][2] = 0;
I[5][2] = 0;

I[6] = new Array();
I[6][0]='El i&#243;n cabonato:';
I[6][1] = new Array();
I[6][1][0] = new Array();
I[6][1][0][0]='Ayuda a controlar el pH del medio.';
I[6][1][0][1]='Correcto';
I[6][1][0][2] = 1;
I[6][1][1] = new Array();
I[6][1][1][0]='Se expulsa por los pulmones.';
I[6][1][1][1]='Intenta otra vez';
I[6][1][1][2] = 0;
I[6][1][2] = new Array();
I[6][1][2][0]='Forma estructuras duras.';
I[6][1][2][1]='Intenta otra vez';
I[6][1][2][2] = 0;
I[6][1][3] = new Array();
I[6][1][3][0]='Controla la cantidad de agua.';
I[6][1][3][1]='Intenta otra vez';
I[6][1][3][2] = 0;
I[6][2] = 0;

I[7] = new Array();
I[7][0]='&#191;Qu&#233; mol&#233;cula es la de la imagen?<img src="../imagenes/actividades/aribosa2.jpg" alt="aribosa2.jpg" width="120" height="150" align="right" border="0"></img>';
I[7][1] = new Array();
I[7][1][0] = new Array();
I[7][1][0][0]='Pentosa.';
I[7][1][0][1]='Correcto';
I[7][1][0][2] = 1;
I[7][1][1] = new Array();
I[7][1][1][0]='Hexosa.';
I[7][1][1][1]='Intenta otra vez';
I[7][1][1][2] = 0;
I[7][1][2] = new Array();
I[7][1][2][0]='Furanosa.';
I[7][1][2][1]='Intenta otra vez';
I[7][1][2][2] = 0;
I[7][1][3] = new Array();
I[7][1][3][0]='Piranosa.';
I[7][1][3][1]='Intenta otra vez';
I[7][1][3][2] = 0;
I[7][2] = 0;

I[8] = new Array();
I[8][0]='&#191;Qu&#233; mol&#233;cula es la de la imagen?<img src="../imagenes/actividades/aglucosa2.jpg" alt="aglucosa2.jpg" width="150" height="150" align="right" border="0"></img>';
I[8][1] = new Array();
I[8][1][0] = new Array();
I[8][1][0][0]='Pentosa.';
I[8][1][0][1]='Intenta otra vez';
I[8][1][0][2] = 0;
I[8][1][1] = new Array();
I[8][1][1][0]='Galactosa.';
I[8][1][1][1]='Intenta otra vez';
I[8][1][1][2] = 0;
I[8][1][2] = new Array();
I[8][1][2][0]='Furanosa.';
I[8][1][2][1]='Intenta otra vez';
I[8][1][2][2] = 0;
I[8][1][3] = new Array();
I[8][1][3][0]='Piranosa.';
I[8][1][3][1]='Correcto';
I[8][1][3][2] = 1;
I[8][2] = 0;

I[9] = new Array();
I[9][0]='El enlace que aparece en la imagen se denomina<img src="../imagenes/actividades/amaltosa2.jpg" alt="amaltosa2.jpg" width="225" height="120" align="right" border="0"></img>';
I[9][1] = new Array();
I[9][1][0] = new Array();
I[9][1][0][0]='&#201;ster.';
I[9][1][0][1]='Intenta otra vez';
I[9][1][0][2] = 0;
I[9][1][1] = new Array();
I[9][1][1][0]='Pept&#237;dico.';
I[9][1][1][1]='Intenta otra vez';
I[9][1][1][2] = 0;
I[9][1][2] = new Array();
I[9][1][2][0]='O - glucos&#237;dico.';
I[9][1][2][1]='Correcto';
I[9][1][2][2] = 1;
I[9][1][3] = new Array();
I[9][1][3][0]='N - glucos&#237;dico.';
I[9][1][3][1]='Intenta otra vez';
I[9][1][3][2] = 0;
I[9][2] = 0;

I[10] = new Array();
I[10][0]='El siguiente enlace es de tipo<img src="../imagenes/actividades/acelobiosa2.jpg" alt="acelobiosa2.jpg" width="225" height="120" align="right" border="0"></img>';
I[10][1] = new Array();
I[10][1][0] = new Array();
I[10][1][0][0]='Alfa (1-4).';
I[10][1][0][1]='Intenta otra vez';
I[10][1][0][2] = 0;
I[10][1][1] = new Array();
I[10][1][1][0]='Beta (1-4).';
I[10][1][1][1]='Correcto';
I[10][1][1][2] = 1;
I[10][1][2] = new Array();
I[10][1][2][0]='Alfa (1-6).';
I[10][1][2][1]='Intenta otra vez';
I[10][1][2][2] = 0;
I[10][1][3] = new Array();
I[10][1][3][0]='Beta (1-6).';
I[10][1][3][1]='Intenta otra vez';
I[10][1][3][2] = 0;
I[10][2] = 0;

I[11] = new Array();
I[11][0]='La quitina es:';
I[11][1] = new Array();
I[11][1][0] = new Array();
I[11][1][0][0]='Una prote&#237;na que se encuentra en las u&#241;as.';
I[11][1][0][1]='Intenta otra vez';
I[11][1][0][2] = 0;
I[11][1][1] = new Array();
I[11][1][1][0]='Un componente del almid&#243;n.';
I[11][1][1][1]='Intenta otra vez';
I[11][1][1][2] = 0;
I[11][1][2] = new Array();
I[11][1][2][0]='Un polisac&#225;rido del exoesqueleto de artr&#243;podos.';
I[11][1][2][1]='Correcto';
I[11][1][2][2] = 1;
I[11][1][3] = new Array();
I[11][1][3][0]='Un componente del gluc&#243;geno.';
I[11][1][3][1]='Intenta otra vez';
I[11][1][3][2] = 0;
I[11][2] = 0;

I[12] = new Array();
I[12][0]='Los &#225;cidos grasos:';
I[12][1] = new Array();
I[12][1][0] = new Array();
I[12][1][0][0]='Forman la mol&#233;cula del colesterol.';
I[12][1][0][1]='Intenta otra vez';
I[12][1][0][2] = 0;
I[12][1][1] = new Array();
I[12][1][1][0]='Por enlace &#233;ster se unen al &#225;cido fosf&#243;rico en los fosfoglic&#233;ridos.';
I[12][1][1][1]='Intenta otra vez';
I[12][1][1][2] = 0;
I[12][1][2] = new Array();
I[12][1][2][0]='Con un monoalcohol de cadena larga forman los acil-glic&#233;ridos.';
I[12][1][2][1]='Intenta otra vez';
I[12][1][2][2] = 0;
I[12][1][3] = new Array();
I[12][1][3][0]='Por esterificaci&#243;n a una glicerina forman los aceites.';
I[12][1][3][1]='Correcto';
I[12][1][3][2] = 1;
I[12][2] = 0;

I[13] = new Array();
I[13][0]='A mayor n&#250;mero de &#225;tomos de carbono, en un &#225;cido graso:';
I[13][1] = new Array();
I[13][1][0] = new Array();
I[13][1][0][0]='Corresponde una mayor temperatura de solidificaci&#243;n.';
I[13][1][0][1]='Correcto';
I[13][1][0][2] = 1;
I[13][1][1] = new Array();
I[13][1][1][0]='Se forma menor número de interacciones d&#233;biles.';
I[13][1][1][1]='Intenta otra vez';
I[13][1][1][2] = 0;
I[13][1][2] = new Array();
I[13][1][2][0]='Se produce un mayor n&#250;mero de insaturaciones.';
I[13][1][2][1]='Intenta otra vez';
I[13][1][2][2] = 0;
I[13][1][3] = new Array();
I[13][1][3][0]='Corresponde menor temperatura de solidificaci&#243;n.';
I[13][1][3][1]='Intenta otra vez';
I[13][1][3][2] = 0;
I[13][2] = 0;

I[14] = new Array();
I[14][0]='Los elementos que forman los esfingofosfol&#237;pidos son:';
I[14][1] = new Array();
I[14][1][0] = new Array();
I[14][1][0][0]='Dos &#225;cidos grasos, una esfingosina y un gl&#250;cido.';
I[14][1][0][1]='Intenta otra vez';
I[14][1][0][2] = 0;
I[14][1][1] = new Array();
I[14][1][1][0]='Un &#225;cido graso, una esfingosina y un gl&#250;cido.';
I[14][1][1][1]='Intenta otra vez';
I[14][1][1][2] = 0;
I[14][1][2] = new Array();
I[14][1][2][0]='Dos &#225;cidos grasos, una esfingosina y un &#225;cido fosf&#243;rico.';
I[14][1][2][1]='Intenta otra vez';
I[14][1][2][2] = 0;
I[14][1][3] = new Array();
I[14][1][3][0]='Un &#225;cido graso, una esfingosina y un &#225;cido fosf&#243;rico.';
I[14][1][3][1]='Correcto';
I[14][1][3][2] = 1;
I[14][2] = 0;

I[15] = new Array();
I[15][0]='La siguiente mol&#233;cula es<img src="../imagenes/actividades/aalanina.jpg" alt="aalanina.jpg" width="150" height="150" align="right" border="0"></img>';
I[15][1] = new Array();
I[15][1][0] = new Array();
I[15][1][0][0]='Colesterol.';
I[15][1][0][1]='Intenta otra vez';
I[15][1][0][2] = 0;
I[15][1][1] = new Array();
I[15][1][1][0]='Cera.';
I[15][1][1][1]='Intenta otra vez';
I[15][1][1][2] = 0;
I[15][1][2] = new Array();
I[15][1][2][0]='Amino&#225;cido.';
I[15][1][2][1]='Correcto';
I[15][1][2][2] = 1;
I[15][1][3] = new Array();
I[15][1][3][0]='Gl&#250;cido.';
I[15][1][3][1]='Intenta otra vez';
I[15][1][3][2] = 0;
I[15][2] = 0;

I[16] = new Array();
I[16][0]='El siguiente enlace es<img src="../imagenes/actividades/apeptidico.jpg" alt="apeptidico.jpg" width="225" height="120" align="right" border="0"></img>';
I[16][1] = new Array();
I[16][1][0] = new Array();
I[16][1][0][0]='Pept&#237;dico.';
I[16][1][0][1]='Correcto';
I[16][1][0][2] = 1;
I[16][1][1] = new Array();
I[16][1][1][0]='O - glucos&#237;dico.';
I[16][1][1][1]='Intenta otra vez';
I[16][1][1][2] = 0;
I[16][1][2] = new Array();
I[16][1][2][0]='&#201;ster.';
I[16][1][2][1]='Intenta otra vez';
I[16][1][2][2] = 0;
I[16][1][3] = new Array();
I[16][1][3][0]='N - glucos&#237;dico.';
I[16][1][3][1]='Intenta otra vez';
I[16][1][3][2] = 0;
I[16][2] = 0;

I[17] = new Array();
I[17][0]='Alfa h&#233;lice es:';
I[17][1] = new Array();
I[17][1][0] = new Array();
I[17][1][0][0]='La estructura secundaria de una prote&#237;na.';
I[17][1][0][1]='Correcto';
I[17][1][0][2] = 1;
I[17][1][1] = new Array();
I[17][1][1][0]='La estructura secundaria del ADN.';
I[17][1][1][1]='Intenta otra vez';
I[17][1][1][2] = 0;
I[17][1][2] = new Array();
I[17][1][2][0]='Un tipo de enlace glucos&#237;dico.';
I[17][1][2][1]='Intenta otra vez';
I[17][1][2][2] = 0;
I[17][1][3] = new Array();
I[17][1][3][0]='El estado nativo del ADN.';
I[17][1][3][1]='Intenta otra vez';
I[17][1][3][2] = 0;
I[17][2] = 0;

I[18] = new Array();
I[18][0]='Una escleroprote&#237;na es una prote&#237;na:';
I[18][1] = new Array();
I[18][1][0] = new Array();
I[18][1][0][0]='Fibrosa.';
I[18][1][0][1]='Correcto';
I[18][1][0][2] = 1;
I[18][1][1] = new Array();
I[18][1][1][0]='Globular.';
I[18][1][1][1]='Intenta otra vez';
I[18][1][1][2] = 0;
I[18][1][2] = new Array();
I[18][1][2][0]='Con color.';
I[18][1][2][1]='Intenta otra vez';
I[18][1][2][2] = 0;
I[18][1][3] = new Array();
I[18][1][3][0]='Heteroprote&#237;na.';
I[18][1][3][1]='Intenta otra vez';
I[18][1][3][2] = 0;
I[18][2] = 0;

I[19] = new Array();
I[19][0]='La siguiente mol&#233;cula es<center><img src="../imagenes/actividades/anucleotido.jpg" alt="anucleotido.jpg" width="345" height="255" border="0"></img></center>';
I[19][1] = new Array();
I[19][1][0] = new Array();
I[19][1][0][0]='Un nucle&#243;tido.';
I[19][1][0][1]='Correcto';
I[19][1][0][2] = 1;
I[19][1][1] = new Array();
I[19][1][1][0]='Un fosfol&#237;pido.';
I[19][1][1][1]='Intenta otra vez';
I[19][1][1][2] = 0;
I[19][1][2] = new Array();
I[19][1][2][0]='Un nucle&#243;sido.';
I[19][1][2][1]='Intenta otra vez';
I[19][1][2][2] = 0;
I[19][1][3] = new Array();
I[19][1][3][0]='Un trip&#233;ptido.';
I[19][1][3][1]='Intenta otra vez';
I[19][1][3][2] = 0;
I[19][2] = 0;

I[20] = new Array();
I[20][0]='En el ADN no aparece:';
I[20][1] = new Array();
I[20][1][0] = new Array();
I[20][1][0][0]='Ribosa.';
I[20][1][0][1]='Correcto';
I[20][1][0][2] = 1;
I[20][1][1] = new Array();
I[20][1][1][0]='Adenina.';
I[20][1][1][1]='Intenta otra vez';
I[20][1][1][2] = 0;
I[20][1][2] = new Array();
I[20][1][2][0]='Timina.';
I[20][1][2][1]='Intenta otra vez';
I[20][1][2][2] = 0;
I[20][1][3] = new Array();
I[20][1][3][0]='Guanina.';
I[20][1][3][1]='Intenta otra vez';
I[20][1][3][2] = 0;
I[20][2] = 0;

I[21] = new Array();
I[21][0]='La pareja de bases nitrogenadas complementarias que establece en el ADN dos puentes de Hidr&#243;geno entre s&#237; es:';
I[21][1] = new Array();
I[21][1][0] = new Array();
I[21][1][0][0]='Adenina y Guanina.';
I[21][1][0][1]='Intenta otra vez';
I[21][1][0][2] = 0;
I[21][1][1] = new Array();
I[21][1][1][0]='Citosina y Guanina.';
I[21][1][1][1]='Intenta otra vez';
I[21][1][1][2] = 0;
I[21][1][2] = new Array();
I[21][1][2][0]='Adenina y Uracilo.';
I[21][1][2][1]='Intenta otra vez';
I[21][1][2][2] = 0;
I[21][1][3] = new Array();
I[21][1][3][0]='Timina y Adenina.';
I[21][1][3][1]='Correcto';
I[21][1][3][2] = 1;
I[21][2] = 0;

I[22] = new Array();
I[22][0]='El nucleosoma es:';
I[22][1] = new Array();
I[22][1][0] = new Array();
I[22][1][0][0]='La uni&#243;n de una pentosa, una base nitrogenada y un &#225;cido fosf&#243;rico.';
I[22][1][0][1]='Intenta otra vez';
I[22][1][0][2] = 0;
I[22][1][1] = new Array();
I[22][1][1][0]='La uni&#243;n de ADN con histonas.';
I[22][1][1][1]='Correcto';
I[22][1][1][2] = 1;
I[22][1][2] = new Array();
I[22][1][2][0]='La uni&#243;n de ADN y protaminas.';
I[22][1][2][1]='Intenta otra vez';
I[22][1][2][2] = 0;
I[22][1][3] = new Array();
I[22][1][3][0]='La estructura secundaria del ADN.';
I[22][1][3][1]='Intenta otra vez';
I[22][1][3][2] = 0;
I[22][2] = 0;

I[23] = new Array();
I[23][0]='El codon es un triplete de nucle&#243;tidos que aparece en el ARN:';
I[23][1] = new Array();
I[23][1][0] = new Array();
I[23][1][0][0]='Transferente.';
I[23][1][0][1]='Intenta otra vez';
I[23][1][0][2] = 0;
I[23][1][1] = new Array();
I[23][1][1][0]='Ribos&#243;mico.';
I[23][1][1][1]='Intenta otra vez';
I[23][1][1][2] = 0;
I[23][1][2] = new Array();
I[23][1][2][0]='Mensajero.';
I[23][1][2][1]='Correcto';
I[23][1][2][2] = 1;
I[23][1][3] = new Array();
I[23][1][3][0]='Heteronuclear.';
I[23][1][3][1]='Intenta otra vez';
I[23][1][3][2] = 0;
I[23][2] = 0;

I[24] = new Array();
I[24][0]='&#191;Qu&#233; ARN contiene bases modificadas, que no pueden emparejarse?';
I[24][1] = new Array();
I[24][1][0] = new Array();
I[24][1][0][0]='Transferente.';
I[24][1][0][1]='Correcto';
I[24][1][0][2] = 1;
I[24][1][1] = new Array();
I[24][1][1][0]='Ribos&#243;mico.';
I[24][1][1][1]='Intenta otra vez';
I[24][1][1][2] = 0;
I[24][1][2] = new Array();
I[24][1][2][0]='Heteronuclear.';
I[24][1][2][1]='Intenta otra vez';
I[24][1][2][2] = 0;
I[24][1][3] = new Array();
I[24][1][3][0]='Mensajero.';
I[24][1][3][1]='Intenta otra vez';
I[24][1][3][2] = 0;
I[24][2] = 0;


Status = new Array();


function CreateStatusArrays(){
	for (var x=0; x<I.length; x++){
		Status[x] = new Array();
		Status[x][0] = 0; // Question not done yet
		Status[x][1] = new Array(); //for tracking whether answers chosen
		for (var y=0; y<I[x][1].length; y++){
			Status[x][1][y] = '0'; //Answers not chosen yet
		}
		Status[x][2] = 0; //Wrong tries at this question so far
		Status[x][3] = 0; //For storing score out of one on this question
	}
}

function UpdateQuestionStatus(QNum){
	if (Status[QNum][2] >= Status[QNum][1].length-1){
		Status[QNum][0] = 1;
		for (var i=0; i<Status[QNum][1].length; i++){
			if (Status[QNum][1][i] == '0'){
				Status[QNum][1][i] = 'R';
			}
		}
	}
}

function ReplaceStuff(Token, Replacement, InString){
	var i = InString.indexOf(Token);
	var FirstBit = '';
	var LastBit = '';
	while (i>-1){
		FirstBit = InString.substring(0, i);
		LastBit = InString.substring(i + Token.length, InString.length);	
		InString = FirstBit + Replacement + LastBit;
		i = InString.indexOf(Token);
	}
	return InString;
}

function ChangeQ(ChangeBy){
	var NewNum = CurrQNum + ChangeBy;
	if ((NewNum >= 0)&&(NewNum<I.length)){
		CurrQNum = NewNum;
		ShowQuestion(CurrQNum);
	}
	var CurrScore = '';
	if ((ContinuousScoring == true)&&(EraseFeedback == true)){
		CalculateScore();
		var CurrScore = YourScoreIs + ' ' + Score + '%.';
		WriteFeedback(CurrScore);
	}
}

function BuildQuestion(QNum){
	if (I[QNum][2] == 0){
		var Temp = ReplaceStuff('[Question]', I[QNum][0], QRow);

		var AnsRows = '';
		for (var i=0; i<I[QNum][1].length; i++){
			TempAns = ARow;
			TempAns = ReplaceStuff('[ANum]', i, TempAns);
			TempAns = ReplaceStuff('[ALetter]', ' ' + ALetters.charAt(i) + ' ', TempAns);
			TempAns = ReplaceStuff('[Ans]', I[QNum][1][i][0], TempAns);
			AnsRows += TempAns;
		}
		Temp += AnsRows;
		Temp = ReplaceStuff('[QNumber]', QNum+1, Temp);
		Temp = ReplaceStuff('[QNum]', QNum, Temp);
	}
	else{
		var Temp = ReplaceStuff('[Question]', I[QNum][0], QRow);
		var AnsRows = '';
		for (var i=0; i<I[QNum][1].length; i++){
			TempAns = MARow;
			TempAns = ReplaceStuff('[ANum]', i, TempAns);
			TempAns = ReplaceStuff('[Correct]', I[QNum][1][i][2], TempAns);
			TempAns = ReplaceStuff('[Ans]', I[QNum][1][i][0], TempAns);
			AnsRows += TempAns;
		}
		Temp += AnsRows;
		Temp += CheckButton;
		Temp = ReplaceStuff('[QNumber]', QNum+1, Temp);
		Temp = ReplaceStuff('[QNum]', QNum, Temp);
	}
	return Temp;
}

function DisplayExercise(StuffToDisplay){
//Build the output string
	var OutString = '';
	OutString += '<html>';
	OutString += '<body  background="" bgcolor="#ddf7e4" text="#000033" link="#408080" vlink="#408080">';
	OutString += '<center><table border="0" cellpadding="5" cellspacing="1" width="85%">';
	OutString += TitleCode; 
	OutString += '<tr><td bgcolor="#ddf7e4" align="center">'; 
	OutString += '<font face="Geneva,Arial" size="-1">';
	OutString += StuffToDisplay;
	OutString += '</font></td></tr>';
	OutString += NavBar;
	OutString += '</table></center></body></html>';

	if (is.CRAPBrowser){OutString=ResolveAllURLs(OutString);}

//Write it to the frame
	BottomFrame.document.clear();
	BottomFrame.document.open();
	BottomFrame.document.write(OutString);
	BottomFrame.document.close();
}


function ShowAllQs(){
	var Output = '';
	for (var i=0; i<I.length-1; i++){
		Output = Output + BuildQuestion(i);
		Output = Output + '<tr><td colspan="4"><hr></hr></td></tr>';
	}
	Output = Output + BuildQuestion(I.length-1);
	Output = TableOpener + Output + TableCloser;
	DisplayExercise(Output);
}

function ShowQuestion(QNum){
//First, create the Q number readout at the top
	var Readout = (QNum+1) + '/' + I.length;
	while (Readout.length < 7){
		Readout = ' ' + Readout + ' ';
	}
	Readout = QButtonsOpener + Readout + QButtonsCloser;

	var Output = BuildQuestion(QNum);

	Output = TableOpener + Output + TableCloser;

	DisplayExercise(Readout + Output);

//Mark the answers already done
	for (i=0; i<Status[QNum][1].length; i++){
		if (Status[QNum][1][i] == 'R'){
			MarkAnswer(QNum,i,true)
		}
		if (Status[QNum][1][i] == 'W'){
			MarkAnswer(QNum,i,false)
		}
		if (Status[QNum][1][i] == 'C'){
			CheckCheckbox(QNum,i);
		}
	}
//Eliminate feedback from previous question
	if (EraseFeedback == true){
		WriteFeedback('');
	}
}

function CheckMulti(QNum){
	var TotWrong = 0;
	var Output = '';
	var TotAns = I[QNum][1].length;
	for (var i=TotAns-1; i>=0; i--){
//Find any incorrect choices

		var b = eval('BottomFrame.document.QForm.A_' + QNum + '_' + i);

		if (b != null){
//if it's wrong, count it
			if (b.checked == true){
				Status[QNum][1][i] = 'C';
			}
			else{
				Status[QNum][1][i] = 'U';
			}
			if (((b.checked == true) && (b.value == "0"))||((b.checked == false)&&(b.value == "1"))){
				TotWrong++;
			}
		}				
	}

	if (TotWrong == 0){
		Output = DefaultRight;
	}
	else{
		Output = DefaultWrong + '<br />' + (TotAns-TotWrong) + '/' + TotAns;
	}

//If you haven't tried the question before
	if (Status[QNum][0] == 0){
		if (TotWrong > 0){
			Status[QNum][2]++;
		}
		if (TotWrong == 0){
			Status[QNum][0] = 1;
//Calculate the score for this question as a floating-point fraction of 1
			Status[QNum][3] =  ((Status[QNum][1].length - Status[QNum][2]) - 1) / (Status[QNum][1].length - 1);
//If less than zero, set to zero
			if (Status[QNum][3] < 0){Status[QNum][3] = 0;}
		}
	}

//Check whether the quiz is finished
	var Finished = true;
	for (var i=0; i<Status.length; i++){
		if (Status[i][0] == 0){Finished = false;}
	}

//Calculate the score if needed
		
	if (Status[QNum][0] == 1){
		if ((Finished==true)||(ContinuousScoring==true)){
			CalculateScore();
			Output = Output + '<br />' + YourScoreIs + ' ' + Score + '%.';
		}

		if (Finished == true){
			EraseFeedback = false;
			var CFT = 0;
			for (i=0; i<I.length; i++){
				if (Status[i][2] == 0){
					CFT++;
				}
			}
		Output += '<br />' + CorrectFirstTime + CFT + '/' + I.length;

		}
	}

//Show the feedback
	if (Output.length > 0){
		WriteFeedback(Output);
	}

}

function CheckAnswer(QNum, ANum){
	var Output = I[QNum][1][ANum][1];

	if (Output==''){
		if (I[QNum][1][ANum][2] == 1){
			Output = DefaultRight;
		}
		else{
			Output = DefaultWrong;
		}
	}

//If it's not been previously answered correctly
	if (Status[QNum][0] == 0){
//If it's a correct answer
		if (I[QNum][1][ANum][2] == 1){
			Status[QNum][0] = 1;//Mark the Q as done
			Status[QNum][1][ANum] = 'R';
			MarkAnswer(QNum, ANum, true);
//Calculate the score for this question as a floating-point fraction of 1
			var PossibleWrongs = 0;
			for (var i=0; i<I[QNum][1].length; i++){
				if (I[QNum][1][i][2] == 0){
					PossibleWrongs++;
				}
			}

			if (PossibleWrongs == 0){PossibleWrongs = 1;}

			Status[QNum][3] = 1 - (Status[QNum][2]/PossibleWrongs);

//If less than zero, set to zero
			if (Status[QNum][3] < 0){Status[QNum][3] = 0;}
		}
		else{
			if (Status[QNum][1][ANum] != 'W'){
				Status[QNum][1][ANum] = 'W';
				MarkAnswer(QNum, ANum, false);
				Status[QNum][2]++; //increment wrong tries for this Q
			}
		}
	}

	UpdateQuestionStatus(QNum);

//Check whether the quiz is finished
	var Finished = true;
	for (var i=0; i<Status.length; i++){
		if (Status[i][0] == 0){Finished = false;}

	}

//Calculate the score if needed
		
	if (Status[QNum][0] == 1){
		if ((Finished==true)||(ContinuousScoring==true)){
			CalculateScore();
			Output = Output + '<br />' + YourScoreIs + ' ' + Score + '%.';
		}

		if (Finished == true){
			EraseFeedback = false;
			var CFT = 0;
			for (i=0; i<I.length; i++){
				if (Status[i][2] == 0){
					CFT++;
				}
			}
		Output += '<br />' + CorrectFirstTime + CFT + '/' + I.length;

		}
	}

//Show the feedback
	if (Output.length > 0){
		WriteFeedback(Output);
	}
}

function CalculateScore(){
	var TriedQs = 0;
	var TotalScore = 0;
	for (var i=0; i<Status.length; i++){
		if ((Status[i][2] > 0)||(Status[i][3] == 1)){
			TriedQs++;
			TotalScore += Status[i][3];
		}
	}
	if (TriedQs == 0){
		Score = 0;
	}
	else{
		Score = (Math.floor(100 * (TotalScore/TriedQs)));
	}
}

function MarkAnswer(QNum, ANum, Right){
	var Mark = CorrectIndicator;
	if (Right == false){Mark = IncorrectIndicator;}

	if (eval('BottomFrame.document.QForm.FB_' + QNum + '_' + ANum) != null){
		eval('BottomFrame.document.QForm.FB_' + QNum + '_' + ANum).value = Mark;
	}
}

function CheckCheckbox(QNum, ANum){
	if (eval('BottomFrame.document.QForm.A_' + QNum + '_' + ANum) != null){
		eval('BottomFrame.document.QForm.A_' + QNum + '_' + ANum).checked = true;
	}
}







function Blank(){
	return '<html><body>&copy;Half-Baked Software. Loading...</body></html>';
}

//-->

//]]>

</script>


<link rel="stylesheet" type="text/css" href="../../estilos/estilo.css">
</head>
<!--<body>Fool those dumb ad-inserting ISPs</body>-->

<!--For full XHTML 1.0 compatibility, remove the border and framespacing attributes.
These are required for proper display in current browsers, but render the document incompatible. Then, you'll need to add the appropriate Document Type Declaration; use
the W3C XHTML 1 frameset DTD.-->


<frameset rows="25%,*" onload="StartUp()" framespacing="0" border="0">
	<frame src="javascript:parent.Blank()" frameborder="0" name="TopFrame"></frame>
	<frame src="javascript:parent.Blank()" frameborder="0" name="BottomFrame"></frame>
</frameset>




</html>
