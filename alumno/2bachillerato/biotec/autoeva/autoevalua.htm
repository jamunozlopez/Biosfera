<html>
<head><meta name="author" content="Created with Hot Potatoes by Half-Baked Software, registered to Alfonso De Mier."></meta><meta name="keywords" content="Hot Potatoes, Half-Baked Software, Windows, University of Victoria"></meta>
<title>
Autoevaluaci&#243;n
</title>

<script language="javascript" type="text/javascript">

//<![CDATA[

<!--

// BrowserCheck Object

function BrowserCheck() {
	var b = navigator.appName
//HBS extension
	this.mac = (navigator.appVersion.indexOf('Mac') != -1)
	if (b=="Netscape") this.b = "ns"
	else if (b=="Microsoft Internet Explorer") this.b = "ie"
	else this.b = b
	this.version = navigator.appVersion
	this.v = parseInt(this.version)
	this.ns = (this.b=="ns" && this.v>=4)
	this.ns4 = (this.b=="ns" && this.v==4)
	this.ns5 = (this.b=="ns" && this.v==5)
	this.ie = (this.b=="ie" && this.v>=4)
	this.ie4 = (this.version.indexOf('MSIE 4')>0)
	this.ie5 = (this.version.indexOf('MSIE 5')>0)
	this.min = (this.ns||this.ie)
	this.CRAPBrowser = (this.ie4 && this.mac); //Cannot Resolve Addresses Properly
}

is = new BrowserCheck();

var LocFolder = GetFolder(window.location.href);
function GetFolder(LocPath){
	LocPath = ReplaceStuff('\'','%27',LocPath);
	var i = LocPath.lastIndexOf('/');
	if (i<0){i=LocPath.lastIndexOf('\\')};
	return LocPath.substring(0,i);
}

function CombineURLs(InURL){
	var i = InURL.indexOf('../');
	var s = LocFolder;
	while (i >- 1){
		s = GetFolder(s);
		InURL = InURL.substring(3,InURL.length);
		i = InURL.indexOf('../');
	}
	return s + '/' + InURL;
}

x = new Array();
function ResolveURLs(InText,Attribute){
	x.length=0;
	var Temp = InText.toLowerCase();
	var z;
	var AttLen = Attribute.length + 2;
	var y=Temp.lastIndexOf(Attribute + '="');
	while (y>-1){
		var sLoc = y+AttLen;
		if (Temp.substring(sLoc,sLoc+5) != 'http:'){
			x[x.length]=new Array();
			x[x.length-1][0] = sLoc;
			z = Temp.indexOf('"',sLoc);
			x[x.length-1][1] = z;
			x[x.length-1][2] = InText.substring(sLoc,z);

		}
		Temp = Temp.substring(0,y);
		y=Temp.lastIndexOf(Attribute + '="');
	}
	for (var j=0; j<x.length; j++){
		InText = InText.substring(0,x[j][0]) + CombineURLs(x[j][2]) + InText.substring(x[j][1], InText.length);
	}
	return InText;
}



function ResolveAllURLs(Stuff){
	Stuff = ResolveURLs(Stuff,'href');
	Stuff = ResolveURLs(Stuff,'src');
	Stuff = ResolveURLs(Stuff,'parent.location');
	return Stuff;
}


var ExBGColor = '#d1e9d1';



var PageBGColor = '#e6ffe6';



var NavBarColor = '#e6ffe6';


var TextColor = '#000033';
var CurrQNum = 0;
var ALetters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
var CorrectIndicator = 'Correcto';
var IncorrectIndicator = 'Incorrecto';
var YourScoreIs = 'Tu puntuaci&#243;n es';
var Tries = 0;
var CorrectChoices = 0;
var ContinuousScoring = true;
var CorrectFirstTime = 'Respuestas correctas a la primera:';var ExerciseTitle = 'Autoevaluaci&#243;n';
var ExerciseSubtitle = 'Una vez que hayas terminado la Autoevaluaci&#243;n, t&#250; mismo decidir&#225;s si debes seguir estudiando la unidad, seg&#250;n el resultado conseguido.';
var Instructions = 'Escoge la respuesta correcta'; //'';
var ShuffleQs = false;
var ShuffleAs = false;
var DefaultRight = '';
var DefaultWrong = '';
var QsToShow = 20;
var ShowOneByOne = false;
var ReadingURL = '';
var EraseFeedback = true;
var Score = 0;

var PreviousPage = history.length;







var NavBar='';


NavBar+='<tr><form name="NavButtons1" action=""><td bgcolor="#e6ffe6" align="center">';
NavBar+='<font face="Geneva,Arial" size="-1">';


NavBar+='<input type="button" value="Cerrar" onclick=\'parent.location="cierre.htm"\'></input>';


NavBar+='</font></td></form></tr>';
if (is.CRAPBrowser){NavBar=ResolveAllURLs(NavBar)};


var TitleCode = '<tr><td align="center" valign="middle" bgcolor="#e6ffe6">';
TitleCode += '<font size="+1" face="Geneva,Arial" color="#006666">' + ExerciseTitle + '</font><br />';
TitleCode += '<font size="-1" face="Geneva,Arial" color="#006666">' + ExerciseSubtitle + '<br />';
TitleCode += '</font></td></tr>';

var QButtonsOpener = '<table border="0" width="85%" cellpadding="10">';
QButtonsOpener += '<tr><td align="center" valign="middle"><form>';
QButtonsOpener += '<font size="+1"><input type="button" value="&lt;=" onclick="parent.ChangeQ(-1)"></input>';
var QButtonsCloser = '<input type="button" value="=&gt;" onclick="parent.ChangeQ(1)"></input>';
QButtonsCloser += '</font></form></td></tr></table>';

var TableOpener = '<form name="QForm">';
TableOpener += '<table border="0" width="85%">';
var QRow = '<tr><td valign="top" bgcolor="#d1e9d1" align="right">';
QRow += '<font size="+1" face="Geneva,Arial" color="#000033">[QNumber]</font></td>';
QRow += '<td colspan="3" valign="top" bgcolor="#d1e9d1"><font size="-1" face="Geneva,Arial" color="#000033">[Question]<br />&nbsp;';
QRow += '</font></td></tr>';

var ARow = '<tr><td></td><td valign="top" bgcolor="#d1e9d1"><input type="text" value=" " size="3" name="FB_[QNum]_[ANum]"></input></td>';
ARow += '<td valign="top" bgcolor="#d1e9d1"><input type="button" value="[ALetter]" OnClick="parent.CheckAnswer([QNum],[ANum])"></input></td>';
ARow += '<td width="100%" bgcolor="#d1e9d1"><font size="-1" face="Geneva,Arial" color="#000033">[Ans]</font></td></tr>';

var MARow = '<tr><td></td><td valign="top" bgcolor="#d1e9d1" colspan="3"><input type="checkbox" name="A_[QNum]_[ANum]" value="[Correct]"></input>';
MARow += '<font size="-1" face="Geneva,Arial" color="#000033">[Ans]</font></td></tr>';

var CheckButton = '<tr><td></td><td valign="top" bgcolor="#d1e9d1" ><input type="button" value="Comprobar"';
CheckButton += ' onclick="parent.CheckMulti([QNum])"></input></td></tr>';

TableCloser = '</table></form>';

function GoBack(){
	var BackSkip = history.length - PreviousPage;
	if (BackSkip > 0){
		history.go((BackSkip+1)*-1);
	}
	else{
		parent.history.back();
	}
}

function ReduceItems(){
	var ItemToDump=0;
	var j=0;
	while (I.length > QsToShow){
		ItemToDump = Math.floor(I.length*Math.random());
		for (j=ItemToDump; j<(I.length-1); j++){
			I[j] = I[j+1];
		}
		I.length = I.length-1;
	}
}

function Shuffle(InArray){
	Temp = new Array();
	var Len = InArray.length;

	var j = Len;

	for (var i=0; i<Len; i++){
		Temp[i] = InArray[i];
	}

	for (i=0; i<Len; i++){
		Num = Math.floor(j  *  Math.random());
		InArray[i] = Temp[Num];

		for (var k=Num; k < j; k++) {
			Temp[k] = Temp[k+1];
		}
		j--;
	}
	return InArray;
}

function WriteFeedback(Feedback) {
//Build the output string
	var OutString = '';
	OutString += '<html>';
	OutString += '<body  background="HalfBakedBG.gif" bgcolor="#e6ffe6" text="#000033" link="#0000ff" vlink="#0000cc">';
	OutString += '<center><table border="0" cellpadding="5" cellspacing="1" width="85%">';
	OutString += NavBar;
	if (Feedback.length>0){
		OutString += '<tr><td bgcolor="#d1e9d1" align="center">'; 
		OutString += '<font face="Geneva,Arial" size="-1" color="#000033">';
		OutString += Feedback;
		OutString += '</font></td></tr>'
	}
	OutString += '</table></center></body></html>';

	if (is.CRAPBrowser){OutString=ResolveAllURLs(OutString);}

//Write it to the frame
	TopFrame.document.clear();
	TopFrame.document.open();
	TopFrame.document.write(OutString);
	TopFrame.document.close();
}

function StartUp(){




//Reduce array if required
	if (QsToShow < I.length){
		ReduceItems();
	}

//Shuffle stuff if required

	if (ShuffleQs == true){
		I = Shuffle(I);
	}

	if (ShuffleAs == true){
		for (var i=0; i<I.length; i++){
			I[i][1] = Shuffle(I[i][1]);
		}
	}

//Create arrays
	CreateStatusArrays();



//Show the first question or all of them
	if (ShowOneByOne == false){
		ShowAllQs();
	}
	else{
		ShowQuestion(CurrQNum);
	}

//Write the top frame
	WriteFeedback(Instructions);
}


I = new Array();

I[0] = new Array();
I[0][0]='La Biotecnolog&#237;a:';
I[0][1] = new Array();
I[0][1][0] = new Array();
I[0][1][0][0]='Tiene por objeto aplicar al estudio de los seres vivos la tecnolog&#237;a m&#225;s avanzada.';
I[0][1][0][1]='Incorrecto';
I[0][1][0][2] = 0;
I[0][1][1] = new Array();
I[0][1][1][0]='Es una disciplina que engloba conocimientos de otras ciencias.';
I[0][1][1][1]='Correcto';
I[0][1][1][2] = 1;
I[0][1][2] = new Array();
I[0][1][2][0]='Es un concepto muy antiguo, ya que se utiliza desde hace m&#225;s de 6.000 a&#241;os.';
I[0][1][2][1]='Incorrecto';
I[0][1][2][2] = 0;
I[0][1][3] = new Array();
I[0][1][3][0]='Se aplica desde la Revoluci&#243;n Industiral.';
I[0][1][3][1]='Incorrecto';
I[0][1][3][2] = 0;
I[0][2] = 0;

I[1] = new Array();
I[1][0]='La clonaci&#243;n:';
I[1][1] = new Array();
I[1][1][0] = new Array();
I[1][1][0][0]='Es un proceso artificial.';
I[1][1][0][1]='Incorrecto';
I[1][1][0][2] = 0;
I[1][1][1] = new Array();
I[1][1][1][0]='Est&#225; encaminada a la obtenci&#243;n de individuos distintos.';
I[1][1][1][1]='Incorrecto';
I[1][1][1][2] = 0;
I[1][1][2] = new Array();
I[1][1][2][0]='Es un proceso natural.';
I[1][1][2][1]='Correcto';
I[1][1][2][2] = 1;
I[1][1][3] = new Array();
I[1][1][3][0]='S&#243;lo se produce en laboratorio.';
I[1][1][3][1]='Incorrecto';
I[1][1][3][2] = 0;
I[1][2] = 0;

I[2] = new Array();
I[2][0]='Un individuo gen&#233;ticamente igual a otro y un grupo de individuos gen&#233;ticamente iguales:';
I[2][1] = new Array();
I[2][1][0] = new Array();
I[2][1][0][0]='Son un clon.';
I[2][1][0][1]='Correcto';
I[2][1][0][2] = 1;
I[2][1][1] = new Array();
I[2][1][1][0]='Son cosas distitntas.';
I[2][1][1][1]='Incorrecto';
I[2][1][1][2] = 0;
I[2][1][2] = new Array();
I[2][1][2][0]='Corresponden a conceptos diferentes.';
I[2][1][2][1]='Incorrecto';
I[2][1][2][2] = 0;
I[2][1][3] = new Array();
I[2][1][3][0]='No es posible.';
I[2][1][3][1]='Incorrecto';
I[2][1][3][2] = 0;
I[2][2] = 0;

I[3] = new Array();
I[3][0]='Un clon es:';
I[3][1] = new Array();
I[3][1][0] = new Array();
I[3][1][0][0]='Un individuo gen&#233;ticamente igual a otro.';
I[3][1][0][1]='Correcto';
I[3][1][0][2] = 1;
I[3][1][1] = new Array();
I[3][1][1][0]='Un individuo que pertenece a una poblaci&#243;n.';
I[3][1][1][1]='Incorrecto';
I[3][1][1][2] = 0;
I[3][1][2] = new Array();
I[3][1][2][0]='Una poblaci&#243;n de individuos de la misma especie.';
I[3][1][2][1]='Incorrecto';
I[3][1][2][2] = 0;
I[3][1][3] = new Array();
I[3][1][3][0]='Un grupo de individuos de la misma especie.';
I[3][1][3][1]='Incorrecto';
I[3][1][3][2] = 0;
I[3][2] = 0;

I[4] = new Array();
I[4][0]='La clonaci&#243;n de c&#233;lulas:';
I[4][1] = new Array();
I[4][1][0] = new Array();
I[4][1][0][0]='Es la clonaci&#243;n celular';
I[4][1][0][1]='Incorrecto';
I[4][1][0][2] = 0;
I[4][1][1] = new Array();
I[4][1][1][0]='Se utiliza en terapia g&#233;nica.';
I[4][1][1][1]='Correcto';
I[4][1][1][2] = 1;
I[4][1][2] = new Array();
I[4][1][2][0]='Es el proceso de clonaci&#243;n de ADN de un individuo en una c&#233;lula anfitriona.';
I[4][1][2][1]='Incorrecto';
I[4][1][2][2] = 0;
I[4][1][3] = new Array();
I[4][1][3][0]='Consiste en la clonaci&#243;n de un fragmento de ADN.';
I[4][1][3][1]='Incorrecto';
I[4][1][3][2] = 0;
I[4][2] = 0;

I[5] = new Array();
I[5][0]='La t&#233;cnica del ADN recombinante:';
I[5][1] = new Array();
I[5][1][0] = new Array();
I[5][1][0][0]='Es una clonaci&#243;n celular.';
I[5][1][0][1]='Correcto';
I[5][1][0][2] = 1;
I[5][1][1] = new Array();
I[5][1][1][0]='Es una PCR.';
I[5][1][1][1]='Incorrecto';
I[5][1][1][2] = 0;
I[5][1][2] = new Array();
I[5][1][2][0]='Es un tipo de terapia g&#233;nica.';
I[5][1][2][1]='Incorrecto';
I[5][1][2][2] = 0;
I[5][1][3] = new Array();
I[5][1][3][0]='Se trata de la clonaci&#243;n de c&#233;lulas.';
I[5][1][3][1]='Incorrecto';
I[5][1][3][2] = 0;
I[5][2] = 0;

I[6] = new Array();
I[6][0]='Un vector de clonaci&#243;n:';
I[6][1] = new Array();
I[6][1][0] = new Array();
I[6][1][0][0]='Es un portador del ADN que se desea clonar.';
I[6][1][0][1]='Correcto';
I[6][1][0][2] = 1;
I[6][1][1] = new Array();
I[6][1][1][0]='Es la c&#233;lula que transporta el ADN que se desea clonar.';
I[6][1][1][1]='Incorrecto';
I[6][1][1][2] = 0;
I[6][1][2] = new Array();
I[6][1][2][0]='Es un individuo que transmite un par&#225;sito.';
I[6][1][2][1]='Incorrecto';
I[6][1][2][2] = 0;
I[6][1][3] = new Array();
I[6][1][3][0]='Es el llamado ADN inserto.';
I[6][1][3][1]='Incorrecto';
I[6][1][3][2] = 0;
I[6][2] = 0;

I[7] = new Array();
I[7][0]='Los extremos cohesivos son:';
I[7][1] = new Array();
I[7][1][0] = new Array();
I[7][1][0][0]='Extremos pegajosos romos.';
I[7][1][0][1]='Incorrecto';
I[7][1][0][2] = 0;
I[7][1][1] = new Array();
I[7][1][1][0]='Generados por enzimas de restricci&#243;n.';
I[7][1][1][1]='Correcto';
I[7][1][1][2] = 1;
I[7][1][2] = new Array();
I[7][1][2][0]='Extremos pegajosos, producidos por ADN polimerasas.';
I[7][1][2][1]='Incorrecto';
I[7][1][2][2] = 0;
I[7][1][3] = new Array();
I[7][1][3][0]='Un tipo de ADN que contiene extremos romos.';
I[7][1][3][1]='Incorrecto';
I[7][1][3][2] = 0;
I[7][2] = 0;

I[8] = new Array();
I[8][0]='La clonaci&#243;n acelular contiene tres etapas en el siguiente orden:';
I[8][1] = new Array();
I[8][1][0] = new Array();
I[8][1][0][0]='Hibridaci&#243;n, desnaturalizaci&#243;n y polimerizaci&#243;n.';
I[8][1][0][1]='Incorrecto';
I[8][1][0][2] = 0;
I[8][1][1] = new Array();
I[8][1][1][0]='Polimerizaci&#243;n, hibridaci&#243;n y s&#237;ntesis.';
I[8][1][1][1]='Incorrecto';
I[8][1][1][2] = 0;
I[8][1][2] = new Array();
I[8][1][2][0]='Despolimerizaci&#243;n, hibridaci&#243;n y s&#237;ntesis.';
I[8][1][2][1]='Incorrecto';
I[8][1][2][2] = 0;
I[8][1][3] = new Array();
I[8][1][3][0]='Desnaturalizaci&#243;n, hibridaci&#243;n y polimerizaci&#243;n.';
I[8][1][3][1]='Correcto';
I[8][1][3][2] = 1;
I[8][2] = 0;

I[9] = new Array();
I[9][0]='Los organismos gen&#233;ticamente modificados se consiguen por:';
I[9][1] = new Array();
I[9][1][0] = new Array();
I[9][1][0][0]='Mutaci&#243;n.';
I[9][1][0][1]='Incorrecto';
I[9][1][0][2] = 0;
I[9][1][1] = new Array();
I[9][1][1][0]='Reproducci&#243;n sexual.';
I[9][1][1][1]='Incorrecto';
I[9][1][1][2] = 0;
I[9][1][2] = new Array();
I[9][1][2][0]='Clonaci&#243;n acelular.';
I[9][1][2][1]='Incorrecto';
I[9][1][2][2] = 0;
I[9][1][3] = new Array();
I[9][1][3][0]='T&#233;cnicas de ingenier&#237;a gen&#233;tica.';
I[9][1][3][1]='Correcto';
I[9][1][3][2] = 1;
I[9][2] = 0;

I[10] = new Array();
I[10][0]='Para aumentar el valor nutritivo de la patata se a&#241;ade:';
I[10][1] = new Array();
I[10][1][0] = new Array();
I[10][1][0][0]='Genes de platija del &#193;rtico, que es un pez.';
I[10][1][0][1]='Incorrecto';
I[10][1][0][2] = 0;
I[10][1][1] = new Array();
I[10][1][1][0]='Genes de toxinas bacterianas para defenderse de larvas par&#225;sitas.';
I[10][1][1][1]='Incorrecto';
I[10][1][1][2] = 0;
I[10][1][2] = new Array();
I[10][1][2][0]='Genes de amaranta, que forma prote&#237;nas ricas en amino&#225;cidos esenciales.';
I[10][1][2][1]='Correcto';
I[10][1][2][2] = 1;
I[10][1][3] = new Array();
I[10][1][3][0]='Genes bacterianos que degradan herbicidas y pueden sobrevivir en campos tratados con productos qu&#237;micos.';
I[10][1][3][1]='Incorrecto';
I[10][1][3][2] = 0;
I[10][2] = 0;

I[11] = new Array();
I[11][0]='El primer gen introducido en Escherichia coli para producir una prote&#237;na humana fue el gen que codifica para la s&#237;ntesis de:';
I[11][1] = new Array();
I[11][1][0] = new Array();
I[11][1][0][0]='Insulina.';
I[11][1][0][1]='Correcto';
I[11][1][0][2] = 1;
I[11][1][1] = new Array();
I[11][1][1][0]='Hormona del crecimiento.';
I[11][1][1][1]='Incorrecto';
I[11][1][1][2] = 0;
I[11][1][2] = new Array();
I[11][1][2][0]='Alfa- I - antitripsina.';
I[11][1][2][1]='Incorrecto';
I[11][1][2][2] = 0;
I[11][1][3] = new Array();
I[11][1][3][0]='Factor de coagulaci&#243;n sangu&#237;nea.';
I[11][1][3][1]='Incorrecto';
I[11][1][3][2] = 0;
I[11][2] = 0;

I[12] = new Array();
I[12][0]='Las vacas gen&#233;ticamente modificadas, pertenecientes a las granjas farmac&#233;uticas se utilizan para la producci&#243;n de:';
I[12][1] = new Array();
I[12][1][0] = new Array();
I[12][1][0][0]='Insulina.';
I[12][1][0][1]='Incorrecto';
I[12][1][0][2] = 0;
I[12][1][1] = new Array();
I[12][1][1][0]='Hormona del crecimiento.';
I[12][1][1][1]='Incorrecto';
I[12][1][1][2] = 0;
I[12][1][2] = new Array();
I[12][1][2][0]='Alfa - I- antitripsina.';
I[12][1][2][1]='Correcto';
I[12][1][2][2] = 1;
I[12][1][3] = new Array();
I[12][1][3][0]='Factor de coagulaci&#243;n sangu&#237;nea.';
I[12][1][3][1]='Incorrecto';
I[12][1][3][2] = 0;
I[12][2] = 0;

I[13] = new Array();
I[13][0]='La fermentaci&#243;n alcoh&#243;lica es producida por:';
I[13][1] = new Array();
I[13][1][0] = new Array();
I[13][1][0][0]='Levaduras, para obtener pan.';
I[13][1][0][1]='Correcto';
I[13][1][0][2] = 1;
I[13][1][1] = new Array();
I[13][1][1][0]='Bacterias, para obtener pan.';
I[13][1][1][1]='Incorrecto';
I[13][1][1][2] = 0;
I[13][1][2] = new Array();
I[13][1][2][0]='Levaduras, para obtener vinagre.';
I[13][1][2][1]='Incorrecto';
I[13][1][2][2] = 0;
I[13][1][3] = new Array();
I[13][1][3][0]='Bacterias, para obtener vino.';
I[13][1][3][1]='Incorrecto';
I[13][1][3][2] = 0;
I[13][2] = 0;

I[14] = new Array();
I[14][0]='La fitorremediaci&#243;n es una t&#233;cnica utilizada para:';
I[14][1] = new Array();
I[14][1][0] = new Array();
I[14][1][0][0]='Depuraci&#243;n de aguas residuales de grandes ciudades.';
I[14][1][0][1]='Incorrecto';
I[14][1][0][2] = 0;
I[14][1][1] = new Array();
I[14][1][1][0]='Recuperaci&#243;n de suelos contaminados.';
I[14][1][1][1]='Correcto';
I[14][1][1][2] = 1;
I[14][1][2] = new Array();
I[14][1][2][0]='La degradaci&#243;n de hidrocarburos.';
I[14][1][2][1]='Incorrecto';
I[14][1][2][2] = 0;
I[14][1][3] = new Array();
I[14][1][3][0]='La recuperaci&#243;n de la calidad del aire.';
I[14][1][3][1]='Incorrecto';
I[14][1][3][2] = 0;
I[14][2] = 0;

I[15] = new Array();
I[15][0]='Los controles que se aplican sobre los trabajos de manipulaci&#243;n gen&#233;tica fueron acordados en:';
I[15][1] = new Array();
I[15][1][0] = new Array();
I[15][1][0][0]='La Conferencia de Asilomar.';
I[15][1][0][1]='Correcto';
I[15][1][0][2] = 1;
I[15][1][1] = new Array();
I[15][1][1][0]='La Convenci&#243;n para la Biodiversidad.';
I[15][1][1][1]='Incorrecto';
I[15][1][1][2] = 0;
I[15][1][2] = new Array();
I[15][1][2][0]='El Comit&#233; Internacional de Bio&#233;tica.';
I[15][1][2][1]='Incorrecto';
I[15][1][2][2] = 0;
I[15][1][3] = new Array();
I[15][1][3][0]='El Comit&#233; Cient&#237;fico de la UE.';
I[15][1][3][1]='Incorrecto';
I[15][1][3][2] = 0;
I[15][2] = 0;

I[16] = new Array();
I[16][0]='La bioremediaci&#243;n consiste en:';
I[16][1] = new Array();
I[16][1][0] = new Array();
I[16][1][0][0]='Aplicar terapia g&#233;nica para remediar enfermedades.';
I[16][1][0][1]='Incorrecto';
I[16][1][0][2] = 0;
I[16][1][1] = new Array();
I[16][1][1][0]='Utilizar biotecnolog&#237;as para remediar problemas medioambientales.';
I[16][1][1][1]='Correcto';
I[16][1][1][2] = 1;
I[16][1][2] = new Array();
I[16][1][2][0]='Utilizar organismos gen&#233;ticamente modificados para la producci&#243;n de f&#225;rmacos.';
I[16][1][2][1]='Incorrecto';
I[16][1][2][2] = 0;
I[16][1][3] = new Array();
I[16][1][3][0]='Utilizar organismos gen&#233;ticamente modificados para la producci&#243;n de alimentos ecol&#243;gicos.';
I[16][1][3][1]='Incorrecto';
I[16][1][3][2] = 0;
I[16][2] = 0;

I[17] = new Array();
I[17][0]='La creaci&#243;n de animales transg&#233;nicos es un proceso m&#225;s complicado que con vegetales porque:';
I[17][1] = new Array();
I[17][1][0] = new Array();
I[17][1][0][0]='Los animales son m&#225;s caros de mantener.';
I[17][1][0][1]='Incorrecto';
I[17][1][0][2] = 0;
I[17][1][1] = new Array();
I[17][1][1][0]='Las plantas no est&#225;n sujetas a una normativa legal.';
I[17][1][1][1]='Incorrecto';
I[17][1][1][2] = 0;
I[17][1][2] = new Array();
I[17][1][2][0]='Las c&#233;lulas de las plantas son totipotentes.';
I[17][1][2][1]='Correcto';
I[17][1][2][2] = 1;
I[17][1][3] = new Array();
I[17][1][3][0]='Las c&#233;lulas de los animales son totipotentes.';
I[17][1][3][1]='Incorrecto';
I[17][1][3][2] = 0;
I[17][2] = 0;

I[18] = new Array();
I[18][0]='La terapia g&#233;nica s&#243;lo se puede aplicar a los casos en que la enfermedad:';
I[18][1] = new Array();
I[18][1][0] = new Array();
I[18][1][0][0]='S&#243;lo afecte a un gen.';
I[18][1][0][1]='Correcto';
I[18][1][0][2] = 1;
I[18][1][1] = new Array();
I[18][1][1][0]='El gen afectado se exprese en funci&#243;n de se&#241;ales celulares internas.';
I[18][1][1][1]='Incorrecto';
I[18][1][1][2] = 0;
I[18][1][2] = new Array();
I[18][1][2][0]='Afecte a varios genes de la misma c&#233;lula.';
I[18][1][2][1]='Incorrecto';
I[18][1][2][2] = 0;
I[18][1][3] = new Array();
I[18][1][3][0]='Sea terminal.';
I[18][1][3][1]='Incorrecto';
I[18][1][3][2] = 0;
I[18][2] = 0;

I[19] = new Array();
I[19][0]='Los fermentadores de flujo discontinuo:';
I[19][1] = new Array();
I[19][1][0] = new Array();
I[19][1][0][0]='Se recargan de producto y la materia prima es retirada cada cierto tiempo.';
I[19][1][0][1]='Incorrecto';
I[19][1][0][2] = 0;
I[19][1][1] = new Array();
I[19][1][1][0]='Deben interrumpir su funcionamiento para retirar el producto y llenarse de nuevo.';
I[19][1][1][1]='Correcto';
I[19][1][1][2] = 1;
I[19][1][2] = new Array();
I[19][1][2][0]='Deben interrumpir su funcionamiento para retirar la materia prima y llenarse de nuevo.';
I[19][1][2][1]='Incorrecto';
I[19][1][2][2] = 0;
I[19][1][3] = new Array();
I[19][1][3][0]='Se utilizan en la producci&#243;n de vinagre.';
I[19][1][3][1]='Incorrecto';
I[19][1][3][2] = 0;
I[19][2] = 0;


Status = new Array();


function CreateStatusArrays(){
	for (var x=0; x<I.length; x++){
		Status[x] = new Array();
		Status[x][0] = 0; // Question not done yet
		Status[x][1] = new Array(); //for tracking whether answers chosen
		for (var y=0; y<I[x][1].length; y++){
			Status[x][1][y] = '0'; //Answers not chosen yet
		}
		Status[x][2] = 0; //Wrong tries at this question so far
		Status[x][3] = 0; //For storing score out of one on this question
	}
}

function UpdateQuestionStatus(QNum){
	if (Status[QNum][2] >= Status[QNum][1].length-1){
		Status[QNum][0] = 1;
		for (var i=0; i<Status[QNum][1].length; i++){
			if (Status[QNum][1][i] == '0'){
				Status[QNum][1][i] = 'R';
			}
		}
	}
}

function ReplaceStuff(Token, Replacement, InString){
	var i = InString.indexOf(Token);
	var FirstBit = '';
	var LastBit = '';
	while (i>-1){
		FirstBit = InString.substring(0, i);
		LastBit = InString.substring(i + Token.length, InString.length);	
		InString = FirstBit + Replacement + LastBit;
		i = InString.indexOf(Token);
	}
	return InString;
}

function ChangeQ(ChangeBy){
	var NewNum = CurrQNum + ChangeBy;
	if ((NewNum >= 0)&&(NewNum<I.length)){
		CurrQNum = NewNum;
		ShowQuestion(CurrQNum);
	}
	var CurrScore = '';
	if ((ContinuousScoring == true)&&(EraseFeedback == true)){
		CalculateScore();
		var CurrScore = YourScoreIs + ' ' + Score + '%.';
		WriteFeedback(CurrScore);
	}
}

function BuildQuestion(QNum){
	if (I[QNum][2] == 0){
		var Temp = ReplaceStuff('[Question]', I[QNum][0], QRow);

		var AnsRows = '';
		for (var i=0; i<I[QNum][1].length; i++){
			TempAns = ARow;
			TempAns = ReplaceStuff('[ANum]', i, TempAns);
			TempAns = ReplaceStuff('[ALetter]', ' ' + ALetters.charAt(i) + ' ', TempAns);
			TempAns = ReplaceStuff('[Ans]', I[QNum][1][i][0], TempAns);
			AnsRows += TempAns;
		}
		Temp += AnsRows;
		Temp = ReplaceStuff('[QNumber]', QNum+1, Temp);
		Temp = ReplaceStuff('[QNum]', QNum, Temp);
	}
	else{
		var Temp = ReplaceStuff('[Question]', I[QNum][0], QRow);
		var AnsRows = '';
		for (var i=0; i<I[QNum][1].length; i++){
			TempAns = MARow;
			TempAns = ReplaceStuff('[ANum]', i, TempAns);
			TempAns = ReplaceStuff('[Correct]', I[QNum][1][i][2], TempAns);
			TempAns = ReplaceStuff('[Ans]', I[QNum][1][i][0], TempAns);
			AnsRows += TempAns;
		}
		Temp += AnsRows;
		Temp += CheckButton;
		Temp = ReplaceStuff('[QNumber]', QNum+1, Temp);
		Temp = ReplaceStuff('[QNum]', QNum, Temp);
	}
	return Temp;
}

function DisplayExercise(StuffToDisplay){
//Build the output string
	var OutString = '';
	OutString += '<html>';
	OutString += '<body  background="HalfBakedBG.gif" bgcolor="#e6ffe6" text="#000033" link="#0000ff" vlink="#0000cc">';
	OutString += '<center><table border="0" cellpadding="5" cellspacing="1" width="85%">';
	OutString += TitleCode; 
	OutString += '<tr><td bgcolor="#d1e9d1" align="center">'; 
	OutString += '<font face="Geneva,Arial" size="-1">';
	OutString += StuffToDisplay;
	OutString += '</font></td></tr>';
	OutString += NavBar;
	OutString += '</table></center></body></html>';

	if (is.CRAPBrowser){OutString=ResolveAllURLs(OutString);}

//Write it to the frame
	BottomFrame.document.clear();
	BottomFrame.document.open();
	BottomFrame.document.write(OutString);
	BottomFrame.document.close();
}


function ShowAllQs(){
	var Output = '';
	for (var i=0; i<I.length-1; i++){
		Output = Output + BuildQuestion(i);
		Output = Output + '<tr><td colspan="4"><hr></hr></td></tr>';
	}
	Output = Output + BuildQuestion(I.length-1);
	Output = TableOpener + Output + TableCloser;
	DisplayExercise(Output);
}

function ShowQuestion(QNum){
//First, create the Q number readout at the top
	var Readout = (QNum+1) + '/' + I.length;
	while (Readout.length < 7){
		Readout = ' ' + Readout + ' ';
	}
	Readout = QButtonsOpener + Readout + QButtonsCloser;

	var Output = BuildQuestion(QNum);

	Output = TableOpener + Output + TableCloser;

	DisplayExercise(Readout + Output);

//Mark the answers already done
	for (i=0; i<Status[QNum][1].length; i++){
		if (Status[QNum][1][i] == 'R'){
			MarkAnswer(QNum,i,true)
		}
		if (Status[QNum][1][i] == 'W'){
			MarkAnswer(QNum,i,false)
		}
		if (Status[QNum][1][i] == 'C'){
			CheckCheckbox(QNum,i);
		}
	}
//Eliminate feedback from previous question
	if (EraseFeedback == true){
		WriteFeedback('');
	}
}

function CheckMulti(QNum){
	var TotWrong = 0;
	var Output = '';
	var TotAns = I[QNum][1].length;
	for (var i=TotAns-1; i>=0; i--){
//Find any incorrect choices

		var b = eval('BottomFrame.document.QForm.A_' + QNum + '_' + i);

		if (b != null){
//if it's wrong, count it
			if (b.checked == true){
				Status[QNum][1][i] = 'C';
			}
			else{
				Status[QNum][1][i] = 'U';
			}
			if (((b.checked == true) && (b.value == "0"))||((b.checked == false)&&(b.value == "1"))){
				TotWrong++;
			}
		}				
	}

	if (TotWrong == 0){
		Output = DefaultRight;
	}
	else{
		Output = DefaultWrong + '<br />' + (TotAns-TotWrong) + '/' + TotAns;
	}

//If you haven't tried the question before
	if (Status[QNum][0] == 0){
		if (TotWrong > 0){
			Status[QNum][2]++;
		}
		if (TotWrong == 0){
			Status[QNum][0] = 1;
//Calculate the score for this question as a floating-point fraction of 1
			Status[QNum][3] =  ((Status[QNum][1].length - Status[QNum][2]) - 1) / (Status[QNum][1].length - 1);
//If less than zero, set to zero
			if (Status[QNum][3] < 0){Status[QNum][3] = 0;}
		}
	}

//Check whether the quiz is finished
	var Finished = true;
	for (var i=0; i<Status.length; i++){
		if (Status[i][0] == 0){Finished = false;}
	}

//Calculate the score if needed
		
	if (Status[QNum][0] == 1){
		if ((Finished==true)||(ContinuousScoring==true)){
			CalculateScore();
			Output = Output + '<br />' + YourScoreIs + ' ' + Score + '%.';
		}

		if (Finished == true){
			EraseFeedback = false;
			var CFT = 0;
			for (i=0; i<I.length; i++){
				if (Status[i][2] == 0){
					CFT++;
				}
			}
		Output += '<br />' + CorrectFirstTime + CFT + '/' + I.length;

		}
	}

//Show the feedback
	if (Output.length > 0){
		WriteFeedback(Output);
	}

}

function CheckAnswer(QNum, ANum){
	var Output = I[QNum][1][ANum][1];

	if (Output==''){
		if (I[QNum][1][ANum][2] == 1){
			Output = DefaultRight;
		}
		else{
			Output = DefaultWrong;
		}
	}

//If it's not been previously answered correctly
	if (Status[QNum][0] == 0){
//If it's a correct answer
		if (I[QNum][1][ANum][2] == 1){
			Status[QNum][0] = 1;//Mark the Q as done
			Status[QNum][1][ANum] = 'R';
			MarkAnswer(QNum, ANum, true);
//Calculate the score for this question as a floating-point fraction of 1
			var PossibleWrongs = 0;
			for (var i=0; i<I[QNum][1].length; i++){
				if (I[QNum][1][i][2] == 0){
					PossibleWrongs++;
				}
			}

			if (PossibleWrongs == 0){PossibleWrongs = 1;}

			Status[QNum][3] = 1 - (Status[QNum][2]/PossibleWrongs);

//If less than zero, set to zero
			if (Status[QNum][3] < 0){Status[QNum][3] = 0;}
		}
		else{
			if (Status[QNum][1][ANum] != 'W'){
				Status[QNum][1][ANum] = 'W';
				MarkAnswer(QNum, ANum, false);
				Status[QNum][2]++; //increment wrong tries for this Q
			}
		}
	}

	UpdateQuestionStatus(QNum);

//Check whether the quiz is finished
	var Finished = true;
	for (var i=0; i<Status.length; i++){
		if (Status[i][0] == 0){Finished = false;}

	}

//Calculate the score if needed
		
	if (Status[QNum][0] == 1){
		if ((Finished==true)||(ContinuousScoring==true)){
			CalculateScore();
			Output = Output + '<br />' + YourScoreIs + ' ' + Score + '%.';
		}

		if (Finished == true){
			EraseFeedback = false;
			var CFT = 0;
			for (i=0; i<I.length; i++){
				if (Status[i][2] == 0){
					CFT++;
				}
			}
		Output += '<br />' + CorrectFirstTime + CFT + '/' + I.length;

		}
	}

//Show the feedback
	if (Output.length > 0){
		WriteFeedback(Output);
	}
}

function CalculateScore(){
	var TriedQs = 0;
	var TotalScore = 0;
	for (var i=0; i<Status.length; i++){
		if ((Status[i][2] > 0)||(Status[i][3] == 1)){
			TriedQs++;
			TotalScore += Status[i][3];
		}
	}
	if (TriedQs == 0){
		Score = 0;
	}
	else{
		Score = (Math.floor(100 * (TotalScore/TriedQs)));
	}
}

function MarkAnswer(QNum, ANum, Right){
	var Mark = CorrectIndicator;
	if (Right == false){Mark = IncorrectIndicator;}

	if (eval('BottomFrame.document.QForm.FB_' + QNum + '_' + ANum) != null){
		eval('BottomFrame.document.QForm.FB_' + QNum + '_' + ANum).value = Mark;
	}
}

function CheckCheckbox(QNum, ANum){
	if (eval('BottomFrame.document.QForm.A_' + QNum + '_' + ANum) != null){
		eval('BottomFrame.document.QForm.A_' + QNum + '_' + ANum).checked = true;
	}
}







function Blank(){
	return '<html><body>&copy;Half-Baked Software. Loading...</body></html>';
}

//-->

//]]>

</script>


</head>
<!--<body>Fool those dumb ad-inserting ISPs</body>-->

<!--For full XHTML 1.0 compatibility, remove the border and framespacing attributes.
These are required for proper display in current browsers, but render the document incompatible. Then, you'll need to add the appropriate Document Type Declaration; use
the W3C XHTML 1 frameset DTD.-->


<frameset rows="25%,*" onload="StartUp()" framespacing="0" border="0">
	<frame src="javascript:parent.Blank()" frameborder="0" name="TopFrame"></frame>
	<frame src="javascript:parent.Blank()" frameborder="0" name="BottomFrame"></frame>
</frameset>




</html>
