<html>
<head><meta name="author" content="Created with Hot Potatoes by Half-Baked Software, registered to Alfonso De Mier."></meta><meta name="keywords" content="Hot Potatoes, Half-Baked Software, Windows, University of Victoria"></meta>
<title>
AUTOEVALUACI&#211;N
</title>

<script language="javascript" type="text/javascript">

//<![CDATA[

<!--

// BrowserCheck Object

function BrowserCheck() {
	var b = navigator.appName
//HBS extension
	this.mac = (navigator.appVersion.indexOf('Mac') != -1)
	if (b=="Netscape") this.b = "ns"
	else if (b=="Microsoft Internet Explorer") this.b = "ie"
	else this.b = b
	this.version = navigator.appVersion
	this.v = parseInt(this.version)
	this.ns = (this.b=="ns" && this.v>=4)
	this.ns4 = (this.b=="ns" && this.v==4)
	this.ns5 = (this.b=="ns" && this.v==5)
	this.ie = (this.b=="ie" && this.v>=4)
	this.ie4 = (this.version.indexOf('MSIE 4')>0)
	this.ie5 = (this.version.indexOf('MSIE 5')>0)
	this.min = (this.ns||this.ie)
	this.CRAPBrowser = (this.ie && this.mac); //Cannot Resolve Addresses Properly
}

is = new BrowserCheck();

var LocFolder = GetFolder(window.location.href);
function GetFolder(LocPath){
	LocPath = ReplaceStuff('\'','%27',LocPath);
	var i = LocPath.lastIndexOf('/');
	if (i<0){i=LocPath.lastIndexOf('\\')};
	return LocPath.substring(0,i);
}

function CombineURLs(InURL){
	var i = InURL.indexOf('../');
	var s = LocFolder;
	while (i >- 1){
		s = GetFolder(s);
		InURL = InURL.substring(3,InURL.length);
		i = InURL.indexOf('../');
	}
	return s + '/' + InURL;
}

x = new Array();
function ResolveURLs(InText,Attribute){
	x.length=0;
	var Temp = InText.toLowerCase();
	var z;
	var AttLen = Attribute.length + 2;
	var y=Temp.lastIndexOf(Attribute + '="');
	while (y>-1){
		var sLoc = y+AttLen;
		if (Temp.substring(sLoc,sLoc+5) != 'http:'){
			x[x.length]=new Array();
			x[x.length-1][0] = sLoc;
			z = Temp.indexOf('"',sLoc);
			x[x.length-1][1] = z;
			x[x.length-1][2] = InText.substring(sLoc,z);

		}
		Temp = Temp.substring(0,y);
		y=Temp.lastIndexOf(Attribute + '="');
	}
	for (var j=0; j<x.length; j++){
		InText = InText.substring(0,x[j][0]) + CombineURLs(x[j][2]) + InText.substring(x[j][1], InText.length);
	}
	return InText;
}

function ResolveAllURLs(Stuff){
	Stuff = ResolveURLs(Stuff,'href');
	Stuff = ResolveURLs(Stuff,'src');
	Stuff = ResolveURLs(Stuff,'parent.location');
	return Stuff;
}


var ExBGColor = '#ddf7e4';



var PageBGColor = '#ddf7e4';



var NavBarColor = '#408080';


var TextColor = '#000033';
var CurrQNum = 0;
var ALetters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
var CorrectIndicator = 'Correcto';
var IncorrectIndicator = 'Incorrecto';
var YourScoreIs = 'Tu puntuaci&#243;n es:';
var Tries = 0;
var CorrectChoices = 0;
var ContinuousScoring = true;
var CorrectFirstTime = 'Preguntas contestadas correctamente a la primera:';var ExerciseTitle = 'AUTOEVALUACI&#211;N';
var ExerciseSubtitle = 'Ejercicio de m&#250;ltiples respuestas.';
var Instructions = 'Escoge la respuesta correcta para cada pregunta.'; //'';
var ShuffleQs = true;
var ShuffleAs = true;
var DefaultRight = 'Correcto';
var DefaultWrong = 'intenta otra vez';
var QsToShow = 25;
var ShowOneByOne = false;
var ReadingURL = '';
var EraseFeedback = true;
var Score = 0;

var PreviousPage = history.length;







var NavBar='';


NavBar+='<tr><form name="NavButtons1" action=""><td bgcolor="#408080" align="center">';
NavBar+='<font face="Geneva,Arial" size="-1">';


NavBar+='<input type="button" value="Cerrar" onclick=\'parent.location="cierre.htm"\'></input>';


NavBar+='</font></td></form></tr>';
if (is.CRAPBrowser){NavBar=ResolveAllURLs(NavBar)};


var TitleCode = '<tr><td align="center" valign="middle" bgcolor="#ddf7e4">';
TitleCode += '<font size="+1" face="Geneva,Arial" color="#000033">' + ExerciseTitle + '</font><br />';
TitleCode += '<font size="-1" face="Geneva,Arial" color="#000033">' + ExerciseSubtitle + '<br />';
TitleCode += '</font></td></tr>';

var QButtonsOpener = '<table border="0" width="85%" cellpadding="10">';
QButtonsOpener += '<tr><td align="center" valign="middle"><form>';
QButtonsOpener += '<font size="+1"><input type="button" value="&lt;=" onclick="parent.ChangeQ(-1)"></input>';
var QButtonsCloser = '<input type="button" value="=&gt;" onclick="parent.ChangeQ(1)"></input>';
QButtonsCloser += '</font></form></td></tr></table>';

var TableOpener = '<form name="QForm">';
TableOpener += '<table border="0" width="85%">';
var QRow = '<tr><td valign="top" bgcolor="#ddf7e4" align="right">';
QRow += '<font size="+1" face="Geneva,Arial" color="#000033">[QNumber]</font></td>';
QRow += '<td colspan="3" valign="top" bgcolor="#ddf7e4"><font size="-1" face="Geneva,Arial" color="#000033">[Question]<br />&nbsp;';
QRow += '</font></td></tr>';

var ARow = '<tr><td></td><td valign="top" bgcolor="#ddf7e4"><input type="text" value=" " size="3" name="FB_[QNum]_[ANum]"></input></td>';
ARow += '<td valign="top" bgcolor="#ddf7e4"><input type="button" value="[ALetter]" OnClick="parent.CheckAnswer([QNum],[ANum])"></input></td>';
ARow += '<td width="100%" bgcolor="#ddf7e4"><font size="-1" face="Geneva,Arial" color="#000033">[Ans]</font></td></tr>';

var MARow = '<tr><td></td><td valign="top" bgcolor="#ddf7e4" colspan="3"><input type="checkbox" name="A_[QNum]_[ANum]" value="[Correct]"></input>';
MARow += '<font size="-1" face="Geneva,Arial" color="#000033">[Ans]</font></td></tr>';

var CheckButton = '<tr><td></td><td valign="top" bgcolor="#ddf7e4" ><input type="button" value="Comprobar"';
CheckButton += ' onclick="parent.CheckMulti([QNum])"></input></td></tr>';

TableCloser = '</table></form>';

function GoBack(){
	var BackSkip = history.length - PreviousPage;
	if (BackSkip > 0){
		history.go((BackSkip+1)*-1);
	}
	else{
		parent.history.back();
	}
}

function ReduceItems(){
	var ItemToDump=0;
	var j=0;
	while (I.length > QsToShow){
		ItemToDump = Math.floor(I.length*Math.random());
		for (j=ItemToDump; j<(I.length-1); j++){
			I[j] = I[j+1];
		}
		I.length = I.length-1;
	}
}

function Shuffle(InArray){
	Temp = new Array();
	var Len = InArray.length;

	var j = Len;

	for (var i=0; i<Len; i++){
		Temp[i] = InArray[i];
	}

	for (i=0; i<Len; i++){
		Num = Math.floor(j  *  Math.random());
		InArray[i] = Temp[Num];

		for (var k=Num; k < j; k++) {
			Temp[k] = Temp[k+1];
		}
		j--;
	}
	return InArray;
}

function WriteFeedback(Feedback) {
	if (is.CRAPBrowser){Feedback=ResolveAllURLs(Feedback);}
//Build the output string
	var OutString = '';
	OutString += '<html>';
	OutString += '<body  background="" bgcolor="#ddf7e4" text="#000033" link="#408080" vlink="#408080">';
	OutString += '<center><table border="0" cellpadding="5" cellspacing="1" width="85%">';
	OutString += NavBar;
	if (Feedback.length>0){
		OutString += '<tr><td bgcolor="#ddf7e4" align="center">'; 
		OutString += '<font face="Geneva,Arial" size="-1" color="#000033">';
		OutString += Feedback;
		OutString += '</font></td></tr>'
	}
	OutString += '</table></center></body></html>';
//Write it to the frame
	TopFrame.document.clear();
	TopFrame.document.open();
	TopFrame.document.write(OutString);
	TopFrame.document.close();
}

function StartUp(){




//Reduce array if required
	if (QsToShow < I.length){
		ReduceItems();
	}

//Shuffle stuff if required

	if (ShuffleQs == true){
		I = Shuffle(I);
	}

	if (ShuffleAs == true){
		for (var i=0; i<I.length; i++){
			I[i][1] = Shuffle(I[i][1]);
		}
	}

//Create arrays
	CreateStatusArrays();



//Show the first question or all of them
	if (ShowOneByOne == false){
		ShowAllQs();
	}
	else{
		ShowQuestion(CurrQNum);
	}

//Write the top frame
	WriteFeedback(Instructions);
}


I = new Array();

I[0] = new Array();
I[0][0]='El control de las enfermedades infecciosas se produce por';
I[0][1] = new Array();
I[0][1][0] = new Array();
I[0][1][0][0]='La existencia de un gran n&#250;mero de m&#233;dicos';
I[0][1][0][1]='Incorrecto';
I[0][1][0][2] = 0;
I[0][1][1] = new Array();
I[0][1][1][0]='La educaci&#243;n preventiva';
I[0][1][1][1]='Correcto';
I[0][1][1][2] = 1;
I[0][1][2] = new Array();
I[0][1][2][0]='La automedicaci&#243;n';
I[0][1][2][1]='Incorrecto';
I[0][1][2][2] = 0;
I[0][1][3] = new Array();
I[0][1][3][0]='La disminuci&#243;n de agentes infecciosos';
I[0][1][3][1]='Incorrecto';
I[0][1][3][2] = 0;
I[0][2] = 0;

I[1] = new Array();
I[1][0]='Se llama pandemia a una enfermedad infecciosa que afecte';
I[1][1] = new Array();
I[1][1][0] = new Array();
I[1][1][0][0]='A un n&#250;mero elevado de individuos en un tiempo corto';
I[1][1][0][1]='Incorrecto';
I[1][1][0][2] = 0;
I[1][1][1] = new Array();
I[1][1][1][0]='A una regi&#243;n determinada y en un momento concreto';
I[1][1][1][1]='Incorrecto';
I[1][1][1][2] = 0;
I[1][1][2] = new Array();
I[1][1][2][0]='A un n&#250;mero elevado de individuos, en un tiempo corto y en una regi&#243;n extensa';
I[1][1][2][1]='Correcto';
I[1][1][2][2] = 1;
I[1][1][3] = new Array();
I[1][1][3][0]='A un n&#250;mero bajo de individuos en un tiempo corto';
I[1][1][3][1]='Incorrecto';
I[1][1][3][2] = 0;
I[1][2] = 0;

I[2] = new Array();
I[2][0]='En caso de aparici&#243;n de un caso de c&#243;lera';
I[2][1] = new Array();
I[2][1][0] = new Array();
I[2][1][0][0]='Se habla de epidemia';
I[2][1][0][1]='Incorrecto';
I[2][1][0][2] = 0;
I[2][1][1] = new Array();
I[2][1][1][0]='es irrelevante';
I[2][1][1][1]='Incorrecto';
I[2][1][1][2] = 0;
I[2][1][2] = new Array();
I[2][1][2][0]='Debe ser publicado urgentemente';
I[2][1][2][1]='Correcto';
I[2][1][2][2] = 1;
I[2][1][3] = new Array();
I[2][1][3][0]='Debe pubicarse en el Anuario del Ministerio de Medio Ambiente';
I[2][1][3][1]='Incorrecto';
I[2][1][3][2] = 0;
I[2][2] = 0;

I[3] = new Array();
I[3][0]='Un fungicida destruye';
I[3][1] = new Array();
I[3][1][0] = new Array();
I[3][1][0][0]='Algas';
I[3][1][0][1]='Incorrecto';
I[3][1][0][2] = 0;
I[3][1][1] = new Array();
I[3][1][1][0]='Virus';
I[3][1][1][1]='Incorrecto';
I[3][1][1][2] = 0;
I[3][1][2] = new Array();
I[3][1][2][0]='Bacterias';
I[3][1][2][1]='Incorrecto';
I[3][1][2][2] = 0;
I[3][1][3] = new Array();
I[3][1][3][0]='Hongos';
I[3][1][3][1]='Correcto';
I[3][1][3][2] = 1;
I[3][2] = 0;

I[4] = new Array();
I[4][0]='Una exotoxina';
I[4][1] = new Array();
I[4][1][0] = new Array();
I[4][1][0][0]='Tiene baja toxicidad';
I[4][1][0][1]='Incorrecto';
I[4][1][0][2] = 0;
I[4][1][1] = new Array();
I[4][1][1][0]='Se encuentra en la pared bacteriana';
I[4][1][1][1]='Incorrecto';
I[4][1][1][2] = 0;
I[4][1][2] = new Array();
I[4][1][2][0]='Induce la producci&#243;n de anticuerpos';
I[4][1][2][1]='Correcto';
I[4][1][2][2] = 1;
I[4][1][3] = new Array();
I[4][1][3][0]='Es t&#237;pica de bacterias Gram -';
I[4][1][3][1]='Incorrecto';
I[4][1][3][2] = 0;
I[4][2] = 0;

I[5] = new Array();
I[5][0]='El Carbono vuelve a la Atm&#243;sfera por el proceso de';
I[5][1] = new Array();
I[5][1][0] = new Array();
I[5][1][0][0]='Fotos&#237;ntesis';
I[5][1][0][1]='Incorrecto';
I[5][1][0][2] = 0;
I[5][1][1] = new Array();
I[5][1][1][0]='Respiraci&#243;n celular';
I[5][1][1][1]='Correcto';
I[5][1][1][2] = 1;
I[5][1][2] = new Array();
I[5][1][2][0]='Fijaci&#243;n anaerobia';
I[5][1][2][1]='Incorrecto';
I[5][1][2][2] = 0;
I[5][1][3] = new Array();
I[5][1][3][0]='Reducci&#243;n asimilatoria';
I[5][1][3][1]='Incorrecto';
I[5][1][3][2] = 0;
I[5][2] = 0;

I[6] = new Array();
I[6][0]='Nitrosomonas act&#250;a en el proceso de';
I[6][1] = new Array();
I[6][1][0] = new Array();
I[6][1][0][0]='Nitrificaci&#243;n';
I[6][1][0][1]='Correcto';
I[6][1][0][2] = 1;
I[6][1][1] = new Array();
I[6][1][1][0]='Amonificaci&#243;n';
I[6][1][1][1]='Incorrecto';
I[6][1][1][2] = 0;
I[6][1][2] = new Array();
I[6][1][2][0]='Desnitrificaci&#243;n';
I[6][1][2][1]='Incorrecto';
I[6][1][2][2] = 0;
I[6][1][3] = new Array();
I[6][1][3][0]='Nitrataci&#243;n';
I[6][1][3][1]='Incorrecto';
I[6][1][3][2] = 0;
I[6][2] = 0;

I[7] = new Array();
I[7][0]='&#191;Qui&#233;n interviene en la fijaci&#243;n del Nitr&#243;geno?';
I[7][1] = new Array();
I[7][1][0] = new Array();
I[7][1][0][0]='Rhizobium';
I[7][1][0][1]='Incorrecto';
I[7][1][0][2] = 0;
I[7][1][1] = new Array();
I[7][1][1][0]='Desulfovibrio';
I[7][1][1][1]='Incorrecto';
I[7][1][1][2] = 0;
I[7][1][2] = new Array();
I[7][1][2][0]='Bacterias metan&#243;genas';
I[7][1][2][1]='Incorrecto';
I[7][1][2][2] = 0;
I[7][1][3] = new Array();
I[7][1][3][0]='Pseudomonas';
I[7][1][3][1]='Incorrecto';
I[7][1][3][2] = 0;
I[7][2] = 0;

I[8] = new Array();
I[8][0]='En la biorremediaci&#243;n act&#250;an microorganismos';
I[8][1] = new Array();
I[8][1][0] = new Array();
I[8][1][0][0]='Fotosint&#233;ticos';
I[8][1][0][1]='Incorrecto';
I[8][1][0][2] = 0;
I[8][1][1] = new Array();
I[8][1][1][0]='Par&#225;sitos';
I[8][1][1][1]='Incorrecto';
I[8][1][1][2] = 0;
I[8][1][2] = new Array();
I[8][1][2][0]='Descomponedores';
I[8][1][2][1]='Correcto';
I[8][1][2][2] = 1;
I[8][1][3] = new Array();
I[8][1][3][0]='Comensales';
I[8][1][3][1]='Incorrecto';
I[8][1][3][2] = 0;
I[8][2] = 0;

I[9] = new Array();
I[9][0]='En la producci&#243;n de vinagre se necesitan';
I[9][1] = new Array();
I[9][1][0] = new Array();
I[9][1][0][0]='Condiciones anaerobias estrictas';
I[9][1][0][1]='Incorrecto';
I[9][1][0][2] = 0;
I[9][1][1] = new Array();
I[9][1][1][0]='Temperaturas altas';
I[9][1][1][1]='Incorrecto';
I[9][1][1][2] = 0;
I[9][1][2] = new Array();
I[9][1][2][0]='Presencia de ox&#237;geno';
I[9][1][2][1]='Correcto';
I[9][1][2][2] = 1;
I[9][1][3] = new Array();
I[9][1][3][0]='Presencia de Saccharomyces';
I[9][1][3][1]='Incorrecto';
I[9][1][3][2] = 0;
I[9][2] = 0;

I[10] = new Array();
I[10][0]='La fermentaci&#243;n alcoh&#243;lica';
I[10][1] = new Array();
I[10][1][0] = new Array();
I[10][1][0][0]='Es producida por algas';
I[10][1][0][1]='Incorrecto';
I[10][1][0][2] = 0;
I[10][1][1] = new Array();
I[10][1][1][0]='Termina con la obtenci&#243;n de vinagre';
I[10][1][1][1]='Incorrecto';
I[10][1][1][2] = 0;
I[10][1][2] = new Array();
I[10][1][2][0]='Es producida por levaduras';
I[10][1][2][1]='Correcto';
I[10][1][2][2] = 1;
I[10][1][3] = new Array();
I[10][1][3][0]='Produce &#225;cido l&#225;ctico';
I[10][1][3][1]='Incorrecto';
I[10][1][3][2] = 0;
I[10][2] = 0;

I[11] = new Array();
I[11][0]='El &#225;cido l&#225;ctico se produce en la fermentaci&#243;n';
I[11][1] = new Array();
I[11][1][0] = new Array();
I[11][1][0][0]='Alcoh&#243;lica';
I[11][1][0][1]='Incorrecto';
I[11][1][0][2] = 0;
I[11][1][1] = new Array();
I[11][1][1][0]='Ac&#233;tica';
I[11][1][1][1]='Incorrecto';
I[11][1][1][2] = 0;
I[11][1][2] = new Array();
I[11][1][2][0]='Pir&#250;vica';
I[11][1][2][1]='Incorrecto';
I[11][1][2][2] = 0;
I[11][1][3] = new Array();
I[11][1][3][0]='L&#225;ctica';
I[11][1][3][1]='Correcto';
I[11][1][3][2] = 1;
I[11][2] = 0;

I[12] = new Array();
I[12][0]='Los m&#233;todos qu&#237;micos NO se aplican sobre';
I[12][1] = new Array();
I[12][1][0] = new Array();
I[12][1][0][0]='Utensilios';
I[12][1][0][1]='Incorrecto';
I[12][1][0][2] = 0;
I[12][1][1] = new Array();
I[12][1][1][0]='Aparatos';
I[12][1][1][1]='Incorrecto';
I[12][1][1][2] = 0;
I[12][1][2] = new Array();
I[12][1][2][0]='Alimentos';
I[12][1][2][1]='Correcto';
I[12][1][2][2] = 1;
I[12][1][3] = new Array();
I[12][1][3][0]='Manipuladores';
I[12][1][3][1]='Incorrecto';
I[12][1][3][2] = 0;
I[12][2] = 0;

I[13] = new Array();
I[13][0]='Una de las cuatro respuestas NO es correcta: En un proceso industrial se debe contar con';
I[13][1] = new Array();
I[13][1][0] = new Array();
I[13][1][0][0]='Nutrientes baratos y dif&#237;ciles de obtener';
I[13][1][0][1]='Correcto';
I[13][1][0][2] = 1;
I[13][1][1] = new Array();
I[13][1][1][0]='Asepsia en los tanques';
I[13][1][1][1]='Incorrecto';
I[13][1][1][2] = 0;
I[13][1][2] = new Array();
I[13][1][2][0]='Cepas clones estables';
I[13][1][2][1]='Incorrecto';
I[13][1][2][2] = 0;
I[13][1][3] = new Array();
I[13][1][3][0]='Subproductos f&#225;cilmente eliminables';
I[13][1][3][1]='Incorrecto';
I[13][1][3][2] = 0;
I[13][2] = 0;

I[14] = new Array();
I[14][0]='Las levaduras son';
I[14][1] = new Array();
I[14][1][0] = new Array();
I[14][1][0][0]='Mohos que no forman hifas, ni micelio';
I[14][1][0][1]='Incorrecto';
I[14][1][0][2] = 0;
I[14][1][1] = new Array();
I[14][1][1][0]='Hongos que no forman hifas, ni micelio';
I[14][1][1][1]='Correcto';
I[14][1][1][2] = 1;
I[14][1][2] = new Array();
I[14][1][2][0]='Mohos que presentan hifas y micelio';
I[14][1][2][1]='Incorrecto';
I[14][1][2][2] = 0;
I[14][1][3] = new Array();
I[14][1][3][0]='Hongos que presentan sincitios';
I[14][1][3][1]='Incorrecto';
I[14][1][3][2] = 0;
I[14][2] = 0;

I[15] = new Array();
I[15][0]='Las algas unicelulares';
I[15][1] = new Array();
I[15][1][0] = new Array();
I[15][1][0][0]='Presentan flagelos';
I[15][1][0][1]='Correcto';
I[15][1][0][2] = 1;
I[15][1][1] = new Array();
I[15][1][1][0]='No contienen pigmentos, excepto las Clorofitas';
I[15][1][1][1]='Incorrecto';
I[15][1][1][2] = 0;
I[15][1][2] = new Array();
I[15][1][2][0]='Son todas marinas';
I[15][1][2][1]='Incorrecto';
I[15][1][2][2] = 0;
I[15][1][3] = new Array();
I[15][1][3][0]='Tienen reproducci&#243;n siempre de forma sexual';
I[15][1][3][1]='Incorrecto';
I[15][1][3][2] = 0;
I[15][2] = 0;

I[16] = new Array();
I[16][0]='Los protozoos';
I[16][1] = new Array();
I[16][1][0] = new Array();
I[16][1][0][0]='Son heter&#243;trofos, pluricelulares y con capacidad de movimiento';
I[16][1][0][1]='Incorrecto';
I[16][1][0][2] = 0;
I[16][1][1] = new Array();
I[16][1][1][0]='Se reproducen todos por conjugaci&#243;n';
I[16][1][1][1]='Incorrecto';
I[16][1][1][2] = 0;
I[16][1][2] = new Array();
I[16][1][2][0]='Se desplazan por flagelos';
I[16][1][2][1]='Incorrecto';
I[16][1][2][2] = 0;
I[16][1][3] = new Array();
I[16][1][3][0]='Son eucariotas, unicelulares y heter&#243;trofos';
I[16][1][3][1]='Correcto';
I[16][1][3][2] = 1;
I[16][2] = 0;

I[17] = new Array();
I[17][0]='Los pili';
I[17][1] = new Array();
I[17][1][0] = new Array();
I[17][1][0][0]='Son necesarios en la transducci&#243;n';
I[17][1][0][1]='Incorrecto';
I[17][1][0][2] = 0;
I[17][1][1] = new Array();
I[17][1][1][0]='Act&#250;an en la conjuaci&#243;n de ciliados';
I[17][1][1][1]='Incorrecto';
I[17][1][1][2] = 0;
I[17][1][2] = new Array();
I[17][1][2][0]='S&#243;lo aparecen en bacterias Hfr';
I[17][1][2][1]='Incorrecto';
I[17][1][2][2] = 0;
I[17][1][3] = new Array();
I[17][1][3][0]='Aparecen en bacterias que poseen el pl&#225;smido F';
I[17][1][3][1]='Correcto';
I[17][1][3][2] = 1;
I[17][2] = 0;

I[18] = new Array();
I[18][0]='En la transformaci&#243;n bacteriana act&#250;a';
I[18][1] = new Array();
I[18][1][0] = new Array();
I[18][1][0][0]='Los mesosomas';
I[18][1][0][1]='Incorrecto';
I[18][1][0][2] = 0;
I[18][1][1] = new Array();
I[18][1][1][0]='Los flagelos';
I[18][1][1][1]='Incorrecto';
I[18][1][1][2] = 0;
I[18][1][2] = new Array();
I[18][1][2][0]='Las c&#225;psidas v&#237;ricas';
I[18][1][2][1]='Incorrecto';
I[18][1][2][2] = 0;
I[18][1][3] = new Array();
I[18][1][3][0]='Fragmentos de ADN de otra c&#233;lula lisada';
I[18][1][3][1]='Correcto';
I[18][1][3][2] = 1;
I[18][2] = 0;

I[19] = new Array();
I[19][0]='Los pl&#225;smidos son';
I[19][1] = new Array();
I[19][1][0] = new Array();
I[19][1][0][0]='Fragmentos de mesosomas';
I[19][1][0][1]='Incorrecto';
I[19][1][0][2] = 0;
I[19][1][1] = new Array();
I[19][1][1][0]='ADN extracelular';
I[19][1][1][1]='Incorrecto';
I[19][1][1][2] = 0;
I[19][1][2] = new Array();
I[19][1][2][0]='ADN extracromos&#243;mico';
I[19][1][2][1]='Correcto';
I[19][1][2][2] = 1;
I[19][1][3] = new Array();
I[19][1][3][0]='ADN que proviene de una c&#233;lula muerta';
I[19][1][3][1]='Incorrecto';
I[19][1][3][2] = 0;
I[19][2] = 0;

I[20] = new Array();
I[20][0]='La pared celular bacteriana';
I[20][1] = new Array();
I[20][1][0] = new Array();
I[20][1][0][0]='Es destruida por antibi&#243;ticos';
I[20][1][0][1]='Correcto';
I[20][1][0][2] = 1;
I[20][1][1] = new Array();
I[20][1][1][0]='Tiene la misma estructura en todas las bacterias';
I[20][1][1][1]='Incorrecto';
I[20][1][1][2] = 0;
I[20][1][2] = new Array();
I[20][1][2][0]='En bacterias Gram + es resistente a los antibi&#243;ticos';
I[20][1][2][1]='Incorrecto';
I[20][1][2][2] = 0;
I[20][1][3] = new Array();
I[20][1][3][0]='En bacterias Gram - est&#225; formada &#250;nicamente por peptidoglucanos';
I[20][1][3][1]='Incorrecto';
I[20][1][3][2] = 0;
I[20][2] = 0;

I[21] = new Array();
I[21][0]='El profago es';
I[21][1] = new Array();
I[21][1][0] = new Array();
I[21][1][0][0]='Un virus atenuado';
I[21][1][0][1]='Correcto';
I[21][1][0][2] = 1;
I[21][1][1] = new Array();
I[21][1][1][0]='Un viri&#243;n';
I[21][1][1][1]='Incorrecto';
I[21][1][1][2] = 0;
I[21][1][2] = new Array();
I[21][1][2][0]='Un viroide';
I[21][1][2][1]='Incorrecto';
I[21][1][2][2] = 0;
I[21][1][3] = new Array();
I[21][1][3][0]='Un pri&#243;n';
I[21][1][3][1]='Incorrecto';
I[21][1][3][2] = 0;
I[21][2] = 0;

I[22] = new Array();
I[22][0]='La transcriptasa inversa es t&#237;pica de virus';
I[22][1] = new Array();
I[22][1][0] = new Array();
I[22][1][0][0]='ADN monocatenarios';
I[22][1][0][1]='Incorrecto';
I[22][1][0][2] = 0;
I[22][1][1] = new Array();
I[22][1][1][0]='ADN bicatenarios';
I[22][1][1][1]='Incorrecto';
I[22][1][1][2] = 0;
I[22][1][2] = new Array();
I[22][1][2][0]='ARN monocatenarios +';
I[22][1][2][1]='Correcto';
I[22][1][2][2] = 1;
I[22][1][3] = new Array();
I[22][1][3][0]='ARN monocatenarios -';
I[22][1][3][1]='Incorrecto';
I[22][1][3][2] = 0;
I[22][2] = 0;

I[23] = new Array();
I[23][0]='El caps&#243;mero es';
I[23][1] = new Array();
I[23][1][0] = new Array();
I[23][1][0][0]='Una prote&#237;na de la cubierta proteica v&#237;rica';
I[23][1][0][1]='Incorrecto';
I[23][1][0][2] = 0;
I[23][1][1] = new Array();
I[23][1][1][0]='La cubierta proteica de un virus';
I[23][1][1][1]='Incorrecto';
I[23][1][1][2] = 0;
I[23][1][2] = new Array();
I[23][1][2][0]='Parte de la vaina';
I[23][1][2][1]='Incorrecto';
I[23][1][2][2] = 0;
I[23][1][3] = new Array();
I[23][1][3][0]='Parte de la pared bacteriana';
I[23][1][3][1]='Incorrecto';
I[23][1][3][2] = 0;
I[23][2] = 0;

I[24] = new Array();
I[24][0]='Vorticella es';
I[24][1] = new Array();
I[24][1][0] = new Array();
I[24][1][0][0]='Un virus';
I[24][1][0][1]='Incorrecto';
I[24][1][0][2] = 0;
I[24][1][1] = new Array();
I[24][1][1][0]='Un protozoo';
I[24][1][1][1]='Correcto';
I[24][1][1][2] = 1;
I[24][1][2] = new Array();
I[24][1][2][0]='Un hongo';
I[24][1][2][1]='Incorrecto';
I[24][1][2][2] = 0;
I[24][1][3] = new Array();
I[24][1][3][0]='Un alga';
I[24][1][3][1]='Incorrecto';
I[24][1][3][2] = 0;
I[24][2] = 0;


Status = new Array();


function CreateStatusArrays(){
	for (var x=0; x<I.length; x++){
		Status[x] = new Array();
		Status[x][0] = 0; // Question not done yet
		Status[x][1] = new Array(); //for tracking whether answers chosen
		for (var y=0; y<I[x][1].length; y++){
			Status[x][1][y] = '0'; //Answers not chosen yet
		}
		Status[x][2] = 0; //Wrong tries at this question so far
		Status[x][3] = 0; //For storing score out of one on this question
	}
}

function ReplaceStuff(Token, Replacement, InString){
	var i = InString.indexOf(Token);
	var FirstBit = '';
	var LastBit = '';
	while (i>-1){
		FirstBit = InString.substring(0, i);
		LastBit = InString.substring(i + Token.length, InString.length);	
		InString = FirstBit + Replacement + LastBit;
		i = InString.indexOf(Token);
	}
	return InString;
}

function ChangeQ(ChangeBy){
	var NewNum = CurrQNum + ChangeBy;
	if ((NewNum >= 0)&&(NewNum<I.length)){
		CurrQNum = NewNum;
		ShowQuestion(CurrQNum);
	}
	var CurrScore = '';
	if ((ContinuousScoring == true)&&(EraseFeedback == true)){
		CurrScore = YourScoreIs + ' ' + Score + '%.';
		WriteFeedback(CurrScore);
	}
}

function BuildQuestion(QNum){
	if (I[QNum][2] == 0){
		var Temp = ReplaceStuff('[Question]', I[QNum][0], QRow);

		var AnsRows = '';
		for (var i=0; i<I[QNum][1].length; i++){
			TempAns = ARow;
			TempAns = ReplaceStuff('[ANum]', i, TempAns);
			TempAns = ReplaceStuff('[ALetter]', ' ' + ALetters.charAt(i) + ' ', TempAns);
			TempAns = ReplaceStuff('[Ans]', I[QNum][1][i][0], TempAns);
			AnsRows += TempAns;
		}
		Temp += AnsRows;
		Temp = ReplaceStuff('[QNumber]', QNum+1, Temp);
		Temp = ReplaceStuff('[QNum]', QNum, Temp);
	}
	else{
		var Temp = ReplaceStuff('[Question]', I[QNum][0], QRow);
		var AnsRows = '';
		for (var i=0; i<I[QNum][1].length; i++){
			TempAns = MARow;
			TempAns = ReplaceStuff('[ANum]', i, TempAns);
			TempAns = ReplaceStuff('[Correct]', I[QNum][1][i][2], TempAns);
			TempAns = ReplaceStuff('[Ans]', I[QNum][1][i][0], TempAns);
			AnsRows += TempAns;
		}
		Temp += AnsRows;
		Temp += CheckButton;
		Temp = ReplaceStuff('[QNumber]', QNum+1, Temp);
		Temp = ReplaceStuff('[QNum]', QNum, Temp);
	}
	return Temp;
}

function DisplayExercise(StuffToDisplay){
//Build the output string
	var OutString = '';
	OutString += '<html>';
	OutString += '<body  background="" bgcolor="#ddf7e4" text="#000033" link="#408080" vlink="#408080">';
	OutString += '<center><table border="0" cellpadding="5" cellspacing="1" width="85%">';
	OutString += TitleCode; 
	OutString += '<tr><td bgcolor="#ddf7e4" align="center">'; 
	OutString += '<font face="Geneva,Arial" size="-1">';
	OutString += StuffToDisplay;
	OutString += '</font></td></tr>';
	OutString += NavBar;
	OutString += '</table></center></body></html>';

	if (is.CRAPBrowser){OutString=ResolveAllURLs(OutString);}

//Write it to the frame
	BottomFrame.document.clear();
	BottomFrame.document.open();
	BottomFrame.document.write(OutString);
	BottomFrame.document.close();
}


function ShowAllQs(){
	var Output = '';
	for (var i=0; i<I.length-1; i++){
		Output = Output + BuildQuestion(i);
		Output = Output + '<tr><td colspan="4"><hr></hr></td></tr>';
	}
	Output = Output + BuildQuestion(I.length-1);
	Output = TableOpener + Output + TableCloser;
	DisplayExercise(Output);
}

function ShowQuestion(QNum){
//First, create the Q number readout at the top
	var Readout = (QNum+1) + '/' + I.length;
	while (Readout.length < 7){
		Readout = ' ' + Readout + ' ';
	}
	Readout = QButtonsOpener + Readout + QButtonsCloser;

	var Output = BuildQuestion(QNum);

	Output = TableOpener + Output + TableCloser;

	DisplayExercise(Readout + Output);

//Mark the answers already done
	for (i=0; i<Status[QNum][1].length; i++){
		if (Status[QNum][1][i] == 'R'){
			MarkAnswer(QNum,i,true)
		}
		if (Status[QNum][1][i] == 'W'){
			MarkAnswer(QNum,i,false)
		}
		if (Status[QNum][1][i] == 'C'){
			CheckCheckbox(QNum,i);
		}
	}
//Eliminate feedback from previous question
	if (EraseFeedback == true){
		WriteFeedback('');
	}
}

function CheckMulti(QNum){
	var TotWrong = 0;
	var Output = '';
	var TotAns = I[QNum][1].length;
	for (var i=TotAns-1; i>=0; i--){
//Find any incorrect choices

		var b = eval('BottomFrame.document.QForm.A_' + QNum + '_' + i);

		if (b != null){
//if it's wrong, count it
			if (b.checked == true){
				Status[QNum][1][i] = 'C';
			}
			else{
				Status[QNum][1][i] = 'U';
			}
			if (((b.checked == true) && (b.value == "0"))||((b.checked == false)&&(b.value == "1"))){
				TotWrong++;
			}
		}				
	}

	if (TotWrong == 0){
		Output = DefaultRight;
	}
	else{
		Output = DefaultWrong + '<br />' + (TotAns-TotWrong) + '/' + TotAns;
	}

//If you haven't tried the question before
	if (Status[QNum][0] == 0){
		if (TotWrong > 0){
			Status[QNum][2]++;
		}
		if (TotWrong == 0){
			Status[QNum][0] = 1;
//Calculate the score for this question as a floating-point fraction of 1
			Status[QNum][3] =  ((Status[QNum][1].length - Status[QNum][2]) - 1) / (Status[QNum][1].length - 1);
//If less than zero, set to zero
			if (Status[QNum][3] < 0){Status[QNum][3] = 0;}
		}
	}

//Check whether the quiz is finished
	var Finished = true;
	for (var i=0; i<Status.length; i++){
		if (Status[i][0] == 0){Finished = false;}
	}

//Calculate the score if needed
		
	if (Status[QNum][0] == 1){
		if ((Finished==true)||(ContinuousScoring==true)){
			var DoneQs = 0;
			var TotalScore = 0;
			for (var i=0; i<Status.length; i++){
				if (Status[i][0] == 1){
					DoneQs++;
					TotalScore += Status[i][3];
				}
			}
			Score = (Math.floor(100 * (TotalScore/DoneQs)));
			Output = Output + '<br />' + YourScoreIs + ' ' + Score + '%.';
		}

		if (Finished == true){
			EraseFeedback = false;
			var CFT = 0;
			for (i=0; i<I.length; i++){
				if (Status[i][2] == 0){
					CFT++;
				}
			}
		Output += '<br />' + CorrectFirstTime + CFT + '/' + I.length;

		}
	}

//Show the feedback
	if (Output.length > 0){
		WriteFeedback(Output);
	}

}

function CheckAnswer(QNum, ANum){
	var Output = I[QNum][1][ANum][1];

	if (Output==''){
		if (I[QNum][1][ANum][2] == 1){
			Output = DefaultRight;
		}
		else{
			Output = DefaultWrong;
		}
	}

//If it's not been previously answered correctly
	if (Status[QNum][0] == 0){
//If it's a correct answer
		if (I[QNum][1][ANum][2] == 1){
			Status[QNum][0] = 1;//Mark the Q as done
			Status[QNum][1][ANum] = 'R';
			MarkAnswer(QNum, ANum, true);
//Calculate the score for this question as a floating-point fraction of 1
			var PossibleWrongs = 0;
			for (var i=0; i<I[QNum][1].length; i++){
				if (I[QNum][1][i][2] == 0){
					PossibleWrongs++;
				}
			}

			if (PossibleWrongs == 0){PossibleWrongs = 1;}

			Status[QNum][3] = 1 - (Status[QNum][2]/PossibleWrongs);

//If less than zero, set to zero
			if (Status[QNum][3] < 0){Status[QNum][3] = 0;}
		}
		else{
			if (Status[QNum][1][ANum] != 'W'){
				Status[QNum][1][ANum] = 'W';
				MarkAnswer(QNum, ANum, false);
				Status[QNum][2]++; //increment wrong tries for this Q
			}
		}
	}

//Check whether the quiz is finished
	var Finished = true;
	for (var i=0; i<Status.length; i++){
		if (Status[i][0] == 0){Finished = false;}
	}

//Calculate the score if needed
		
	if (Status[QNum][0] == 1){
		if ((Finished==true)||(ContinuousScoring==true)){
			var DoneQs = 0;
			var TotalScore = 0;
			for (var i=0; i<Status.length; i++){
				if (Status[i][0] == 1){
					DoneQs++;
					TotalScore += Status[i][3];
				}
			}
			Score = (Math.floor(100 * (TotalScore/DoneQs)));
			Output = Output + '<br />' + YourScoreIs + ' ' + Score + '%.';
		}

		if (Finished == true){
			EraseFeedback = false;
			var CFT = 0;
			for (i=0; i<I.length; i++){
				if (Status[i][2] == 0){
					CFT++;
				}
			}
		Output += '<br />' + CorrectFirstTime + CFT + '/' + I.length;

		}
	}

//Show the feedback
	if (Output.length > 0){
		WriteFeedback(Output);
	}
}

function MarkAnswer(QNum, ANum, Right){
	var Mark = CorrectIndicator;
	if (Right == false){Mark = IncorrectIndicator;}

	if (eval('BottomFrame.document.QForm.FB_' + QNum + '_' + ANum) != null){
		eval('BottomFrame.document.QForm.FB_' + QNum + '_' + ANum).value = Mark;
	}
}

function CheckCheckbox(QNum, ANum){
	if (eval('BottomFrame.document.QForm.A_' + QNum + '_' + ANum) != null){
		eval('BottomFrame.document.QForm.A_' + QNum + '_' + ANum).checked = true;
	}
}







function Blank(){
	return '<html><body>&copy;Half-Baked Software. Loading...</body></html>';
}

//-->

//]]>

</script>


</head>
<!--<body>Fool those dumb ad-inserting ISPs</body>-->

<!--For full XHTML 1.0 compatibility, remove the border and framespacing attributes.
These are required for proper display in current browsers, but render the document incompatible. Then, you'll need to add the appropriate Document Type Declaration; use
the W3C XHTML 1 frameset DTD.-->


<frameset rows="25%,*" onload="StartUp()" framespacing="0" border="0">
	<frame src="javascript:parent.Blank()" frameborder="0" name="TopFrame"></frame>
	<frame src="javascript:parent.Blank()" frameborder="0" name="BottomFrame"></frame>
</frameset>




</html>
