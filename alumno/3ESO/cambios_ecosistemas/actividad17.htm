<head><meta name="author" content="Created with Hot Potatoes by Half-Baked Software, registered to Belen Sanchez."></meta><meta name="keywords" content="Hot Potatoes, Half-Baked Software, Windows, University of Victoria"></meta>
<title>
Actividad 17: &#191;Qu&#233; ocurre en el ecosistema urbano?
</title>

<script language="javascript" type="text/javascript">

//<![CDATA[

<!--

// BrowserCheck Object

function BrowserCheck() {
	var b = navigator.appName
//HBS extension
	this.mac = (navigator.appVersion.indexOf('Mac') != -1)
	if (b=="Netscape") this.b = "ns"
	else if (b=="Microsoft Internet Explorer") this.b = "ie"
	else this.b = b
	this.version = navigator.appVersion
	this.v = parseInt(this.version)
	this.ns = (this.b=="ns" && this.v>=4)
	this.ns4 = (this.b=="ns" && this.v==4)
	this.ns5 = (this.b=="ns" && this.v==5)
	this.ie = (this.b=="ie" && this.v>=4)
	this.ie4 = (this.version.indexOf('MSIE 4')>0)
	this.ie5 = (this.version.indexOf('MSIE 5')>0)
	this.min = (this.ns||this.ie)
	this.CRAPBrowser = (this.ie && this.mac); //Cannot Resolve Addresses Properly
}

is = new BrowserCheck();

var LocFolder = GetFolder(window.location.href);
function GetFolder(LocPath){
	LocPath = ReplaceStuff('\'','%27',LocPath);
	var i = LocPath.lastIndexOf('/');
	if (i<0){i=LocPath.lastIndexOf('\\')};
	return LocPath.substring(0,i);
}

function CombineURLs(InURL){
	var i = InURL.indexOf('../');
	var s = LocFolder;
	while (i >- 1){
		s = GetFolder(s);
		InURL = InURL.substring(3,InURL.length);
		i = InURL.indexOf('../');
	}
	return s + '/' + InURL;
}

x = new Array();
function ResolveURLs(InText,Attribute){
	x.length=0;
	var Temp = InText.toLowerCase();
	var z;
	var AttLen = Attribute.length + 2;
	var y=Temp.lastIndexOf(Attribute + '="');
	while (y>-1){
		var sLoc = y+AttLen;
		if (Temp.substring(sLoc,sLoc+5) != 'http:'){
			x[x.length]=new Array();
			x[x.length-1][0] = sLoc;
			z = Temp.indexOf('"',sLoc);
			x[x.length-1][1] = z;
			x[x.length-1][2] = InText.substring(sLoc,z);

		}
		Temp = Temp.substring(0,y);
		y=Temp.lastIndexOf(Attribute + '="');
	}
	for (var j=0; j<x.length; j++){
		InText = InText.substring(0,x[j][0]) + CombineURLs(x[j][2]) + InText.substring(x[j][1], InText.length);
	}
	return InText;
}

function ResolveAllURLs(Stuff){
	Stuff = ResolveURLs(Stuff,'href');
	Stuff = ResolveURLs(Stuff,'src');
	Stuff = ResolveURLs(Stuff,'parent.location');
	return Stuff;
}

var Feedback = '';
var Correct = '';
var Incorrect = ''; 
var GiveHint = '';
var CaseSensitive = false;
var YourScoreIs = 'Tu puntuaci&#243;n es:';
var Instructions = '';
var BuiltCloze = '';
var ExerciseSubtitle = '<br />Mira el dibujo siguiente y completa los cuadros que te presentamos a continuaci&#243;n: <br />';
var ExerciseTitle = 'Actividad 17: &#191;Qu&#233; ocurre en el ecosistema urbano?';
var FirstShow = true;
var ReadingURL = '';

var PreviousPage = history.length;







var NavBar='';


NavBar+='<tr><form name="NavButtons1" action=""><td bgcolor="#bbddbb" align="center">';
NavBar+='<font face="Geneva,Arial" size="-1">';

NavBar+='<input type="button" value="Volver" onclick="parent.GoBack()"></input>';



NavBar+='</font></td></form></tr>';
if (is.CRAPBrowser){NavBar=ResolveAllURLs(NavBar);}


var TitleCode = '<tr><td align="center" valign="middle" bgcolor="#e6ffe6">';
TitleCode += '<font size="+1" face="Geneva,Arial" color="#006666">' + ExerciseTitle + '</font><br />';
TitleCode += '<font size="-1" face="Geneva,Arial" color="#006666">' + ExerciseSubtitle + '<br />';

TitleCode += '</font></td></tr>';

var WordBox = '';

var ClozeOpener = '<table border="0" width="85%" cellpadding="10">';
ClozeOpener += '<tr><td valign="top" bgcolor="#d1e9d1">';
ClozeOpener += '<form name="Cloze" onsubmit="return false"><font face="Geneva,Arial" color="#000000">';

var ClozeCloser = '</font></form></td></tr>';

var Buttons = '<tr><td align="center" valign="top" bgcolor="#d1e9d1">';
Buttons += '<form name="Buttons"><font face="Geneva,Arial" color="#000000">';
Buttons += '<input type="button" value="&#161;Compruebalo!" onclick="parent.CheckAnswers()"></input>';


Buttons += '<input type="button" value="Pista" onclick="parent.ShowHint()"></input>';


Buttons += '</font></form></td></tr></table>';

var GapCode = '<input type="text" name="[strGapName]" size="[strGapSize]" onFocus="parent.TrackFocus([strItemNum])" value="[strValue]"></input>';
var ClueButton = '';

ClueButton = '<input type="button" value="[?]" onclick="parent.ShowClue([strItemNum])"></input>';


function GoBack(){
	var BackSkip = history.length - PreviousPage;
	if (BackSkip > 0){
		history.go((BackSkip+1)*-1);
	}
	else{
		parent.history.back();
	}
}




function BuildExercise(){
	var OutString = '';
	var ClozeStuff = '';

	for (var i=0; i<I.length; i++){

//Add the text
		ClozeStuff += Text[i];

//Create and add the gap
//If it's already right, then add it in bold:
		if (State[i][4] == 1){
			ClozeStuff += '<b>' + State[i][5] + '</b>';
		}
		
		else{
			GapLen = I[i][1][0][0].length;
			if (GapLen < 3){GapLen = 3;}
			Gap = ReplaceStuff('[strGapSize]', GapLen, GapCode);
			Gap = ReplaceStuff('[strGapName]', 'Gap' + i + '', Gap);
			Gap = ReplaceStuff('[strItemNum]', i + '', Gap);
			Gap = ReplaceStuff('[strValue]', State[i][5], Gap);
			ClozeStuff += Gap;	

//Create and add the clue button
			if (I[i][2].length > 0){
				Btn = ReplaceStuff('[strItemNum]', i + '', ClueButton);
				ClozeStuff += Btn;
			}
		}
	}

//Add the last bit
	if (Text.length > I.length){
		ClozeStuff += Text[Text.length-1];
	}

//Put the final pieces together
	OutString = ClozeOpener + ClozeStuff + ClozeCloser + Buttons;
	BuiltCloze = OutString;
}

function WriteFeedback(Feedback) {
	if (is.CRAPBrowser){Feedback=ResolveAllURLs(Feedback);}
//Build the output string
	var OutString = '';
	OutString += '<html>';
	OutString += '<body  background="" bgcolor="#e6ffe6" text="#000000" link="#0000ff" vlink="#0000cc">';
	OutString += '<center><table border="0" cellpadding="5" cellspacing="1" width="85%">';
	OutString += NavBar;
	if (Feedback.length>0){
		OutString += '<tr><td bgcolor="#d1e9d1" align="center">'; 
		OutString += '<font face="Geneva,Arial" size="-1" color="#000000">';
		OutString += Feedback;
		OutString += '</font></td></tr>'
	}
	OutString += '</table></center></body></html>';
//Write it to the frame
	TopFrame.document.clear();
	TopFrame.document.open();
	TopFrame.document.write(OutString);
	TopFrame.document.close();
}

function DisplayExercise(){
//Build the output string
	var OutString = '';
	OutString += '<html>';
	OutString += '<body  background="" bgcolor="#e6ffe6" text="#000000" link="#0000ff" vlink="#0000cc">';
	OutString += '<center><table border="0" cellpadding="5" cellspacing="1" width="85%">';
	OutString += TitleCode; 
	OutString += '<tr><td bgcolor="#d1e9d1" align="center">'; 
	if (WordBox.length > 0){
		OutString += WordBox;
	}
	OutString += '<font face="Geneva,Arial" size="-1">';
	OutString += BuiltCloze;
	OutString += '</font></td></tr>';
	OutString += NavBar;
	OutString += '</table></center></body></html>';

	if (is.CRAPBrowser){OutString=ResolveAllURLs(OutString);}

//Write it to the frame
	BottomFrame.document.clear();
	BottomFrame.document.open();
	BottomFrame.document.write(OutString);
	BottomFrame.document.close();
}

function ShowClue(ItemNum){
//alert(ItemNum);
	State[ItemNum][0] = 1;
	WriteFeedback(I[ItemNum][2]);
}

function SaveCurrentAnswers(){
	for (var i=0; i<I.length; i++){
		State[i][5] = GetGapValue(i);
	}
}

function RestoreCurrentAnswers(){
	for (var i=0; i<I.length; i++){
		SetGapValue(i, State[i][5]);
	}
}

var CurrentWord = 0;

function ReplaceStuff(Token, Replacement, InString){
	var i = InString.indexOf(Token);
	var FirstBit = '';
	var LastBit = '';
	while (i>-1){
		FirstBit = InString.substring(0, i);
		LastBit = InString.substring(i + Token.length, InString.length);	
		InString = FirstBit + Replacement + LastBit;
		i = InString.indexOf(Token);
	}
	return InString;
}

I = new Array();

I[0] = new Array();
I[0][1] = new Array();
I[0][1][0] = new Array();
I[0][1][0][0]='Electricidad';
I[0][1][1] = new Array();
I[0][1][1][0]='luz';
I[0][2]='';

I[1] = new Array();
I[1][1] = new Array();
I[1][1][0] = new Array();
I[1][1][0][0]='luz';
I[1][1][1] = new Array();
I[1][1][1][0]='electricidad';
I[1][2]='';

I[2] = new Array();
I[2][1] = new Array();
I[2][1][0] = new Array();
I[2][1][0][0]='Agua embalsada';
I[2][2]='';

I[3] = new Array();
I[3][1] = new Array();
I[3][1][0] = new Array();
I[3][1][0][0]='Nuclear';
I[3][2]='';

I[4] = new Array();
I[4][1] = new Array();
I[4][1][0] = new Array();
I[4][1][0][0]='Fisi\u00F3n de uranio';
I[4][2]='';

I[5] = new Array();
I[5][1] = new Array();
I[5][1][0] = new Array();
I[5][1][0][0]='Calor\u00EDfica';
I[5][2]='';

I[6] = new Array();
I[6][1] = new Array();
I[6][1][0] = new Array();
I[6][1][0][0]='Calor';
I[6][1][1] = new Array();
I[6][1][1][0]='luz';
I[6][2]='';

I[7] = new Array();
I[7][1] = new Array();
I[7][1][0] = new Array();
I[7][1][0][0]='luz';
I[7][1][1] = new Array();
I[7][1][1][0]='calor';
I[7][2]='';

I[8] = new Array();
I[8][1] = new Array();
I[8][1][0] = new Array();
I[8][1][0][0]='Qu\u00EDmica';
I[8][2]='';

I[9] = new Array();
I[9][1] = new Array();
I[9][1][0] = new Array();
I[9][1][0][0]='Petr\u00F3leo';
I[9][2]='';

I[10] = new Array();
I[10][1] = new Array();
I[10][1][0] = new Array();
I[10][1][0][0]='Solar';
I[10][2]='';

I[11] = new Array();
I[11][1] = new Array();
I[11][1][0] = new Array();
I[11][1][0][0]='Qu\u00EDmica';
I[11][2]='';

I[12] = new Array();
I[12][1] = new Array();
I[12][1][0] = new Array();
I[12][1][0][0]='Animales';
I[12][1][1] = new Array();
I[12][1][1][0]='vegetales';
I[12][1][2] = new Array();
I[12][1][2][0]='animal';
I[12][1][3] = new Array();
I[12][1][3][0]='vegetal';
I[12][2]='';

I[13] = new Array();
I[13][1] = new Array();
I[13][1][0] = new Array();
I[13][1][0][0]='vegetales';
I[13][1][1] = new Array();
I[13][1][1][0]='animales';
I[13][1][2] = new Array();
I[13][1][2][0]='vegetal';
I[13][1][3] = new Array();
I[13][1][3][0]='animal';
I[13][2]='';

I[14] = new Array();
I[14][1] = new Array();
I[14][1][0] = new Array();
I[14][1][0][0]='Riego';
I[14][1][1] = new Array();
I[14][1][1][0]='bebidas';
I[14][1][2] = new Array();
I[14][1][2][0]='bebida';
I[14][2]='';

I[15] = new Array();
I[15][1] = new Array();
I[15][1][0] = new Array();
I[15][1][0][0]='bebidas';
I[15][1][1] = new Array();
I[15][1][1][0]='bebida';
I[15][1][2] = new Array();
I[15][1][2][0]='riego';
I[15][2]='';

I[16] = new Array();
I[16][1] = new Array();
I[16][1][0] = new Array();
I[16][1][0][0]='uso dom\u00E9stico';
I[16][2]='';

I[17] = new Array();
I[17][1] = new Array();
I[17][1][0] = new Array();
I[17][1][0][0]='Embalses';
I[17][2]='';

I[18] = new Array();
I[18][1] = new Array();
I[18][1][0] = new Array();
I[18][1][0][0]='Productos qu\u00EDmicos derivados';
I[18][1][1] = new Array();
I[18][1][1][0]='derivados';
I[18][1][2] = new Array();
I[18][1][2][0]='productos derivados';
I[18][1][3] = new Array();
I[18][1][3][0]='qu\u00EDmicos derivados';
I[18][2]='';

I[19] = new Array();
I[19][1] = new Array();
I[19][1][0] = new Array();
I[19][1][0][0]='Detergentes';
I[19][1][1] = new Array();
I[19][1][1][0]='Perfumes';
I[19][1][2] = new Array();
I[19][1][2][0]='detergente';
I[19][1][3] = new Array();
I[19][1][3][0]='perfume';
I[19][1][4] = new Array();
I[19][1][4][0]='ropa';
I[19][1][5] = new Array();
I[19][1][5][0]='ropas';
I[19][1][6] = new Array();
I[19][1][6][0]='utensilios';
I[19][2]='';

I[20] = new Array();
I[20][1] = new Array();
I[20][1][0] = new Array();
I[20][1][0][0]='perfumes';
I[20][1][1] = new Array();
I[20][1][1][0]='detergentes';
I[20][1][2] = new Array();
I[20][1][2][0]='perfume';
I[20][1][3] = new Array();
I[20][1][3][0]='detergente';
I[20][1][4] = new Array();
I[20][1][4][0]='ropa';
I[20][1][5] = new Array();
I[20][1][5][0]='ropas';
I[20][1][6] = new Array();
I[20][1][6][0]='utensilios';
I[20][2]='';

I[21] = new Array();
I[21][1] = new Array();
I[21][1][0] = new Array();
I[21][1][0][0]='ropa';
I[21][1][1] = new Array();
I[21][1][1][0]='ropas';
I[21][1][2] = new Array();
I[21][1][2][0]='utensilios';
I[21][1][3] = new Array();
I[21][1][3][0]='detergentes';
I[21][1][4] = new Array();
I[21][1][4][0]='perfumes';
I[21][2]='';

I[22] = new Array();
I[22][1] = new Array();
I[22][1][0] = new Array();
I[22][1][0][0]='utensilios';
I[22][1][1] = new Array();
I[22][1][1][0]='ropa';
I[22][1][2] = new Array();
I[22][1][2][0]='ropas';
I[22][1][3] = new Array();
I[22][1][3][0]='detergente';
I[22][1][4] = new Array();
I[22][1][4][0]='detergentes';
I[22][1][5] = new Array();
I[22][1][5][0]='perfume';
I[22][1][6] = new Array();
I[22][1][6][0]='perfumes';
I[22][2]='';

I[23] = new Array();
I[23][1] = new Array();
I[23][1][0] = new Array();
I[23][1][0][0]='Papeler\u00EDa';
I[23][1][1] = new Array();
I[23][1][1][0]='Libros';
I[23][1][2] = new Array();
I[23][1][2][0]='embalage';
I[23][1][3] = new Array();
I[23][1][3][0]='embalages';
I[23][1][4] = new Array();
I[23][1][4][0]='construcci\u00F3n';
I[23][1][5] = new Array();
I[23][1][5][0]='papel';
I[23][1][6] = new Array();
I[23][1][6][0]='papeles';
I[23][2]='';

I[24] = new Array();
I[24][1] = new Array();
I[24][1][0] = new Array();
I[24][1][0][0]='libros';
I[24][1][1] = new Array();
I[24][1][1][0]='papeler\u00EDa';
I[24][1][2] = new Array();
I[24][1][2][0]='embalage';
I[24][1][3] = new Array();
I[24][1][3][0]='embalages';
I[24][1][4] = new Array();
I[24][1][4][0]='construcci\u00F3n';
I[24][2]='';

I[25] = new Array();
I[25][1] = new Array();
I[25][1][0] = new Array();
I[25][1][0][0]='embalages';
I[25][1][1] = new Array();
I[25][1][1][0]='papeler\u00EDa';
I[25][1][2] = new Array();
I[25][1][2][0]='libros';
I[25][2]='';

I[26] = new Array();
I[26][1] = new Array();
I[26][1][0] = new Array();
I[26][1][0][0]='construcci\u00F3n';
I[26][1][1] = new Array();
I[26][1][1][0]='embalage';
I[26][1][2] = new Array();
I[26][1][2][0]='embalages';
I[26][1][3] = new Array();
I[26][1][3][0]='papeler\u00EDa';
I[26][1][4] = new Array();
I[26][1][4][0]='libros';
I[26][2]='';

I[27] = new Array();
I[27][1] = new Array();
I[27][1][0] = new Array();
I[27][1][0][0]='Madera';
I[27][2]='';

I[28] = new Array();
I[28][1] = new Array();
I[28][1][0] = new Array();
I[28][1][0][0]='Alimentos';
I[28][2]='';

I[29] = new Array();
I[29][1] = new Array();
I[29][1][0] = new Array();
I[29][1][0][0]='Carne';
I[29][1][1] = new Array();
I[29][1][1][0]='carnes';
I[29][1][2] = new Array();
I[29][1][2][0]='vegetal';
I[29][1][3] = new Array();
I[29][1][3][0]='vegetales';
I[29][2]='';

I[30] = new Array();
I[30][1] = new Array();
I[30][1][0] = new Array();
I[30][1][0][0]='vegetales';
I[30][1][1] = new Array();
I[30][1][1][0]='vegetal';
I[30][1][2] = new Array();
I[30][1][2][0]='carne';
I[30][1][3] = new Array();
I[30][1][3][0]='carnes';
I[30][2]='';

I[31] = new Array();
I[31][1] = new Array();
I[31][1][0] = new Array();
I[31][1][0][0]='Minerales';
I[31][2]='';

I[32] = new Array();
I[32][1] = new Array();
I[32][1][0] = new Array();
I[32][1][0][0]='Construcci\u00F3n';
I[32][2]='';

I[33] = new Array();
I[33][1] = new Array();
I[33][1][0] = new Array();
I[33][1][0][0]='Aguas sucias';
I[33][1][1] = new Array();
I[33][1][1][0]='Agua sucia';
I[33][2]='';

I[34] = new Array();
I[34][1] = new Array();
I[34][1][0] = new Array();
I[34][1][0][0]='R\u00EDos';
I[34][1][1] = new Array();
I[34][1][1][0]='Mares';
I[34][1][2] = new Array();
I[34][1][2][0]='rio';
I[34][1][3] = new Array();
I[34][1][3][0]='mar';
I[34][2]='';

I[35] = new Array();
I[35][1] = new Array();
I[35][1][0] = new Array();
I[35][1][0][0]='mares';
I[35][1][1] = new Array();
I[35][1][1][0]='rios';
I[35][1][2] = new Array();
I[35][1][2][0]='rio';
I[35][1][3] = new Array();
I[35][1][3][0]='mar';
I[35][2]='';

I[36] = new Array();
I[36][1] = new Array();
I[36][1][0] = new Array();
I[36][1][0][0]='Gases contaminantes';
I[36][1][1] = new Array();
I[36][1][1][0]='Gas contaminante';
I[36][2]='';

I[37] = new Array();
I[37][1] = new Array();
I[37][1][0] = new Array();
I[37][1][0][0]='Atm\u00F3sfera';
I[37][2]='';

I[38] = new Array();
I[38][1] = new Array();
I[38][1][0] = new Array();
I[38][1][0][0]='Residuos S\u00F3lidos Urbanos';
I[38][1][1] = new Array();
I[38][1][1][0]='residuos urbanos';
I[38][1][2] = new Array();
I[38][1][2][0]='s\u00F3lidos urbanos';
I[38][2]='';

I[39] = new Array();
I[39][1] = new Array();
I[39][1][0] = new Array();
I[39][1][0][0]='Suelo';
I[39][1][1] = new Array();
I[39][1][1][0]='Agua';
I[39][2]='';

I[40] = new Array();
I[40][1] = new Array();
I[40][1][0] = new Array();
I[40][1][0][0]='agua';
I[40][1][1] = new Array();
I[40][1][1][0]='suelo';
I[40][2]='';

I[41] = new Array();
I[41][1] = new Array();
I[41][1][0] = new Array();
I[41][1][0][0]='Depuradoras';
I[41][1][1] = new Array();
I[41][1][1][0]='Supresi\u00F3n del uso de contaminantes';
I[41][1][2] = new Array();
I[41][1][2][0]='Sepuradora';
I[41][1][3] = new Array();
I[41][1][3][0]='Disminuci\u00F3n del uso de contaminantes';
I[41][1][4] = new Array();
I[41][1][4][0]='Disminuci\u00F3n del uso de productos contaminantes';
I[41][1][5] = new Array();
I[41][1][5][0]='supresi\u00F3n del uso de productos contaminantes';
I[41][2]='';

I[42] = new Array();
I[42][1] = new Array();
I[42][1][0] = new Array();
I[42][1][0][0]='supresi\u00F3n del uso de productos contaminantes';
I[42][1][1] = new Array();
I[42][1][1][0]='depuradoras';
I[42][1][2] = new Array();
I[42][1][2][0]='depuradora';
I[42][1][3] = new Array();
I[42][1][3][0]='disminuci\u00F3n del uso de productos contaminantes';
I[42][1][4] = new Array();
I[42][1][4][0]='supresi\u00F3n del uso de contaminantes';
I[42][1][5] = new Array();
I[42][1][5][0]='disminuci\u00F3n del uso de contaminantes';
I[42][2]='';

I[43] = new Array();
I[43][1] = new Array();
I[43][1][0] = new Array();
I[43][1][0][0]='Supresi\u00F3n de carburantes contaminantes';
I[43][1][1] = new Array();
I[43][1][1][0]='filtros en las salidas de humos';
I[43][1][2] = new Array();
I[43][1][2][0]='restricci\u00F3n en el uso de veh\u00EDculos';
I[43][1][3] = new Array();
I[43][1][3][0]='restricci\u00F3n de aires acondicionados';
I[43][1][4] = new Array();
I[43][1][4][0]='restricci\u00F3n en el uso de aires acondicionados';
I[43][1][5] = new Array();
I[43][1][5][0]='restricci\u00F3n en el uso de calefacciones';
I[43][1][6] = new Array();
I[43][1][6][0]='restricci\u00F3n de calefacciones';
I[43][2]='';

I[44] = new Array();
I[44][1] = new Array();
I[44][1][0] = new Array();
I[44][1][0][0]='filtros en las salidas de humos';
I[44][1][1] = new Array();
I[44][1][1][0]='supresi\u00F3n de carburantes contaminantes';
I[44][1][2] = new Array();
I[44][1][2][0]='filtros en las salidas de humos';
I[44][1][3] = new Array();
I[44][1][3][0]='restricci\u00F3n en el uso de veh\u00EDculos';
I[44][1][4] = new Array();
I[44][1][4][0]='restricci\u00F3n en el uso de aires acondicionados';
I[44][1][5] = new Array();
I[44][1][5][0]='restricci\u00F3n en el uso de aires acondicionados y calefacciones';
I[44][1][6] = new Array();
I[44][1][6][0]='restricci\u00F3n en el uso de aires acondicionados';
I[44][1][7] = new Array();
I[44][1][7][0]='restricci\u00F3n en el uso de calefacciones';
I[44][2]='';

I[45] = new Array();
I[45][1] = new Array();
I[45][1][0] = new Array();
I[45][1][0][0]='restricci\u00F3n en el uso de veh\u00EDculos';
I[45][1][1] = new Array();
I[45][1][1][0]='restricci\u00F3n en el uso de calefacciones';
I[45][1][2] = new Array();
I[45][1][2][0]='restricci\u00F3n en el uso de aires acondicionados';
I[45][2]='';

I[46] = new Array();
I[46][1] = new Array();
I[46][1][0] = new Array();
I[46][1][0][0]='aires acondicionados';
I[46][1][1] = new Array();
I[46][1][1][0]='veh\u00EDculos';
I[46][1][2] = new Array();
I[46][1][2][0]='calefacciones';
I[46][2]='';

I[47] = new Array();
I[47][1] = new Array();
I[47][1][0] = new Array();
I[47][1][0][0]='calefacciones';
I[47][1][1] = new Array();
I[47][1][1][0]='veh\u00EDculos';
I[47][1][2] = new Array();
I[47][1][2][0]='aires acondicionados';
I[47][2]='';

I[48] = new Array();
I[48][1] = new Array();
I[48][1][0] = new Array();
I[48][1][0][0]='Incineradoras';
I[48][1][1] = new Array();
I[48][1][1][0]='vertederos controlados';
I[48][2]='';

I[49] = new Array();
I[49][1] = new Array();
I[49][1][0] = new Array();
I[49][1][0][0]='vertederos controlados';
I[49][1][1] = new Array();
I[49][1][1][0]='incineradoras';
I[49][2]='';

I[50] = new Array();
I[50][1] = new Array();
I[50][1][0] = new Array();
I[50][1][0][0]='reciclaje de productos';
I[50][2]='';

I[51] = new Array();
I[51][1] = new Array();
I[51][1][0] = new Array();
I[51][1][0][0]='vidrio';
I[51][1][1] = new Array();
I[51][1][1][0]='papel';
I[51][1][2] = new Array();
I[51][1][2][0]='materia org\u00E1nica';
I[51][2]='';

I[52] = new Array();
I[52][1] = new Array();
I[52][1][0] = new Array();
I[52][1][0][0]='papel';
I[52][1][1] = new Array();
I[52][1][1][0]='vidrio';
I[52][1][2] = new Array();
I[52][1][2][0]='materia org\u00E1nica';
I[52][2]='';

I[53] = new Array();
I[53][1] = new Array();
I[53][1][0] = new Array();
I[53][1][0][0]='materia org\u00E1nica';
I[53][1][1] = new Array();
I[53][1][1][0]='vidrio';
I[53][1][2] = new Array();
I[53][1][2][0]='papel';
I[53][2]='';


Text = new Array();
Text[0]='<img src="image/actividad17/actividad17.gif" alt="actividad17.gif" width="500" height="363" border="0"></img><br /><br />a.- \u00BFDe qu\u00E9 formas de energ\u00EDa se abastece la ciudad, en qu\u00E9 las usa y cu\u00E1l es su origen?<br /><br /><table border="4" cellpadding="2" cellspacing="2" width="100%"><tr><td>ENERG\u00CDA</td><td>USO</td><td>ORIGEN</td></tr><tr><td>Hidra\u00FAlica</td><td>';
Text[1]=' y ';
Text[2]='</td><td>';
Text[3]='</td></tr><tr><td>';
Text[4]='</td><td>Electricidad y luz</td><td>';
Text[5]='</td></tr><tr><td>';
Text[6]='</td><td>';
Text[7]=' y ';
Text[8]='</td><td>Carb\u00F3n</td></tr><tr><td>';
Text[9]='</td><td>Gas, materias primas y combustibles</td><td>';
Text[10]='</td></tr><tr><td>';
Text[11]='</td><td>Luz y calor</td><td>Sol</td></tr><tr><td>';
Text[12]='</td><td>Alimentos</td><td>';
Text[13]=' y ';
Text[14]='</td></tr></table>		<br /><br />b.- Mira el dibujo y piensa, la materia de la que se abastece la ciudad, su uso y su procedencia:<br /><br /><table border="4" cellpadding="2" cellspacing="2" width="100%"><tr><td>MATERIAL</td><td>USO</td><td>PROCEDENCIA</td></tr><tr><td>Agua</td><td>';
Text[15]=', ';
Text[16]=', ';
Text[17]='</td><td>';
Text[18]='</td></tr><tr><td>';
Text[19]='</td><td>';
Text[20]=', ';
Text[21]=', ';
Text[22]=', ';
Text[23]='</td><td>Petr\u00F3leo</td></tr><tr><td>Papel, cart\u00F3n</td><td>';
Text[24]=', ';
Text[25]=', ';
Text[26]=', ';
Text[27]='</td><td>';
Text[28]='</td></tr><tr><td>';
Text[29]='</td><td>Alimentaci\u00F3n</td><td>';
Text[30]=' y ';
Text[31]='</td></tr><tr><td>';
Text[32]='</td><td>';
Text[33]='</td><td>Minas</td></tr></table>	<br />	<br />c.- \u00BFQu\u00E9 desechos produce la ciudad y a d\u00F3nde van?<br /><br /><table border="4" cellpadding="2" cellspacing="2" width="100%"><tr><td>DESECHOS</td><td>D\u00D3NDE VAN</td></tr><tr><td>';
Text[34]='</td><td>';
Text[35]=' y ';
Text[36]='</td></tr><tr><td>';
Text[37]='</td><td>';
Text[38]='</td></tr><tr><td>';
Text[39]='</td><td>';
Text[40]=' y ';
Text[41]='</td></tr></table>		<br />	<br />d.- Posibles soluciones a los residuos contaminantes:<br /><br /><table border="4" cellpadding="2" cellspacing="2" width="100%"><tr><td>DESECHOS</td><td>POSIBLE SOLUCI\u00D3N</td></tr><tr><td>Aguas sucias</td><td>';
Text[42]=', ';
Text[43]='.</td></tr><tr><td>Gases contaminantes</td><td>';
Text[44]=', ';
Text[45]=', ';
Text[46]=', ';
Text[47]=' y ';
Text[48]='.</td></tr><tr><td>Residuos S\u00F3lidos Urbanos</td><td>';
Text[49]=', ';
Text[50]=', ';
Text[51]=': ';
Text[52]=', ';
Text[53]=' y ';
Text[54]='.</td></tr></table>	<br />';


State = new Array();

function StartUp(){

	var i = 0;



	State.length = 0;
	for (i=0; i<I.length; i++){
		State[i] = new Array();
		State[i][0] = 0; // clue asked for or not
		State[i][1] = 0; // hints asked for, or penalties for checking a wrong answer
		State[i][2] = 0; // length of answer matched
		State[i][3] = 0; // score for this item
		State[i][4] = 0; // already answered correctly 
		State[i][5] = ''; // answer entered in text box (right or not)
	}
	BuildExercise();
	WriteFeedback(Instructions);
	DisplayExercise();





}

function TrimString(InString){
        var x = 0

        if (InString.length != 0) {
                while ((InString.charAt(InString.length - 1) == '\u0020') || (InString.charAt(InString.length - 1) == '\u000A') || (InString.charAt(InString.length - 1) == '\u000D')){
                        InString = InString.substring(0, InString.length - 1)
                }

                while ((InString.charAt(0) == '\u0020') || (InString.charAt(0) == '\u000A') || (InString.charAt(0) == '\u000D')){
                        InString = InString.substring(1, InString.length)
                }

                while (InString.indexOf('  ') != -1) {
                        x = InString.indexOf('  ')
                        InString = InString.substring(0, x) + InString.substring(x+1, InString.length)
                 }

                return InString;
        }

        else {
                return '';
        }

}

function CheckAnswers(){

	SaveCurrentAnswers();
	var AllCorrect = 1;

//Check each answer
	for (var i = 0; i< I.length; i++){

		if (State[i][4] != 1){
//If it's right, calculate its score
			if (CheckAnswer(i, true) > -1){
				var TotalChars = GetGapValue(i).length;
				State[i][3] = (TotalChars-State[i][1])/TotalChars;
				if (State[i][0] > 0){State[i][3] = State[i][3]/2;}
				if (State[i][3]<0){State[i][3] = 0;}
				State[i][4] = 1;
			}
			else{
//Otherwise, add zero to the array and increment the hints for this item, as a penalty
				State[i][1]++;
				State[i][3] = 0;

//then set the flag
				AllCorrect = 0;
			}
		}
	}

//Calculate the total score
	var TotalScore = 0;
	for (i=0; i<State.length; i++){
		TotalScore += State[i][3];
	}
	TotalScore = Math.floor((TotalScore * 100)/I.length);

//Compile the output
	Output = '';

	if (AllCorrect == 1){
		Output = Correct + '<br />';
	}

	Output += YourScoreIs + ' ' + TotalScore + '%.<br />';
	if (AllCorrect == 0){
		Output += '<br />' + Incorrect;
	}
	BuildExercise();
	WriteFeedback(Output);



	DisplayExercise();
	RestoreCurrentAnswers();
}


function TrackFocus(BoxNumber){
	CurrentWord = BoxNumber;
}

function CheckBeginning(Guess, Answer){
	var OutString = '';
	var i = 0;
	var UpperGuess = '';
	var UpperAnswer = '';

	if (CaseSensitive == false) {
		UpperGuess = Guess.toUpperCase();
		UpperAnswer = Answer.toUpperCase();
	}
	else {
		UpperGuess = Guess;
		UpperAnswer = Answer;
	}

	while (UpperGuess.charAt(i) == UpperAnswer.charAt(i)) {
		OutString += Guess.charAt(i);
		i++;
	}
	OutString += Answer.charAt(i);
	return OutString;
}

function FindLongest(InArray){
	if (InArray.length < 1){return -1;}

	var Longest = 0;
	for (var i=1; i<InArray.length; i++){
		if (InArray[i].length > InArray[Longest].length){
			Longest = i;
		}
	}
	return Longest;
}

function GetGapValue(GNum){
	var RetVal = '';
	if ((GNum<0)||(GNum>=I.length)){return RetVal;}
	if (eval('BottomFrame.document.Cloze.Gap' + GNum) != null){
		RetVal = eval('BottomFrame.document.Cloze.Gap' + GNum).value;
		RetVal = TrimString(RetVal);
	}
	else{
		RetVal = State[GNum][5];
	}
	return RetVal;
}

function SetGapValue(GNum, Val){
	if ((GNum<0)||(GNum>=I.length)){return;}
	if (eval('BottomFrame.document.Cloze.Gap' + GNum) != null){
		eval('BottomFrame.document.Cloze.Gap' + GNum).value = Val;
	}
}

function FindCurrent() {
	var x = 0;
	FoundCurrent = -1;

//Test the current word:
//If it's state is not set to already correct, check the word.
	if (State[CurrentWord][4] != 1){
		if (CheckAnswer(CurrentWord, false) < 0){
			return CurrentWord;
		}
	}
	
	x=CurrentWord + 1;
	while (x<I.length){
		if (State[x][4] != 1){
			if (CheckAnswer(x, false) < 0){
				return x;
			}
		}
	x++;	
	}

	x = 0;
	while (x<CurrentWord){
		if (State[x][4] != 1){
			if (CheckAnswer(x, false) < 0){
				return x;
			}
		}
	x++;	
	}
	return FoundCurrent;
}

function CheckAnswer(GapNum, MarkAnswer){
	var Guess = GetGapValue(GapNum);
	var UpperGuess = '';
	var UpperAnswer = '';
	if (CaseSensitive == false){
		UpperGuess = Guess.toUpperCase();
	}
	else{
		UpperGuess = Guess;
	}
	var Match = -1;
	for (var i = 0; i<I[GapNum][1].length; i++){
		if (CaseSensitive == false){
			UpperAnswer = I[GapNum][1][i][0].toUpperCase();
		}
		else{
			UpperAnswer = I[GapNum][1][i][0];
		}
		if (TrimString(UpperGuess) == UpperAnswer){
			Match = i;
			if (MarkAnswer == true){
				State[GapNum][4] = 1;
			}
			State[GapNum][5] = Guess;
		}
	}
	return Match;
}

function GetHint(GapNum){
	Guess = GetGapValue(GapNum);

	if (CheckAnswer(GapNum, false) > -1){return ''}
	RightBits = new Array();
	for (var i=0; i<I[GapNum][1].length; i++){
		RightBits[i] = CheckBeginning(Guess, I[GapNum][1][i][0]);
	}
	var RightOne = FindLongest(RightBits);
	var Result = I[GapNum][1][RightOne][0].substring(0,RightBits[RightOne].length);
//Add another char if the last one is a space
	if (Result.charAt(Result.length-1) == ' '){
		Result = I[GapNum][1][RightOne][0].substring(0,RightBits[RightOne].length+1);
	}
	return Result;
}

function ShowHint(){
	var CurrGap = FindCurrent();
	if (CurrGap < 0){return;}

	var HintString = GetHint(CurrGap);

	if (HintString.length > 0){
		SetGapValue(CurrGap, HintString);
		State[CurrGap][1] = State[CurrGap][1] + 1;
	}
	WriteFeedback(GiveHint);
}




function Blank(){
	return '<html><body>&copy;Half-Baked Software. Loading...</body></html>';
}

//-->

//]]>

</script>


</head>
<!--<body>Fool those dumb ad-inserting ISPs</body>-->

<!--For full XHTML 1.0 compatibility, remove the border and framespacing attributes.
These are required for proper display in current browsers, but render the document incompatible. Then, you'll need to add the appropriate Document Type Declaration; use
the W3C XHTML 1 frameset DTD.-->


<frameset rows="25%,*" framespacing="0" border="0" onload="StartUp()">
	<frame src="javascript:parent.Blank()" frameborder="0" name="TopFrame"></frame>
	<frame src="javascript:parent.Blank()" frameborder="0" name="BottomFrame"></frame>
</frameset>




</html>
