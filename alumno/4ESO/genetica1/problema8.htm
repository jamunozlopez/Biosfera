<HTML>
<HEAD><meta name="author" content="Created with Hot Potatoes by Half-Baked Software, registered to Alejandro Romero."></meta><meta name="keywords" content="Hot Potatoes, Half-Baked Software, Windows, University of Victoria"></meta>
<TITLE>&#191;C&oacute;mo ser&aacute; la descendencia si cogemos dos plantas de frutos verdes y flores rosas del problema n&uacute;mero siete y las cruzamos entre s&iacute;?. </TITLE>

<!--<BODY>Fool those dumb ad-inserting ISPs</BODY>-->
<body bgcolor="e6ffe6">
<SCRIPT LANGUAGE="JavaScript">

// BrowserCheck Object

function BrowserCheck() {
	var b = navigator.appName
//HBS extension
	this.mac = (navigator.appVersion.indexOf('Mac') != -1)
	if (b=="Netscape") this.b = "ns"
	else if (b=="Microsoft Internet Explorer") this.b = "ie"
	else this.b = b
	this.version = navigator.appVersion
	this.v = parseInt(this.version)
	this.ns = (this.b=="ns" && this.v>=4)
	this.ns4 = (this.b=="ns" && this.v==4)
	this.ns5 = (this.b=="ns" && this.v==5)
	this.ie = (this.b=="ie" && this.v>=4)
	this.ie4 = (this.version.indexOf('MSIE 4')>0)
	this.ie5 = (this.version.indexOf('MSIE 5')>0)
	this.min = (this.ns||this.ie)
}

is = new BrowserCheck()

var CanShow = true;
if ((is.v<4)||(is.ns5)){CanShow=false;}
if ((is.mac==true)&&((is.ie4==true)||(is.ie5==true))){CanShow=false;}
if (CanShow==false){
	alert('WARNING: Your browser version cannot show this page.');
	history.back();
}

function PageDim(){
//Get the page width and height
	this.W = 600;
	this.H = 400;
	if (is.ns) this.W = window.innerWidth;
	if (is.ie) this.W = document.body.clientWidth;
	if (is.ns) this.H = window.innerHeight;
	if (is.ie) this.H = document.body.clientHeight;
}

var Correct = '&#161;Bien hecho!';
var Incorrect = 'Incorrecto. Intenta otra vez.';
var GiveHint = 'Una letra ha sido a&ntilde;adida.';
var CaseSensitive = true;
var YourScoreIs = 'La puntuaci&oacute;n es:';

var DivWidth = 400; //default value
var FeedbackWidth = 200; //default
var OKCaption = 'OK'; //
var PopupBGColor = '#e6ffe6';
var ExBGColor = '#E6FFE6'; //'#DDDDDD';
var PageBGColor = '#E6FFE6'; //'#FFFFFF';
var NavBarColor = '#E6FFE6'; //'#000000';
var TextColor = '#000000';
var CorrectFirstTime = '[strCorrectFirstTime]'; //'Questions answered correctly at first try: ';
var ExerciseTitle = '&#191;C&oacute;mo ser&aacute; la descendencia si cogemos dos plantas de frutos verdes y flores rosas del problema n&uacute;mero siete y las cruzamos entre s&iacute;?. '; //'Test exercise';
var ExerciseSubtitle = ''; //'Gap-Fill';
var Instructions = '<br />'; //'';
var CurrentWord = 0; //gap which is currently being worked on

var NavBarCode = '<TABLE BORDER="0" WIDTH="[DivWidth]" CELLPADDING="2">';
NavBarCode += '<FORM NAME="NavButtons"><TR><TD ALIGN="CENTER" VALIGN="MIDDLE">';
NavBarCode += '<FONT FACE="Geneva,Arial" SIZE="-1">';


NavBarCode += '<INPUT TYPE="button" VALUE="Volver" onClick="history.back()">';

NavBarCode +='<input type="button" value="¿Cómo resolver problemas?" onclick=\'parent.location="http://biosfera.cnice.mecd.es/alumno/4ESO/genetica1/resolver_problemas.htm"\'></input>';


NavBarCode +='<input type="button" value="Repasar teor&#237;a" onclick=\'parent.location="http://biosfera.cnice.mecd.es/alumno/4ESO/genetica1/contenidos10.htm"\'></input>';



NavBarCode += '</FONT></TD></TR></FORM></TABLE>';

var TitleCode = '<TABLE BORDER="0" WIDTH="[DivWidth]" CELLPADDING="10">';
TitleCode += '<TR><TD ALIGN="CENTER" VALIGN="MIDDLE" BGCOLOR="#E6FFE6">';
TitleCode += '<FONT SIZE="+1" FACE="Geneva,Arial" COLOR="#000000">' + ExerciseTitle + '</FONT><BR>';
TitleCode += '<FONT SIZE="-1" FACE="Geneva,Arial" COLOR="#000000">' + ExerciseSubtitle + '<BR>';
if (Instructions != ''){
	TitleCode += Instructions + '<BR>';
}



TitleCode += '</FONT></TD></TR></TABLE>';

var GapCode = '<INPUT TYPE="TEXT" NAME="[strGapName]" SIZE="[strGapSize]" onFocus="TrackFocus([strItemNum])">';
var ClueButton = '';


var ClozeOpener = '<TABLE BORDER="0" WIDTH="[DivWidth]" CELLPADDING="10">';
ClozeOpener += '<TR><TD VALIGN="TOP" BGCOLOR="';
ClozeOpener += ExBGColor;
ClozeOpener += '"><FORM NAME="Cloze"><FONT FACE="Geneva,Arial" COLOR="#000000">';



var ClozeCloser = '</FONT></FORM></TD></TR>';

var Buttons = '<TR><TD ALIGN="CENTER" VALIGN="TOP" BGCOLOR="';
Buttons += ExBGColor;
Buttons += '"><FORM NAME="Buttons"><FONT FACE="Geneva,Arial" COLOR="#000000">';
Buttons += '<INPUT TYPE="BUTTON" VALUE="Comprobar" onClick="CheckAnswers()">';


Buttons += '<INPUT TYPE="BUTTON" VALUE="Pista" onClick="ShowHint()">';


Buttons += '</FONT></FORM></TD></TR></TABLE>';

// Dynamic Layer Object

// sophisticated layer/element targeting and animation object which provides the core 
// functionality needed in most DHTML applications
// 19990604

// Copyright (C) 1999 Dan Steinman
// Distributed under the terms of the GNU Library General Public License
// Available at http://www.dansteinman.com/dynduo/


function DynLayer(id,nestref,frame) {
	if (!DynLayer.set && !frame) DynLayerInit()
	this.frame = frame || self
	if (is.ns) {
		if (is.ns4) {
			if (!frame) {
				if (!nestref) var nestref = DynLayer.nestRefArray[id]
				if (!DynLayerTest(id,nestref)) return
				this.css = (nestref)? eval("document."+nestref+".document."+id) : document.layers[id]
			}
			else this.css = (nestref)? eval("frame.document."+nestref+".document."+id) : frame.document.layers[id]
			this.elm = this.event = this.css
			this.doc = this.css.document
		}

		if (is.ns5) {
			this.elm = document.getElementById(id)
			this.css = this.elm.style
			this.doc = document
		}

		this.x = this.css.left
		this.y = this.css.top
		this.w = this.css.clip.width
		this.h = this.css.clip.height
	}

	else if (is.ie) {
		this.elm = this.event = this.frame.document.all[id]
		this.css = this.frame.document.all[id].style
		this.doc = document
		this.x = this.elm.offsetLeft
		this.y = this.elm.offsetTop
		this.w = (is.ie4)? this.css.pixelWidth : this.elm.offsetWidth
		this.h = (is.ie4)? this.css.pixelHeight : this.elm.offsetHeight
	}

//HBS extra properties
	this.showing = true;
	this.key = -1;
	
	this.id = id
	this.nestref = nestref
	this.obj = id + "DynLayer"
	eval(this.obj + "=this")
}

function DynLayerMoveTo(x,y) {

	if (x!=null) {
		this.x = x
		if (is.ns) this.css.left = this.x
		else this.css.pixelLeft = this.x
	}

	if (y!=null) {
		this.y = y
		if (is.ns) this.css.top = this.y
		else this.css.pixelTop = this.y
	}
}

function DynLayerMoveBy(x,y) {
	this.moveTo(this.x+x,this.y+y)
}

function DynLayerShow() {
	this.css.visibility = (is.ns)? "show" : "visible";
//HBS extension
	this.showing = true;
}

function DynLayerHide() {
	this.css.visibility = (is.ns)? "hide" : "hidden";
//HBS extension
	this.showing = false;
}

DynLayer.prototype.moveTo = DynLayerMoveTo
DynLayer.prototype.moveBy = DynLayerMoveBy
DynLayer.prototype.show = DynLayerShow
DynLayer.prototype.hide = DynLayerHide
DynLayerTest = new Function('return true')

//Dimension-setting extensions to DynLayer by S & M

function DynLayerSetTop(NewTop) {
	this.y = NewTop;
	this.css.top = NewTop;
}

DynLayer.prototype.setTop = DynLayerSetTop;


function DynLayerSetLeft(NewLeft) {
	this.x = NewLeft;
	this.css.left = NewLeft;
}

DynLayer.prototype.setLeft = DynLayerSetLeft;

function DynLayerSetWidth(NewWidth) {
	this.w = NewWidth;
	if (is.ie){this.css.width = NewWidth;}
	else{this.css.clip.width = NewWidth;}
}

DynLayer.prototype.setWidth = DynLayerSetWidth;

// DynLayer GetContent Width/Height Methods
// retrieves the total width/height of the contents of the layer when they are not known
function DynLayerGetContentWidth() {
	return (is.ns)? this.doc.width : this.elm.scrollWidth
}
function DynLayerGetContentHeight() {
	return (is.ns)? this.doc.height : this.elm.scrollHeight
}

DynLayer.prototype.getContentWidth = DynLayerGetContentWidth
DynLayer.prototype.getContentHeight = DynLayerGetContentHeight

function DynLayerNormalizeHeight() {
	this.h = this.getContentHeight();
	if (is.ie4){this.css.height = this.h;}
	else{this.css.clip.height = this.h;}
//alert(this.id + ' height:' + this.h)
}

function DynLayerNormalizeWidth() {
	this.w = this.getContentWidth();
	if (is.ie4){this.css.width = this.w;}
	else{this.css.clip.width = this.w;}
}

DynLayer.prototype.normalizeWidth = DynLayerNormalizeWidth;

DynLayer.prototype.normalizeHeight = DynLayerNormalizeHeight;

//Dimension-setting extensions to DynLayer by S & M

function DynLayerCenter(H,V){
	var VScrollPos = 0;
	var HScrollPos = 0;

//Get the scrollbar position
	if (is.ie){
		VScrollPos = document.body.scrollTop;
		HScrollPos = document.body.scrollLeft;
	}
	else {
		VScrollPos = window.pageYOffset;
		HScrollPos = window.pageXOffset;
	}

	var NewL = this.x;
	if (H == true){
		NewL = Math.floor((pg.W/2) + HScrollPos - (this.w/2));
	}

	var NewT = this.y;
	if (V == true){
		NewT = Math.floor((pg.H/2) + VScrollPos - (this.h/2));
	}
	this.moveTo(NewL, NewT);
}

DynLayer.prototype.center = DynLayerCenter;

// DynLayer Set Background Method
// changes the background (the layer must be clipped)
function DynLayerSetbg(color) {
	if (is.ns) this.doc.bgColor = color
	else this.css.backgroundColor = color
}
DynLayer.prototype.setbg = DynLayerSetbg

// DynLayerInit Function

function DynLayerInit(nestref) {

	if (!DynLayer.set) DynLayer.set = true
	if (is.ns) {
		if (nestref) ref = eval('document.'+nestref+'.document')
		else {nestref = ''; ref = document;}
		for (var i=0; i<ref.layers.length; i++) {
			var divname = ref.layers[i].name
			DynLayer.nestRefArray[divname] = nestref
			var index = divname.indexOf("Div")
			if (index > 0) {
				eval(divname.substr(0,index)+' = new DynLayer("'+divname+'","'+nestref+'")')
			}

			if (ref.layers[i].document.layers.length > 0) {
				DynLayer.refArray[DynLayer.refArray.length] = (nestref=='')? ref.layers[i].name : nestref+'.document.'+ref.layers[i].name
			}
		}

		if (DynLayer.refArray.i < DynLayer.refArray.length) {
			DynLayerInit(DynLayer.refArray[DynLayer.refArray.i++])
		}
	}

	else if (is.ie) {
		for (var i=0; i<document.all.tags("DIV").length; i++) {
			var divname = document.all.tags("DIV")[i].id
			var index = divname.indexOf("Div")
			if (index > 0) {
				eval(divname.substr(0,index)+' = new DynLayer("'+divname+'")')
			}
		}
	}
	return true
}

DynLayer.nestRefArray = new Array()
DynLayer.refArray = new Array()
DynLayer.refArray.i = 0
DynLayer.set = false


// Write Method

function DynLayerWrite(html) {
	if (is.ns) {
		this.doc.open()
		this.doc.write(html)
		this.doc.close()
	}

	else if (is.ie) {
		this.event.innerHTML = html
	}
}

DynLayer.prototype.write = DynLayerWrite

function Shuffle(InArray){
	Temp = new Array();
	var Len = InArray.length;

	var j = Len;

	for (var i=0; i<Len; i++){
		Temp[i] = InArray[i];
	}

	for (i=0; i<Len; i++){
		Num = Math.floor(j  *  Math.random());
		InArray[i] = Temp[Num];

		for (var k=Num; k < j; k++) {
			Temp[k] = Temp[k+1];
		}
		j--;
	}
	return InArray;
}

function WriteFeedback(Stuff){
	var Content = '<TABLE BORDER="1" CELLPADDING="5">';
	Content += '<TR><TD ALIGN="CENTER" VALIGN="MIDDLE"><FONT FACE="Geneva,Arial">';
	Content += Stuff;
	Content += '<BR><FORM NAME="OKForm"><INPUT TYPE="button" NAME="CloseMe" VALUE="';
	Content += OKCaption + '" onClick="Feedback.hide();Question.show()"></FORM>'; 
	Content += '</FONT></TD></TR></TABLE>';
	Feedback.write(Content);
	Feedback.normalizeWidth();
	Feedback.normalizeHeight();
	if (Feedback.w > FeedbackWidth){
		Content = '<TABLE BORDER="1" CELLPADDING="5" WIDTH="' + FeedbackWidth + '">';
		Content += '<TR><TD ALIGN="CENTER" VALIGN="MIDDLE"><FONT FACE="Geneva,Arial">';
		Content += Stuff;
		Content += '<BR><FORM NAME="OKForm"><INPUT TYPE="button" NAME="CloseMe" VALUE="';
		Content += OKCaption + '" onClick="Feedback.hide();Question.show()"></FORM>'; 
		Content += '</FONT></TD></TR></TABLE>';
		Feedback.write(Content);
		Feedback.normalizeWidth();
		Feedback.normalizeHeight();
	}
	Feedback.center(true,true);
	if (Feedback.y < (Title.y + Title.h)){
		Feedback.setTop(Title.y + Title.h);
	}
	Question.hide();
	Feedback.show();
	if (is.ie){document.OKForm.CloseMe.focus();}
	else{Feedback.doc.OKForm.CloseMe.focus();}
}

function StartUp(){

	pg = new PageDim();

	DivWidth = Math.floor((pg.W*4)/5);
	FeedbackWidth = Math.floor(DivWidth/2);

//Insert this in all the variables
	NavBarCode = ReplaceStuff('[DivWidth]', DivWidth, NavBarCode);
	TitleCode = ReplaceStuff('[DivWidth]', DivWidth, TitleCode);
	ClozeOpener = ReplaceStuff('[DivWidth]', DivWidth, ClozeOpener);

	DynLayerInit();

//Hide the feedback div
	Feedback.hide();

//Write the navigation bar
	NavBar.write(NavBarCode);
	NavBar.normalizeHeight();
	NavBar.setWidth(DivWidth);
	NavBar.center(true,false);
	NavBar.setTop(10);

//Write the title stuff
	Title.write(TitleCode);
	Title.normalizeHeight();
	Title.setWidth(DivWidth);
	Title.center(true,false);
	Title.setTop(NavBar.y + NavBar.h);

//Write the main cloze div
	var Gap = '';
	var Btn = '';
	var GapLen = 6;

	var ClozeStuff = ClozeOpener;
	
	var i = 0;
	var j = 0;

	for (i=0; i<I.length; i++){
		for (j=0; j<I[i][1].length; j++){
			I[i][1][j][0] = unescape(I[i][1][j][0]);
		}
	}



	for (var i=0; i<I.length; i++){

//Add the text
		ClozeStuff += Text[i];

//Create and add the gap
		GapLen = I[i][1][0][0].length;
		if (GapLen < 3){GapLen = 3;}
		Gap = ReplaceStuff('[strGapSize]', GapLen, GapCode);
		Gap = ReplaceStuff('[strGapName]', 'Gap' + i + '', Gap);
		Gap = ReplaceStuff('[strItemNum]', i + '', Gap);
		ClozeStuff += Gap;
	

//Create and add the clue button
		if (I[i][2].length > 0){
			Btn = ReplaceStuff('[strItemNum]', i + '', ClueButton);
			ClozeStuff += Btn;
		}
	}

//Add the last bit
	if (Text.length > I.length){
		ClozeStuff += Text[Text.length-1];
	}

//Add the closer, check and hint buttons
	ClozeStuff += ClozeCloser + Buttons;

//Write it to the div
	Question.write(ClozeStuff);
	Question.normalizeHeight();
	Question.setWidth(DivWidth);
	Question.center(true,false);
	Question.setTop(Title.y + Title.h);



//Set up the state array to track progress with each question
	State.length = 0;
	for (i=0; i<I.length; i++){
		State[i] = new Array();
		State[i][0] = 0; // clue asked for or not
		State[i][1] = 0; // hints asked for
		State[i][2] = 0; // length of answer matched
		State[i][3] = 0; // score for this item
	}
}
function ShowMessage(){
	WriteFeedback(Message);
}

I = new Array();

I[0] = new Array();
I[0][1] = new Array();
I[0][1][0] = new Array();
I[0][1][0][0]='V';
I[0][2]='';

I[1] = new Array();
I[1][1] = new Array();
I[1][1][0] = new Array();
I[1][1][0][0]='R';
I[1][2]='';

I[2] = new Array();
I[2][1] = new Array();
I[2][1][0] = new Array();
I[2][1][0][0]='vB';
I[2][2]='';

I[3] = new Array();
I[3][1] = new Array();
I[3][1][0] = new Array();
I[3][1][0][0]='BR';
I[3][2]='';

I[4] = new Array();
I[4][1] = new Array();
I[4][1][0] = new Array();
I[4][1][0][0]='BR';
I[4][2]='';

I[5] = new Array();
I[5][1] = new Array();
I[5][1][0] = new Array();
I[5][1][0][0]='VR';
I[5][2]='';

I[6] = new Array();
I[6][1] = new Array();
I[6][1][0] = new Array();
I[6][1][0][0]='Vv';
I[6][2]='';

I[7] = new Array();
I[7][1] = new Array();
I[7][1][0] = new Array();
I[7][1][0][0]='V';
I[7][2]='';

I[8] = new Array();
I[8][1] = new Array();
I[8][1][0] = new Array();
I[8][1][0][0]='R';
I[8][2]='';

I[9] = new Array();
I[9][1] = new Array();
I[9][1][0] = new Array();
I[9][1][0][0]='vBB';
I[9][2]='';

I[10] = new Array();
I[10][1] = new Array();
I[10][1][0] = new Array();
I[10][1][0][0]='VvB';
I[10][2]='';

I[11] = new Array();
I[11][1] = new Array();
I[11][1][0] = new Array();
I[11][1][0][0]='v';
I[11][2]='';

I[12] = new Array();
I[12][1] = new Array();
I[12][1][0] = new Array();
I[12][1][0][0]='BB';
I[12][2]='';

I[13] = new Array();
I[13][1] = new Array();
I[13][1][0] = new Array();
I[13][1][0][0]='vvBR';
I[13][2]='';

I[14] = new Array();
I[14][1] = new Array();
I[14][1][0] = new Array();
I[14][1][0][0]='VvBR';
I[14][2]='';

I[15] = new Array();
I[15][1] = new Array();
I[15][1][0] = new Array();
I[15][1][0][0]='VvRR';
I[15][2]='';

I[16] = new Array();
I[16][1] = new Array();
I[16][1][0] = new Array();
I[16][1][0][0]='vvBR';
I[16][2]='';

I[17] = new Array();
I[17][1] = new Array();
I[17][1][0] = new Array();
I[17][1][0][0]='vvRR';
I[17][2]='';

I[18] = new Array();
I[18][1] = new Array();
I[18][1][0] = new Array();
I[18][1][0][0]='Verde - rosa';
I[18][1][1] = new Array();
I[18][1][1][0]='verde - rosa';
I[18][1][2] = new Array();
I[18][1][2][0]='Verde - Rosa';
I[18][1][3] = new Array();
I[18][1][3][0]='Verde-rosa';
I[18][1][4] = new Array();
I[18][1][4][0]='verde-Rosa';
I[18][1][5] = new Array();
I[18][1][5][0]='Verde-Rosa';
I[18][1][6] = new Array();
I[18][1][6][0]='verde-rosa';
I[18][2]='';

I[19] = new Array();
I[19][1] = new Array();
I[19][1][0] = new Array();
I[19][1][0][0]='2/16';
I[19][2]='';

I[20] = new Array();
I[20][1] = new Array();
I[20][1][0] = new Array();
I[20][1][0][0]='Amarillo';
I[20][1][1] = new Array();
I[20][1][1][0]='amarillo';
I[20][2]='';

I[21] = new Array();
I[21][1] = new Array();
I[21][1][0] = new Array();
I[21][1][0][0]='1/16';
I[21][2]='';

I[22] = new Array();
I[22][1] = new Array();
I[22][1][0] = new Array();
I[22][1][0][0]='rosa';
I[22][2]='';

I[23] = new Array();
I[23][1] = new Array();
I[23][1][0] = new Array();
I[23][1][0][0]='2/16';
I[23][2]='';

I[24] = new Array();
I[24][1] = new Array();
I[24][1][0] = new Array();
I[24][1][0][0]='Amarillo - rojo';
I[24][1][1] = new Array();
I[24][1][1][0]='amarillo - rojo';
I[24][1][2] = new Array();
I[24][1][2][0]='Amarillo - Rojo';
I[24][1][3] = new Array();
I[24][1][3][0]='Amarillo-rojo';
I[24][1][4] = new Array();
I[24][1][4][0]='amarillo-Rojo';
I[24][1][5] = new Array();
I[24][1][5][0]='Amarillo-Rojo';
I[24][1][6] = new Array();
I[24][1][6][0]='amarillo-rojo';
I[24][2]='';

I[25] = new Array();
I[25][1] = new Array();
I[25][1][0] = new Array();
I[25][1][0][0]='1/16';
I[25][2]='';


Text = new Array();
Text[0]='Parentales:                   Fruto verde - flor rosa&nbsp;  X &nbsp; fruto verde - flor rosa<br /><br />Genotipos: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; VvBR &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VvBR<br />Gametos:&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VB    VR    vB    vR&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VB    VR    vB    vR<br /><br />Descendientes:<br><table border="1" cellpadding="2" cellspacing="2" width="100%"><tr><td></td><td>VB</td><td>VR</td><td>vB</td><td>vR</td></tr><tr><td>VB</td><td>VVBB</td><td>V';
Text[1]='B';
Text[2]='</td><td>V';
Text[3]='B</td><td>Vv';
Text[4]='</td></tr><tr><td>VR</td><td>VV';
Text[5]='</td><td>V';
Text[6]='R</td><td>';
Text[7]='BB</td><td>';
Text[8]='vR';
Text[9]='</td></tr><tr><td>vB</td><td>V';
Text[10]='</td><td>';
Text[11]='R</td><td>';
Text[12]='v';
Text[13]='</td><td>';
Text[14]='</td></tr><tr><td>vR</td><td>';
Text[15]='</td><td>';
Text[16]='</td><td>';
Text[17]='</td><td>';
Text[18]='</td></tr></table><br /><br /><table border="0" cellpadding="2" cellspacing="2" width="100%"><tr><td>Fenotipos de los descendientes:</td><td>Proporciones de los fenotipos</td></tr><tr><td>Verde - blanco</td><td>4/16</td></tr><tr><td>';
Text[19]='</td><td>6/16</td></tr><tr><td>Verde - rojo</td><td>';
Text[20]='</td></tr><tr><td>';
Text[21]=' - blanco</td><td>';
Text[22]='</td></tr><tr><td>Amarillo - ';
Text[23]='</td><td>';
Text[24]='</td></tr><tr><td>';
Text[25]='</td><td>';
Text[26]='</td></tr></table>';


State = new Array();

function ReplaceStuff(Token, Replacement, InString){
	var i = InString.indexOf(Token);
	var FirstBit = '';
	var LastBit = '';
	while (i>-1){
		FirstBit = InString.substring(0, i);
		LastBit = InString.substring(i + Token.length, InString.length);	
		InString = FirstBit + Replacement + LastBit;
		i = InString.indexOf(Token);
	}
	return InString;
}




//Character stuff

var LowerString='abcdefghijklmnopqrstuvwxyz%9A%9C%E0%E1%E2%E3%E4%E5%E6%E7%E8%E9%EA%EB%EC%ED%EE%EF%F0%F1%F2%F3%F4%F5%F6%F8%F9%FA%FB%FC%FD%FE%FF';
var UpperString='ABCDEFGHIJKLMNOPQRSTUVWXYZ%8A%8C%C0%C1%C2%C3%C4%C5%C6%C7%C8%C9%CA%CB%CC%CD%CE%CF%D0%D1%D2%D3%D4%D5%D6%D8%D9%DA%DB%DC%DD%DE%9F';

LowerString = unescape(LowerString);
UpperString = unescape(UpperString);

function ConvertCase(InString, Direction){

	var FromString = '';
	var ToString = '';

	if (Direction == 0){
		FromString = UpperString;
		ToString = LowerString;
	}
	else{
		FromString = LowerString;
		ToString = UpperString;
	}

	var i = 0;
	j = 0;
	var OutString = '';
	for (i=0; i<InString.length; i++){
		if (FromString.indexOf(InString.charAt(i)) > -1){
			j = FromString.indexOf(InString.charAt(i));			
			OutString += ToString.charAt(j);
		}
		else{	
			OutString += InString.charAt(i);
		}
	}
	return OutString;
}

CharList = new Array();

EscapeList = new Array();


function Webble(InString){
	var OutString = '';
	var NextChar = '';
	var FoundCode = '';
	var j = 0;
	var i = 0;
	for (i=0; i<InString.length; i++){
		FoundCode = '';
		NextChar = InString.charAt(i);
		for (j=0; j<CharList.length; j++){
			if (NextChar == CharList[j]){
				FoundCode = EscapeList[j];
			}
		}
		if (FoundCode.length > 0){
			OutString += FoundCode;
		}
		else{
			OutString += NextChar;
		}
	}
	return OutString;
}

var MacChars = '%80%81%82%83%84%85%86%87%88%89%8A%8B%8C%8D%8E%8F%90%91%92%93%94%95%96%97%98%99%9A';
MacChars += '%9B%9C%9D%9E%9F%A0%A1%A4%A5%A6%A7%A8%AA%AB%AC%AE%AF%B4%B6%BB%BC%BE%BF%C0%C1%C2%C4%C7%C8';
MacChars += '%C9%CA%CB%CC%CD%CE%CF%D0%D1%D2%D3%D4%D5%D6%D8%D9%DA%DB%DC%DD%E0%E1%E2%E3%E4%E5%E6%E7%E8%E9';
MacChars += '%EA%EB%EC%ED%EE%EF%F1%F2%F3%F4%F5%F6%F7%F8%FB%FD';

var WinChars = '%C4%C5%C7%C9%D1%D6%DC%E1%E0%E2%E4%E3%E5%E7%E9%E8%EA%EB%ED%EC%EE%EF%F1%F3%F2%F4';
WinChars += '%F6%F5%FA%F9%FB%FC%86%BA%A7%95%B6%DF%AE%99%92%A8%C6%D8%A5%F0%AA%BA%E6%F8%BF%A1%AC%83%AB%BB';
WinChars += '%85%82%C0%C3%D5%8C%9C%96%97%93%94%91%92%F7%FFY/%A4%8B%9B%87%B7%82%84%89%C2%CA%C1%CB';
WinChars += '%C8%CD%CE%CF%CC%D3%D4%D2%DA%DB%D9%B9%88%98%AF%B0%94';


WinChars = unescape(WinChars);
MacChars = unescape(MacChars)

function MacStringToWin(InString){

	var OutString = '';
	for (i=0; i<InString.length; i++){
		if ( (InString.charAt(i) > '~') && (MacChars.indexOf(InString.charAt(i)) > -1) ){
			OutString += WinChars.charAt(MacChars.indexOf(InString.charAt(i)));
		}
		else {
			OutString += InString.charAt(i);
		}
	}
	return OutString;
}

function WinStringToMac(InString){

	var OutString = '';
	for (i=0; i<InString.length; i++){
		if ( (InString.charAt(i) > '~') && (WinChars.indexOf(InString.charAt(i)) > -1) ){
			OutString += MacChars.charAt(WinChars.indexOf(InString.charAt(i)));
		}
		else {
			OutString += InString.charAt(i);
		}
	}
	return OutString;
}

function TrimString(InString){
        var x = 0

        if (InString.length != 0) {
                while ((escape(InString.charAt(InString.length - 1)) == '%20') || (escape(InString.charAt(InString.length - 1)) == '%0A') || (escape(InString.charAt(InString.length - 1)) == '%0D')){
                        InString = InString.substring(0, InString.length - 1)
                }

                while ((escape(InString.charAt(0)) == '%20') || (escape(InString.charAt(0)) == '%0A') || (escape(InString.charAt(0)) == '%0D')){
                        InString = InString.substring(1, InString.length)
                }

                while (InString.indexOf('  ') != -1) {
                        x = InString.indexOf('  ')
                        InString = InString.substring(0, x) + InString.substring(x+1, InString.length)
                 }

                return InString;
        }

        else {
                return '';
        }

}

function TrackFocus(BoxNumber){
	CurrentWord = BoxNumber;
}

function CheckBeginning(Guess, Answer){
	var OutString = '';
	var i = 0;
	var UpperGuess = '';
	var UpperAnswer = '';

	if (CaseSensitive == false) {
		UpperGuess = ConvertCase(Guess, 1);
		UpperAnswer = ConvertCase(Answer, 1);
	}
	else {
		UpperGuess = Guess;
		UpperAnswer = Answer;
	}

	while (UpperGuess.charAt(i) == UpperAnswer.charAt(i)) {
		OutString += Guess.charAt(i);
		i++;
	}
	OutString += Answer.charAt(i);
	return OutString;
}

function FindLongest(InArray){
	if (InArray.length < 1){return -1;}

	var Longest = 0;
	for (var i=1; i<InArray.length; i++){
		if (InArray[i].length > InArray[Longest].length){
			Longest = i;
		}
	}
	return Longest;
}

function CheckAnswers(){

	Scores = new Array();

	var AllCorrect = 1;

//Check each answer
	for (var i = 0; i< I.length; i++){

//If it's right, calculate its score
		if (CheckAnswer(i) > -1){
			var TotalChars = GetGapValue(i).length;
			Scores[i] = (TotalChars-State[i][1])/TotalChars;
			if (State[i][0] > 0){Scores[i] = Scores[i]/2;}
			if (Scores[i]<0){Scores[i] = 0;}
		}
		else{
//Otherwise, add zero to the array
			Scores[i] = 0;
//and blank it out
			SetGapValue(i, '');
//then set the flag
			AllCorrect = 0;
		}
	}

//Calculate the total score
	var TotalScore = 0;
	for (i=0; i<Scores.length; i++){
		TotalScore += Scores[i];
	}
	TotalScore = Math.floor((TotalScore * 100)/Scores.length);

//Compile the output
	Output = '';

	if (AllCorrect == 1){
		Output = Correct + '<BR>';
	}

	Output += YourScoreIs + ' ' + TotalScore + '%.<BR>';
	if (AllCorrect == 0){
		Output += '<BR>' + Incorrect;
	}

	WriteFeedback(Output);
}

function ShowClue(ItemNum){
	State[ItemNum][0] = 1;
	WriteFeedback(I[ItemNum][2]);
}

function GetGapValue(GNum){
	var RetVal = '';
	if (is.ie){
		RetVal = eval('document.Cloze.Gap' + GNum).value;
	}
	else{
		RetVal = eval('Question.doc.Cloze.Gap' + GNum).value;
	}
	if (is.mac){RetVal = MacStringToWin(RetVal);}
//	RetVal = TrimString(RetVal);
	return RetVal;
}

function SetGapValue(GNum, Val){
	if ((GNum<0)||(GNum>=I.length)){return;}
	if (is.mac){Val = WinStringToMac(Val);}
	if (is.ie){
		eval('document.Cloze.Gap' + GNum).value = Val;
	}
	else{
		eval('Question.doc.Cloze.Gap' + GNum).value = Val;
	}
}


function FindCurrent() {
	var x = 0;
	FoundCurrent = -1;
	if (CheckAnswer(CurrentWord) < 0) {
		FoundCurrent = CurrentWord;
	}	
	else {
		x=CurrentWord + 1;
		while ((FoundCurrent == -1) && (x<I.length)){
			if (CheckAnswer(x) < 0) {
				FoundCurrent = x;
			}
			x++;	
		}
	}
	if (FoundCurrent == -1){
		x = 0;
		while ((FoundCurrent == -1) && (x<CurrentWord)){
			if (CheckAnswer(x) < 0) {
				FoundCurrent = x;
			}
			x++;
		}
	}
	return FoundCurrent;
}

function CheckAnswer(GapNum){
	var Guess = GetGapValue(GapNum);
	var UpperGuess = '';
	var UpperAnswer = '';
	if (CaseSensitive == false){
		UpperGuess = ConvertCase(Guess, 1);
	}
	else{
		UpperGuess = Guess;
	}
	var Match = -1;
	for (var i = 0; i<I[GapNum][1].length; i++){
		if (CaseSensitive == false){
			UpperAnswer = ConvertCase(I[GapNum][1][i][0], 1);
		}
		else{
			UpperAnswer = I[GapNum][1][i][0];
		}
		if (TrimString(UpperGuess) == UpperAnswer){
			Match = i;
		}
	}
	return Match;
}

function GetHint(GapNum){
	Guess = GetGapValue(GapNum);

	if (CheckAnswer(GapNum) > -1){return ''}
	RightBits = new Array();
	for (var i=0; i<I[GapNum][1].length; i++){
		RightBits[i] = CheckBeginning(Guess, I[GapNum][1][i][0]);
	}
	var RightOne = FindLongest(RightBits);
	return I[GapNum][1][RightOne][0].substring(0,RightBits[RightOne].length);
}

function ShowHint(){
	var CurrGap = FindCurrent();
	if (CurrGap < 0){return;}

	var HintString = GetHint(CurrGap);

	if (HintString.length > 0){
		SetGapValue(CurrGap, HintString);
		State[CurrGap][1] = State[CurrGap][1] + 1;
	}
}

</SCRIPT>
</HEAD>
<!--<BODY>Fool those dumb ad-inserting ISPs</BODY>-->

<BODY BACKGROUND="" LINK="#0000ff" VLINK="#0000cc" onLoad="StartUp()">

<SCRIPT LANGUAGE="JavaScript">
	var OutStuff = '';

	OutStuff = '<STYLE TYPE="text/css">#NavBarDiv';
	OutStuff += '{position:absolute; left:0; top:10; height: 800; width: 10;';
	OutStuff += 'background-color:' + NavBarColor + '; layer-background-color: ' + NavBarColor + ';}';
	OutStuff += '</STYLE>';
	OutStuff += '<DIV ID="NavBarDiv"></DIV>';
	document.write(OutStuff);

	OutStuff = '<STYLE TYPE="text/css">#TitleDiv';
	OutStuff += '{position:absolute; left:0; top:200; height: 10; width: 10;';
	OutStuff += 'background-color:' + PageBGColor + '; layer-background-color: ' + PageBGColor + ';}';
	OutStuff += '</STYLE>';
	OutStuff += '<DIV ID="TitleDiv"></DIV>';
	document.write(OutStuff);

	OutStuff = '<STYLE TYPE="text/css">#QNumberDiv';
	OutStuff += '{position:absolute; left:0; top:300; height: 10; width: 10; ';
	OutStuff += 'background-color:' + PageBGColor + '; layer-background-color: ' + PageBGColor + ';}';
	OutStuff += '</STYLE>';
	OutStuff += '<DIV ID="QNumberDiv"></DIV>';
	document.write(OutStuff);

	OutStuff = '<STYLE TYPE="text/css">#QuestionDiv';
	OutStuff += '{position:absolute; left:0; top:400; height: 10; width: 10; ';
	OutStuff += 'background-color:' + ExBGColor + '; layer-background-color: ' + ExBGColor + ';}';
	OutStuff += '</STYLE>';
	OutStuff += '<DIV ID="QuestionDiv"></DIV>';
	document.write(OutStuff);

	OutStuff = '<STYLE TYPE="text/css">#FeedbackDiv';
	OutStuff += '{position:absolute; left:0; top:1500; height: 10; ';
	OutStuff += 'background-color:' + PopupBGColor + '; layer-background-color: ' + PopupBGColor + ';}';
	OutStuff += '</STYLE>';
	OutStuff += '<DIV ID="FeedbackDiv"></DIV>';
	document.write(OutStuff);

</SCRIPT>

</BODY>
</HTML> 
