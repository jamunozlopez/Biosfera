<HTML>
<HEAD><meta name="author" content="Created with Hot Potatoes by Half-Baked Software, registered to Alejandro Romero."></meta><meta name="keywords" content="Hot Potatoes, Half-Baked Software, Windows, University of Victoria"></meta>
<TITLE>El H&aacute;dico</TITLE>

<!--<BODY>Fool those dumb ad-inserting ISPs</BODY>-->
<body bgcolor="#e6ffe6">
<SCRIPT LANGUAGE="JavaScript">

// BrowserCheck Object

function BrowserCheck() {
	var b = navigator.appName
//HBS extension
	this.mac = (navigator.appVersion.indexOf('Mac') != -1)
	if (b=="Netscape") this.b = "ns"
	else if (b=="Microsoft Internet Explorer") this.b = "ie"
	else this.b = b
	this.version = navigator.appVersion
	this.v = parseInt(this.version)
	this.ns = (this.b=="ns" && this.v>=4)
	this.ns4 = (this.b=="ns" && this.v==4)
	this.ns5 = (this.b=="ns" && this.v==5)
	this.ie = (this.b=="ie" && this.v>=4)
	this.ie4 = (this.version.indexOf('MSIE 4')>0)
	this.ie5 = (this.version.indexOf('MSIE 5')>0)
	this.min = (this.ns||this.ie)
}

is = new BrowserCheck()

var CanShow = true;
if ((is.v<4)||(is.ns5)){CanShow=false;}
if ((is.mac==true)&&((is.ie4==true)||(is.ie5==true))){CanShow=false;}
if (CanShow==false){
	alert('WARNING: Your browser version cannot show this page.');
	history.back();
}

function PageDim(){
//Get the page width and height
	this.W = 600;
	this.H = 400;
	if (is.ns) this.W = window.innerWidth;
	if (is.ie) this.W = document.body.clientWidth;
	if (is.ns) this.H = window.innerHeight;
	if (is.ie) this.H = document.body.clientHeight;
}

var CorrectResponse = 'Correcto.';
var TheseAnswersToo = 'Otras respuestas que son correctas:';
var ThisMuchIsCorrect = 'La parte correcta de tu respuesta es:';
var TheseWordsAppear = 'Estas palabras en su respuesta son correctas:';
var IncorrectResponse = 'Incorrecto. Intenta otra vez o haz clic en el bot&oacute;n de ayuda';
var EnterGuess = 'Por favor, intenta contestar antes de comprobar';
var GiveHint = 'Una letra ha sido a&ntilde;adida';
var TheseCorrect = 'Todas las repuestas correctas son:';
var CaseSensitive = false;

var DivWidth = 400; //default value
var FeedbackWidth = 200; //default
var OKCaption = 'OK'; //
var PopupBGColor = '#FFFFFF';
var ExBGColor = '#e6ffe6'; //'#DDDDDD';
var PageBGColor = '#e6ffe6'; //'#FFFFFF';
var NavBarColor = '#e6ffe6'; //'#000000';
var TextColor = '#000000';
var QNum = 1;
var YourScoreIs = 'Tu resultado es:'; //'Your score is: ';
var Tries = 0;
var CorrectChoices = 0;
var ContinuousScoring = false; 
var CorrectFirstTime = 'Preguntas contestadas a la primera:'; 
var ExerciseTitle = 'El H&aacute;dico<center><img src="imagenes/origen_tierra2.gif" alt="Formaci&oacute;n de la Tierra" width="150" height="193" border="0"></img></center>'; 
var ExerciseSubtitle = 'Ejercicio de respuestas cortas.';
var Instructions = 'Escribe tu respuesta, luego pulsa en "Comprobar". Si necesitas ayuda, puedes pulsar en "Pista" para obtener una letra de la palabra.<br />';
var ShuffleQs = true;

var NavBarCode = '<TABLE BORDER="0" WIDTH="[DivWidth]" CELLPADDING="2">';
NavBarCode += '<FORM NAME="NavButtons"><TR><TD ALIGN="CENTER" VALIGN="MIDDLE">';
NavBarCode += '<FONT FACE="Geneva,Arial" SIZE="-1">';


NavBarCode += '<INPUT TYPE="button" VALUE="Cerrar" OnClick="parent.close(); return true"></input>';




NavBarCode += '</FONT></TD></TR></FORM></TABLE>';

var TitleCode = '<TABLE BORDER="0" WIDTH="[DivWidth]" CELLPADDING="10">';
TitleCode += '<TR><TD ALIGN="CENTER" VALIGN="MIDDLE" BGCOLOR="#e6ffe6">';
TitleCode += '<FONT SIZE="+1" FACE="Geneva,Arial" COLOR="#000000">' + ExerciseTitle + '</FONT><BR>';
TitleCode += '<FONT SIZE="-1" FACE="Geneva,Arial" COLOR="#000000">' + ExerciseSubtitle + '<BR>';
if (Instructions != ''){
	TitleCode += Instructions + '<BR>';
}



TitleCode += '</FONT></TD></TR></TABLE>';

var QButtonsOpener = '<TABLE BORDER="0" WIDTH="[DivWidth]" CELLPADDING="10">';
QButtonsOpener += '<TR><TD ALIGN="CENTER" VALIGN="MIDDLE"><FORM>';
QButtonsOpener += '<FONT SIZE="+1"><INPUT TYPE="BUTTON" VALUE="&lt;=" onClick="ChangeQ(-1)">';
QButtonsCloser = '<INPUT TYPE="BUTTON" VALUE="=&gt;" onClick="ChangeQ(1)">';
QButtonsCloser += '</FONT></FORM></TD></TR></TABLE>';

TableOpener = '<FORM NAME="QForm" onSubmit="CheckAnswer(false); return false">';
TableOpener += '<TABLE BORDER="0" WIDTH="[DivWidth]" CELLPADDING="10">';

var QRow = '<TR><TD VALIGN="TOP" BGCOLOR="';
QRow += ExBGColor;
QRow += '"><FONT SIZE="-1" FACE="Geneva,Arial" COLOR="#000000">[Question]';
QRow += '</FONT></TD></TR>';

var ARow = '<TR><TD VALIGN="TOP" ALIGN="CENTER" BGCOLOR="';
ARow += ExBGColor;
ARow += '"><FONT FACE="Geneva,Arial" COLOR="#000000">[AnswerBox]</FONT></TD></TR>';

BtnRow = '<TR><TD VALIGN="TOP" ALIGN="CENTER" BGCOLOR="';
BtnRow += ExBGColor;
BtnRow += '">';
BtnRow += '<INPUT TYPE="button" Name="Check" onClick="CheckAnswer(false)" VALUE="Comprobar">';


BtnRow += '<INPUT TYPE="button" Name="Hint" onClick="CheckAnswer(true)" VALUE="Pista">';




BtnRow += '</TD></TR>';

TableCloser = '</TABLE></FORM>';

var LongAnswer = '<TEXTAREA NAME="Answer" COLS="20" ROWS="3" WRAP ="VIRTUAL"></TEXTAREA>';
var ShortAnswer = '<INPUT TYPE="TEXT" NAME="Answer" SIZE="[AnswerSize]">';

// Dynamic Layer Object

// sophisticated layer/element targeting and animation object which provides the core // functionality needed in most DHTML applications
// 19990604

// Copyright (C) 1999 Dan Steinman
// Distributed under the terms of the GNU Library General Public License
// Available at http://www.dansteinman.com/dynduo/


function DynLayer(id,nestref,frame) {
	if (!DynLayer.set && !frame) DynLayerInit()
	this.frame = frame || self
	if (is.ns) {
		if (is.ns4) {
			if (!frame) {
				if (!nestref) var nestref = DynLayer.nestRefArray[id]
				if (!DynLayerTest(id,nestref)) return
				this.css = (nestref)? eval("document."+nestref+".document."+id) : document.layers[id]
			}
			else this.css = (nestref)? eval("frame.document."+nestref+".document."+id) : frame.document.layers[id]
			this.elm = this.event = this.css
			this.doc = this.css.document
		}

		if (is.ns5) {
			this.elm = document.getElementById(id)
			this.css = this.elm.style
			this.doc = document
		}

		this.x = this.css.left
		this.y = this.css.top
		this.w = this.css.clip.width
		this.h = this.css.clip.height
	}

	else if (is.ie) {
		this.elm = this.event = this.frame.document.all[id]
		this.css = this.frame.document.all[id].style
		this.doc = document
		this.x = this.elm.offsetLeft
		this.y = this.elm.offsetTop
		this.w = (is.ie4)? this.css.pixelWidth : this.elm.offsetWidth
		this.h = (is.ie4)? this.css.pixelHeight : this.elm.offsetHeight
	}

//HBS extra properties
	this.showing = true;
	this.key = -1;
	
	this.id = id
	this.nestref = nestref
	this.obj = id + "DynLayer"
	eval(this.obj + "=this")
}

function DynLayerMoveTo(x,y) {

	if (x!=null) {
		this.x = x
		if (is.ns) this.css.left = this.x
		else this.css.pixelLeft = this.x
	}

	if (y!=null) {
		this.y = y
		if (is.ns) this.css.top = this.y
		else this.css.pixelTop = this.y
	}
}

function DynLayerMoveBy(x,y) {
	this.moveTo(this.x+x,this.y+y)
}

function DynLayerShow() {
	this.css.visibility = (is.ns)? "show" : "visible";
//HBS extension
	this.showing = true;
}

function DynLayerHide() {
	this.css.visibility = (is.ns)? "hide" : "hidden";
//HBS extension
	this.showing = false;
}

DynLayer.prototype.moveTo = DynLayerMoveTo
DynLayer.prototype.moveBy = DynLayerMoveBy
DynLayer.prototype.show = DynLayerShow
DynLayer.prototype.hide = DynLayerHide
DynLayerTest = new Function('return true')

//Dimension-setting extensions to DynLayer by S & M

function DynLayerSetTop(NewTop) {
	this.y = NewTop;
	this.css.top = NewTop;
}

DynLayer.prototype.setTop = DynLayerSetTop;


function DynLayerSetLeft(NewLeft) {
	this.x = NewLeft;
	this.css.left = NewLeft;
}

DynLayer.prototype.setLeft = DynLayerSetLeft;

function DynLayerSetWidth(NewWidth) {
	this.w = NewWidth;
	if (is.ie){this.css.width = NewWidth;}
	else{this.css.clip.width = NewWidth;}
}

DynLayer.prototype.setWidth = DynLayerSetWidth;

// DynLayer GetContent Width/Height Methods
// retrieves the total width/height of the contents of the layer when they are not known
function DynLayerGetContentWidth() {
	return (is.ns)? this.doc.width : this.elm.scrollWidth
}
function DynLayerGetContentHeight() {
	return (is.ns)? this.doc.height : this.elm.scrollHeight
}

DynLayer.prototype.getContentWidth = DynLayerGetContentWidth
DynLayer.prototype.getContentHeight = DynLayerGetContentHeight

function DynLayerNormalizeHeight() {
	this.h = this.getContentHeight();
	if (is.ie4){this.css.height = this.h;}
	else{this.css.clip.height = this.h;}

}

function DynLayerNormalizeWidth() {
	this.w = this.getContentWidth();
	if (is.ie4){this.css.width = this.w;}
	else{this.css.clip.width = this.w;}
}

DynLayer.prototype.normalizeWidth = DynLayerNormalizeWidth;

DynLayer.prototype.normalizeHeight = DynLayerNormalizeHeight;

//Dimension-setting extensions to DynLayer by S & M

function DynLayerCenter(H,V){
	var VScrollPos = 0;
	var HScrollPos = 0;

//Get the scrollbar position
	if (is.ie){
		VScrollPos = document.body.scrollTop;
		HScrollPos = document.body.scrollLeft;
	}
	else {
		VScrollPos = window.pageYOffset;
		HScrollPos = window.pageXOffset;
	}

	var NewL = this.x;
	if (H == true){
		NewL = Math.floor((pg.W/2) + HScrollPos - (this.w/2));
	}

	var NewT = this.y;
	if (V == true){
		NewT = Math.floor((pg.H/2) + VScrollPos - (this.h/2));
	}
	this.moveTo(NewL, NewT);
}

DynLayer.prototype.center = DynLayerCenter;

// DynLayer Set Background Method
// changes the background (the layer must be clipped)
function DynLayerSetbg(color) {
	if (is.ns) this.doc.bgColor = color
	else this.css.backgroundColor = color
}
DynLayer.prototype.setbg = DynLayerSetbg

// DynLayerInit Function

function DynLayerInit(nestref) {

	if (!DynLayer.set) DynLayer.set = true
	if (is.ns) {
		if (nestref) ref = eval('document.'+nestref+'.document')
		else {nestref = ''; ref = document;}
		for (var i=0; i<ref.layers.length; i++) {
			var divname = ref.layers[i].name
			DynLayer.nestRefArray[divname] = nestref
			var index = divname.indexOf("Div")
			if (index > 0) {
				eval(divname.substr(0,index)+' = new DynLayer("'+divname+'","'+nestref+'")')
			}

			if (ref.layers[i].document.layers.length > 0) {
				DynLayer.refArray[DynLayer.refArray.length] = (nestref=='')? ref.layers[i].name : nestref+'.document.'+ref.layers[i].name
			}
		}

		if (DynLayer.refArray.i < DynLayer.refArray.length) {
			DynLayerInit(DynLayer.refArray[DynLayer.refArray.i++])
		}
	}

	else if (is.ie) {
		for (var i=0; i<document.all.tags("DIV").length; i++) {
			var divname = document.all.tags("DIV")[i].id
			var index = divname.indexOf("Div")
			if (index > 0) {
				eval(divname.substr(0,index)+' = new DynLayer("'+divname+'")')
			}
		}
	}
	return true
}

DynLayer.nestRefArray = new Array()
DynLayer.refArray = new Array()
DynLayer.refArray.i = 0
DynLayer.set = false


// Write Method

function DynLayerWrite(html) {
	if (is.ns) {
		this.doc.open()
		this.doc.write(html)
		this.doc.close()
	}

	else if (is.ie) {
		this.event.innerHTML = html
	}
}

DynLayer.prototype.write = DynLayerWrite

function Shuffle(InArray){
	Temp = new Array();
	var Len = InArray.length;

	var j = Len;

	for (var i=0; i<Len; i++){
		Temp[i] = InArray[i];
	}

	for (i=0; i<Len; i++){
		Num = Math.floor(j  *  Math.random());
		InArray[i] = Temp[Num];

		for (var k=Num; k < j; k++) {
			Temp[k] = Temp[k+1];
		}
		j--;
	}
	return InArray;
}

function WriteFeedback(Stuff){
	Stuff = Webble(Stuff);
	var Content = '<TABLE BORDER="1" CELLPADDING="5">';
	Content += '<TR><TD ALIGN="CENTER" VALIGN="MIDDLE"><FONT FACE="Geneva,Arial">';
	Content += Stuff;
	Content += '<BR><FORM NAME="OKForm"><INPUT TYPE="button" NAME="CloseMe" VALUE="';
	Content += OKCaption + '" onClick="Feedback.hide();Question.show()"></FORM>'; 
	Content += '</FONT></TD></TR></TABLE>';
	Feedback.write(Content);
	Feedback.normalizeWidth();
	Feedback.normalizeHeight();
	if (Feedback.w > FeedbackWidth){
		Content = '<TABLE BORDER="1" CELLPADDING="5" WIDTH="' + FeedbackWidth + '">';
		Content += '<TR><TD ALIGN="CENTER" VALIGN="MIDDLE"><FONT FACE="Geneva,Arial">';
		Content += Stuff;
		Content += '<BR><FORM NAME="OKForm"><INPUT TYPE="button" NAME="CloseMe" VALUE="';
		Content += OKCaption + '" onClick="Feedback.hide();Question.show()"></FORM>'; 
		Content += '</FONT></TD></TR></TABLE>';
		Feedback.write(Content);
		Feedback.normalizeWidth();
		Feedback.normalizeHeight();
	}
	Feedback.center(true,true);
	if (Feedback.y < (QNumber.y + QNumber.h)){
		Feedback.setTop(QNumber.y + QNumber.h);
	}
	Question.hide();
	Feedback.show();
	if (is.ie){document.OKForm.CloseMe.focus();}
	else{Feedback.doc.OKForm.CloseMe.focus();}
}

function StartUp(){

	pg = new PageDim();

	DivWidth = Math.floor((pg.W*4)/5);
	FeedbackWidth = Math.floor(DivWidth/2);

//Insert this in all the variables
	NavBarCode = ReplaceStuff('[DivWidth]', DivWidth, NavBarCode);
	TitleCode = ReplaceStuff('[DivWidth]', DivWidth, TitleCode);
	QButtonsOpener = ReplaceStuff('[DivWidth]', DivWidth, QButtonsOpener);
	TableOpener = ReplaceStuff('[DivWidth]', DivWidth, TableOpener);

	DynLayerInit();

//Hide the feedback div
	Feedback.hide();

//Write the navigation bar
	NavBar.write(NavBarCode);
	NavBar.normalizeHeight();
	NavBar.setWidth(DivWidth);
	NavBar.center(true,false);
	NavBar.setTop(10);

//Write the title stuff
	Title.write(TitleCode);
	Title.normalizeHeight();
	Title.setWidth(DivWidth);
	Title.center(true,false);
	Title.setTop(NavBar.y + NavBar.h);

//Shuffle stuff if required

	if (ShuffleQs == true){
		I = Shuffle(I);
	}



//Set up the state array to track progress with each question
	State.length = 0;
	for (i=0; i<I.length; i++){
		State[i] = new Array();
		State[i][0] = 0; // question done or not
		State[i][1] = 0; // wrong checks
		State[i][2] = 0; // hints asked for
		State[i][3] = ''; // student's answer
		State[i][4] = 0; // score for this question
	}

//Show the first question
	ShowQuestion();
}

function ShowMessage(){
	WriteFeedback(Message);
}

I = new Array();

I[0] = new Array();
I[0][0]='\u00BFPor qu&eacute; recibe ese nombre?';
I[0][1] = new Array();
I[0][1][0] = new Array();
I[0][1][0][0]='Por el dios Hades';
I[0][1][1] = new Array();
I[0][1][1][0]='Por Hades';

I[1] = new Array();
I[1][0]='\u00BFQu&eacute; hecho importante se da en ese tiempo?';
I[1][1] = new Array();
I[1][1][0] = new Array();
I[1][1][0][0]='La formaci%F3n de la Tierra';
I[1][1][1] = new Array();
I[1][1][1][0]='Formaci%F3n de la Tierra';

I[2] = new Array();
I[2][0]='\u00BFQu&eacute; edad se le atribuye?';
I[2][1] = new Array();
I[2][1][0] = new Array();
I[2][1][0][0]='De 4500 a 3800 millones de a%F1os';
I[2][1][1] = new Array();
I[2][1][1][0]='De 4.500 a 3.800 millones de a%F1os';


State = new Array();

function ReplaceStuff(Token, Replacement, InString){
	var i = InString.indexOf(Token);
	var FirstBit = '';
	var LastBit = '';
	while (i>-1){
		FirstBit = InString.substring(0, i);
		LastBit = InString.substring(i + Token.length, InString.length);	
		InString = FirstBit + Replacement + LastBit;
		i = InString.indexOf(Token);
	}
	return InString;
}

function ChangeQ(ChangeBy){

//Save previous data
	if (is.ie){
		State[QNum-1][3] = document.QForm.Answer.value;
		}
	else{
		State[QNum-1][3] = Question.doc.QForm.Answer.value;
	}

	var NewNum = QNum + ChangeBy;
	if ((NewNum > 0)&&(NewNum<=I.length)){
		QNum = NewNum;
		ShowQuestion();
	}
}

function ShowQNum(){
	var Readout = QNum + '/' + I.length;
	while (Readout.length < 7){
		Readout = ' ' + Readout + ' ';
	}
	QNumber.write(QButtonsOpener + Readout + QButtonsCloser);
	QNumber.normalizeHeight();
	QNumber.setWidth(DivWidth);
	QNumber.center(true,false);
	QNumber.setTop(Title.y + Title.h);
}

function ShowQuestion(){
	ShowQNum();
	var Temp = TableOpener;
	Temp += ReplaceStuff('[Question]', I[QNum-1][0], QRow);

	var AnsRow = '';
	AnsRow = ARow;

//Measure the answers and find out what kind of
//box to show
	var Longest = 5;
	for (var i=0; i<I[QNum-1][1].length; i++){
		if (I[QNum-1][1][i][0].length > Longest){
			Longest = I[QNum-1][1][i][0].length;
		}
	}

	var AnsBox = '';

	if (Longest > 20){
		AnsBox = LongAnswer;	
	}
	else{
		AnsBox = ReplaceStuff('[AnswerSize]', (Longest + ''), ShortAnswer);
	}

	AnsRow = ReplaceStuff('[AnswerBox]', AnsBox, AnsRow);

	Temp += AnsRow;
	Temp += BtnRow;
	Temp += TableCloser;
	Question.write(Temp);
	Question.normalizeHeight();
	Question.setWidth(DivWidth);
	Question.center(true,false);
	Question.setTop(QNumber.y + QNumber.h);
	Question.setbg(ExBGColor);

//Put any previous attempt at this question back in the box
	if (is.ie){
		document.QForm.Answer.value = State[QNum-1][3];
		document.QForm.Answer.focus();
		}
	else{
		Question.doc.QForm.Answer.value = State[QNum-1][3];
		Question.doc.QForm.Answer.focus();
	}
}



//Character stuff

var LowerString='abcdefghijklmnopqrstuvwxyz%9A%9C%E0%E1%E2%E3%E4%E5%E6%E7%E8%E9%EA%EB%EC%ED%EE%EF%F0%F1%F2%F3%F4%F5%F6%F8%F9%FA%FB%FC%FD%FE%FF';
var UpperString='ABCDEFGHIJKLMNOPQRSTUVWXYZ%8A%8C%C0%C1%C2%C3%C4%C5%C6%C7%C8%C9%CA%CB%CC%CD%CE%CF%D0%D1%D2%D3%D4%D5%D6%D8%D9%DA%DB%DC%DD%DE%9F';

LowerString = unescape(LowerString);
UpperString = unescape(UpperString);

function ConvertCase(InString, Direction){

	var FromString = '';
	var ToString = '';

	if (Direction == 0){
		FromString = UpperString;
		ToString = LowerString;
	}
	else{
		FromString = LowerString;
		ToString = UpperString;
	}

	var i = 0;
	j = 0;
	var OutString = '';
	for (i=0; i<InString.length; i++){
		if (FromString.indexOf(InString.charAt(i)) > -1){
			j = FromString.indexOf(InString.charAt(i));			
			OutString += ToString.charAt(j);
		}
		else{	
			OutString += InString.charAt(i);
		}
	}
	return OutString;
}

var MacChars = '%80%81%82%83%84%85%86%87%88%89%8A%8B%8C%8D%8E%8F%90%91%92%93%94%95%96%97%98%99%9A';
MacChars += '%9B%9C%9D%9E%9F%A0%A1%A4%A5%A6%A7%A8%AA%AB%AC%AE%AF%B4%B6%BB%BC%BE%BF%C0%C1%C2%C4%C7%C8';
MacChars += '%C9%CA%CB%CC%CD%CE%CF%D0%D1%D2%D3%D4%D5%D6%D8%D9%DA%DB%DC%DD%E0%E1%E2%E3%E4%E5%E6%E7%E8%E9';
MacChars += '%EA%EB%EC%ED%EE%EF%F1%F2%F3%F4%F5%F6%F7%F8%FB%FD';

var WinChars = '%C4%C5%C7%C9%D1%D6%DC%E1%E0%E2%E4%E3%E5%E7%E9%E8%EA%EB%ED%EC%EE%EF%F1%F3%F2%F4';
WinChars += '%F6%F5%FA%F9%FB%FC%86%BA%A7%95%B6%DF%AE%99%92%A8%C6%D8%A5%F0%AA%BA%E6%F8%BF%A1%AC%83%AB%BB';
WinChars += '%85%82%C0%C3%D5%8C%9C%96%97%93%94%91%92%F7%FFY/%A4%8B%9B%87%B7%82%84%89%C2%CA%C1%CB';
WinChars += '%C8%CD%CE%CF%CC%D3%D4%D2%DA%DB%D9%B9%88%98%AF%B0%94';

WinChars = unescape(WinChars);
MacChars = unescape(MacChars)

function MacStringToWin(InString){

	var OutString = '';
	for (i=0; i<InString.length; i++){
		if ( (InString.charAt(i) > '~') && (MacChars.indexOf(InString.charAt(i)) > -1) ){
			OutString += WinChars.charAt(MacChars.indexOf(InString.charAt(i)));
		}
		else {
			OutString += InString.charAt(i);
		}
	}
	return escape(OutString);
}

function WinStringToMac(InString){

	var OutString = '';
	for (i=0; i<InString.length; i++){
		if ( (InString.charAt(i) > '~') && (WinChars.indexOf(InString.charAt(i)) > -1) ){
			OutString += MacChars.charAt(MacChars.indexOf(InString.charAt(i)));
		}
		else {
			OutString += InString.charAt(i);
		}
	}
	return escape(OutString);
}

CharList = new Array();
CharList[0]='%F3';
CharList[1]='%D3';
CharList[2]='%F1';
CharList[3]='%D1';

for (var i=0; i<CharList.length; i++){CharList[i] = unescape(CharList[i])}
EscapeList = new Array();
EscapeList[0]='&oacute;';
EscapeList[1]='&Oacute;';
EscapeList[2]='&ntilde;';
EscapeList[3]='&Ntilde;';


function Webble(InString){
	var OutString = '';
	var NextChar = '';
	var FoundCode = '';
	var j = 0;
	var i = 0;
	for (i=0; i<InString.length; i++){
		FoundCode = '';
		NextChar = InString.charAt(i);
		for (j=0; j<CharList.length; j++){
			if (NextChar == CharList[j]){
				FoundCode = EscapeList[j];
			}
		}
		if (FoundCode.length > 0){
			OutString += FoundCode;
		}
		else{
			OutString += NextChar;
		}
	}
	return OutString;
}

function TrimString(InString){
        var x = 0

        if (InString.length != 0) {
                while ((escape(InString.charAt(InString.length - 1)) == '%20') || (escape(InString.charAt(InString.length - 1)) == '%0A') || (escape(InString.charAt(InString.length - 1)) == '%0D')){
                        InString = InString.substring(0, InString.length - 1)
                }

                while ((escape(InString.charAt(0)) == '%20') || (escape(InString.charAt(0)) == '%0A') || (escape(InString.charAt(0)) == '%0D')){
                        InString = InString.substring(1, InString.length)
                }

                while (InString.indexOf('  ') != -1) {
                        x = InString.indexOf('  ')
                        InString = InString.substring(0, x) + InString.substring(x+1, InString.length)
                 }

                return InString;
        }

        else {
                return '';
        }

}


function RemovePunctuation(InString){

var OutString = '';
        for (i=0; i<InString.length; i++){
                if ((InString.charAt(i) == '.') || (InString.charAt(i) == ',') ||(InString.charAt(i) == ';') || (InString.charAt(i) == ':') || (InString.charAt(i) == '!') || (InString.charAt(i) == '?') || (InString.charAt(i) == '"')){}
                else {
                        OutString += InString.charAt(i);
                }
        }
        return OutString;
}

function CheckBeginning(Guess, Answer){
var OutString = '';
var i = 0;
        while (Guess.charAt(i) == Answer.charAt(i)) {
                OutString += Guess.charAt(i);
                i++;
        }
        return OutString;
}

function CheckEnd(Guess, Answer){
var i=0;
var j=0;
var OutString='';
        i = Guess.length;
        j = Answer.length;
        while (Guess.charAt(i) == Answer.charAt(j)){
                OutString = Guess.charAt(i) + OutString;
                i--;
                j--;
        }
        return OutString;
}

function FindLongest(InArray){
	if (InArray.length < 1){return -1;}

	var Longest = 0;
	for (var i=1; i<InArray.length; i++){
		if (InArray[i].length > InArray[Longest].length){
			Longest = i;
		}
	}
	return Longest;
}

function CheckWords(Guess, Answer){
        var Start = 0;
        var End = 0;
        var LoopCounter = 0;
        var ReturnList = '';
        var i = 0;
        var j = 0;

        GuessWords = new Array();
        AnswerWords = new Array();

        Guess = RemovePunctuation(Guess);
        Answer = RemovePunctuation(Answer);

        while (Guess.indexOf(' ', Start) > -1) {
                End = Guess.indexOf(' ', Start);
                GuessWords[LoopCounter] = ConvertCase(Guess.substring(Start, End), 0);
                LoopCounter++;
                Start = End + 1;
        }
        GuessWords[LoopCounter] = ConvertCase(Guess.substring(Start, Guess.length), 0);

        Start = 0;
        LoopCounter = 0;

        while (Answer.indexOf(' ', Start) > -1) {
                End = Answer.indexOf(' ', Start);
                AnswerWords[LoopCounter] = Answer.substring(Start, End);
                LoopCounter++;
                Start = End + 1;
        }
        AnswerWords[LoopCounter] = Answer.substring(Start, Answer.length);

        ReturnList = '';

        for (i = 0; i < GuessWords.length; i++){
                for (j = 0; j < AnswerWords.length; j++){

                        if (GuessWords[i] == ConvertCase(AnswerWords[j], 0)){
                                ReturnList = ReturnList + AnswerWords[j] + ', ' ;
                                AnswerWords[j] = '';
                                break;
                        }
                }
        }
        if (ReturnList.length > 0){
                ReturnList = ReturnList.substring(0, ReturnList.length - 2);
        }
        return ReturnList;
}

function CheckAnswer(ShowHint){
//if the question's already correct, exit gracefully
	if (State[QNum-1][0] == 1){
		ShowAnswers();
		return;
	}

	var Output = '';

//Get the guess, trim it, and translate it if necessary
	var Guess;
	if (is.ie){
		Guess = TrimString(document.QForm.Answer.value);
	}
	else{
		Guess = TrimString(Question.doc.QForm.Answer.value);
	}

	if (is.mac){
		Guess = unescape(MacStringToWin(Guess));
	}

	var RealGuess = Guess;

	if (CaseSensitive == false){
		Guess = ConvertCase(Guess, 1);
	}


//Get the correct answers and put them into an array
	CorrectAs = new Array();
	RealAs = new Array();

	for (var i=0; i<I[QNum-1][1].length; i++){
		CorrectAs[i] = unescape(I[QNum-1][1][i][0]);
		RealAs[i] = CorrectAs[i];
		if (CaseSensitive == false){
			CorrectAs[i] = ConvertCase(CorrectAs[i], 1);
		}
	}

//Check each answer to see whether it's correct -- if so, set state variables and exit
	var Right = -1;
	var OtherAnswers = '';
	for (i=0; i<CorrectAs.length; i++){
		if (Guess==CorrectAs[i]){Right = i;}else{OtherAnswers+=RealAs[i] + '<BR>';};
	}

	if (Right > -1){
		State[QNum-1][0] = 1;
		Output = CorrectResponse + '<BR>';
		if (OtherAnswers.length > 0){
			Output += TheseAnswersToo + '<BR>' + OtherAnswers;
		}

//Check whether the quiz is finished
		var Finished = true;
		for (var i=0; i<State.length; i++){
			if (State[i][0] == 0){Finished = false;}
		}


//Get the score for this question
	var HintPenalty = (State[QNum-1][2]*10)/CorrectAs[Right].length;
	State[QNum-1][4]  = Math.floor((10 - State[QNum-1][1]) - HintPenalty);

//Calculate scores
		if ((Finished==true)||(ContinuousScoring==true)){

//Add up scores for all questions done so far			
			var Score = 0;
			var DoneQs = 0;
			for (i=0; i<State.length; i++){
				if (State[i][0] == 1){
					Score += State[i][4];
					DoneQs++;
				}
			}
			Score = Math.floor((Score*100)/(DoneQs*10)) + '%';
			Output = Output + '<BR><BR>' + YourScoreIs + ' ' + Score + '.';
		}

		if (Finished == true){
			var CFT = 0;
			for (i=0; i<State.length; i++){
				if ((State[i][1] == 0)&&(State[i][2] == 0)){
				CFT++;
				}
			}
		Output += '<BR><BR>' + CorrectFirstTime + CFT + '/' + I.length;
		}
	}

//else the answer wasn't right
	else {
//increment the tries or hint variable for that question
		if (ShowHint == false){State[QNum-1][1]++;}else{State[QNum-1][2]++;}

//Find which answer is closest
		CorrectBits = new Array();
		CorrectBits[0] = new Array(); //Beginning bits
		CorrectBits[1] = new Array(); //End bits
		CorrectBits[2] = new Array(); //Combined bits
		CorrectBits[3] = new Array(); //Hint (in case needed)

		for (i=0; i<CorrectAs.length; i++){
			CorrectBits[0][i] = CheckBeginning(Guess, CorrectAs[i]);
			if (CorrectBits[0][i].length > 0){
				CorrectBits[0][i] = RealAs[i].substring(0,CorrectBits[0][i].length);
			}

			CorrectBits[1][i] = CheckEnd(Guess, CorrectAs[i]);
			if (CorrectBits[1][i].length > 0){
				CorrectBits[1][i] = RealAs[i].substring(RealAs[i].length-CorrectBits[1][i].length,RealAs[i].length);
			}

			CorrectBits[2][i] = CorrectBits[0][i] + ' ... ' + CorrectBits[1][i];
			CorrectBits[3][i] = CorrectBits[0][i] + RealAs[i].charAt(CorrectBits[0][i].length);
			if (CorrectBits[3][i].charAt(CorrectBits[3][i].length-1) == ' '){
				CorrectBits[3][i] += RealAs[i].charAt(CorrectBits[3][i].length);
			}
			CorrectBits[3][i] += '...'
		}
		var LongestCorrect = FindLongest(CorrectBits[2]);
		if (CorrectBits[2][LongestCorrect].length > 5){
			Output = ThisMuchIsCorrect + '<BR>' + CorrectBits[2][LongestCorrect];
		}
		else{
			if (ShowHint == false){
				Output = IncorrectResponse;
			}
		}
//Include words found in the answer
			var FoundWords = CheckWords(Guess, CorrectAs[LongestCorrect])
			if (FoundWords.length > 0){
				Output += '<BR><BR>' + TheseWordsAppear + FoundWords;
			}

		if (ShowHint == true){
			Output += '<BR><BR>' + GiveHint + CorrectBits[3][LongestCorrect];
		}
	}

	WriteFeedback(Output);
}

function ShowAnswers(){
//If the question isn't done, mark it as done. Score will be 0;
	State[QNum-1][0] = 1;
	State[QNum-1][1] = -1;
	State[QNum-1][2] = -1;

//Get the correct answers and put them into an array
	var Output = TheseCorrect + '<BR><BR>';;
	for (var i=0; i<I[QNum-1][1].length; i++){
		Output += unescape(I[QNum-1][1][i][0]) + '<BR>';
	}
	WriteFeedback(Output);
	return true;
}

</SCRIPT>
</HEAD>
<!--<BODY>Fool those dumb ad-inserting ISPs</BODY>-->

<BODY BACKGROUND="" LINK="#0000ff" VLINK="#0000cc" onLoad="StartUp()" onResize="ShowQuestion()">

<SCRIPT LANGUAGE="JavaScript">
	var OutStuff = '';

	OutStuff = '<STYLE TYPE="text/css">#NavBarDiv';
	OutStuff += '{position:absolute; left:0; top:10; height: 800; width: 10;';
	OutStuff += 'background-color:' + NavBarColor + '; layer-background-color: ' + NavBarColor + ';}';
	OutStuff += '</STYLE>';
	OutStuff += '<DIV ID="NavBarDiv"></DIV>';
	document.write(OutStuff);

	OutStuff = '<STYLE TYPE="text/css">#TitleDiv';
	OutStuff += '{position:absolute; left:0; top:200; height: 10; width: 10;';
	OutStuff += 'background-color:' + PageBGColor + '; layer-background-color: ' + PageBGColor + ';}';
	OutStuff += '</STYLE>';
	OutStuff += '<DIV ID="TitleDiv"></DIV>';
	document.write(OutStuff);

	OutStuff = '<STYLE TYPE="text/css">#QNumberDiv';
	OutStuff += '{position:absolute; left:0; top:300; height: 10; width: 10; ';
	OutStuff += 'background-color:' + PageBGColor + '; layer-background-color: ' + PageBGColor + ';}';
	OutStuff += '</STYLE>';
	OutStuff += '<DIV ID="QNumberDiv"></DIV>';
	document.write(OutStuff);

	OutStuff = '<STYLE TYPE="text/css">#QuestionDiv';
	OutStuff += '{position:absolute; left:0; top:400; height: 10; width: 10; ';
	OutStuff += 'background-color:' + ExBGColor + '; layer-background-color: ' + ExBGColor + ';}';
	OutStuff += '</STYLE>';
	OutStuff += '<DIV ID="QuestionDiv"></DIV>';
	document.write(OutStuff);

	OutStuff = '<STYLE TYPE="text/css">#FeedbackDiv';
	OutStuff += '{position:absolute; left:0; top:1500; height: 10; ';
	OutStuff += 'background-color:' + PopupBGColor + '; layer-background-color: ' + PopupBGColor + ';}';
	OutStuff += '</STYLE>';
	OutStuff += '<DIV ID="FeedbackDiv"></DIV>';
	document.write(OutStuff);

</SCRIPT>

</BODY>
</HTML> 
